<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Js parseFloat()函数 [去除数字后的非数字字符]</title>
    <url>/2020/01/05/Js-parseFloat-%E5%87%BD%E6%95%B0-%E5%8E%BB%E9%99%A4%E6%95%B0%E5%AD%97%E5%90%8E%E7%9A%84%E9%9D%9E%E6%95%B0%E5%AD%97%E5%AD%97%E7%AC%A6/</url>
    <content><![CDATA[<h2 id="parseFloat"><a href="#parseFloat" class="headerlink" title="parseFloat()"></a>parseFloat()</h2><h3 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h3><p>该函数指定字符串中的首个字符是否是数字。如果是，则对字符串进行解析，直到到达数字的末端为止，然后以数字返回该数字，而不是作为字符串。</p>
<p><em>其实就是要有一段字符串然后以数字开头，然后开始检索，遇到第一个不是数字的（空格也算）就把后头（包括这个）全砍掉。</em></p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">parseFloat(string)</span><br></pre></td></tr></table></figure>

<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">document.write(parseFloat(&quot;10&quot;) + &quot;&lt;br&gt;&quot;);</span><br><span class="line">document.write(parseFloat(&quot;10.00&quot;) + &quot;&lt;br&gt;&quot;);</span><br><span class="line">document.write(parseFloat(&quot;10.33&quot;) + &quot;&lt;br&gt;&quot;);</span><br><span class="line">document.write(parseFloat(&quot;34 45 66&quot;) + &quot;&lt;br&gt;&quot;);</span><br><span class="line">document.write(parseFloat(&quot;   60   &quot;) + &quot;&lt;br&gt;&quot;);</span><br><span class="line">document.write(parseFloat(&quot;40 years&quot;) + &quot;&lt;br&gt;&quot;);</span><br><span class="line">document.write(parseFloat(&quot;He was 40&quot;) + &quot;&lt;br&gt;&quot;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>结果为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">10</span><br><span class="line">10.33</span><br><span class="line">34</span><br><span class="line">60</span><br><span class="line">40</span><br><span class="line">NaN</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JS 函数整理</category>
      </categories>
      <tags>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-01-05日目标</title>
    <url>/2020/01/05/2020-01-05%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="2020-01-05日目标"><a href="#2020-01-05日目标" class="headerlink" title="2020-01-05日目标"></a>2020-01-05日目标</h2><ol>
<li>听力10min+单词10个</li>
<li>继续学习完善正则表达式</li>
<li>南邮ctf <a href="https://cgctf.nuptsast.com/challenges#Web" target="_blank" rel="noopener">AAencode</a></li>
<li><a href="https://www.runoob.com/js/js-conventions.html" target="_blank" rel="noopener">学习至JS代码规范</a></li>
<li>花一点时间备考大英1</li>
</ol>
<h2 id="2020-01-04总结"><a href="#2020-01-04总结" class="headerlink" title="2020-01-04总结"></a>2020-01-04总结</h2><ol>
<li><a href="https://blog.csdn.net/h610443955/article/details/81079439" target="_blank" rel="noopener">发现了一篇有关正则表达式不错的文章</a>并学习整理了第一章节</li>
<li>在阿里云买了域名并绑定了博客，以后可以直接访问 <a href="www.albatross-g.site">我的新域名</a></li>
<li>复习了高数的渐近线和间断点</li>
<li>Js正则表达式-JS使用误区</li>
<li>完成了bugku前三道简单题（和南邮前三题几乎一样）</li>
</ol>
<table>
<thead>
<tr>
<th>目标</th>
<th>(0/10)</th>
</tr>
</thead>
<tbody><tr>
<td>完善今日对 JS正则表达式 的整理</td>
<td>8</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/js/js-conventions.html" target="_blank" rel="noopener">学习至JS代码规范</a></td>
<td>6</td>
</tr>
<tr>
<td>南邮ctf <a href="https://cgctf.nuptsast.com/challenges#Web" target="_blank" rel="noopener">AAencode</a></td>
<td>0</td>
</tr>
<tr>
<td>听力10min+单词10个</td>
<td>5</td>
</tr>
<tr>
<td>9:00去图书馆</td>
<td>9</td>
</tr>
<tr>
<td>状态</td>
<td>6</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>JS prototype属性</title>
    <url>/2020/01/04/JS-prototype%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<h2 id="prototype属性"><a href="#prototype属性" class="headerlink" title="prototype属性"></a>prototype属性</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>prototype 属性允许您向对象添加属性和方法</p>
<p><strong>*注意：</strong> Prototype 是全局属性，适用于所有的 Javascript 对象。*</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">object.prototype.name&#x3D;value;</span><br></pre></td></tr></table></figure>

<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">function employee(name,jobtitle,born)&#123;</span><br><span class="line">	this.name&#x3D;name;</span><br><span class="line">	this.jobtitle&#x3D;jobtitle;</span><br><span class="line">	this.born&#x3D;born;</span><br><span class="line">&#125;</span><br><span class="line">var fred&#x3D;new employee(&quot;Fred Flintstone&quot;,&quot;Caveman&quot;,1970);</span><br><span class="line">employee.prototype.salary&#x3D;null;</span><br><span class="line">fred.salary&#x3D;20000;</span><br><span class="line">document.write(fred.salary);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，prototype函数将salary属性的值清空，便于接下来的赋值。</p>
]]></content>
      <categories>
        <category>JS 属性整理</category>
      </categories>
      <tags>
        <tag>属性</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-01-04日目标</title>
    <url>/2020/01/04/2020-01-04%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="2020-01-04日目标"><a href="#2020-01-04日目标" class="headerlink" title="2020-01-04日目标"></a>2020-01-04日目标</h2><ol>
<li>完善今日对 JS正则表达式 的整理</li>
<li><a href="https://www.runoob.com/js/js-conventions.html" target="_blank" rel="noopener">学习至JS代码规范</a></li>
<li>南邮ctf <a href="https://cgctf.nuptsast.com/challenges#Web" target="_blank" rel="noopener">AAencode</a></li>
<li>听力10min+单词10个</li>
<li>9:00去图书馆</li>
</ol>
<h2 id="2020-01-03总结"><a href="#2020-01-03总结" class="headerlink" title="2020-01-03总结"></a>2020-01-03总结</h2><ol>
<li>初步入门了 CSS盒子模型</li>
<li>完成了南邮ctf “这题不是web”和“层层递进”   （两题纯脑洞基本不含技术）</li>
<li>共整理了JS 五个函数</li>
<li>对JS 正则表达式有了初步了解</li>
</ol>
<table>
<thead>
<tr>
<th>目标</th>
<th>(0/10)</th>
</tr>
</thead>
<tbody><tr>
<td>10min英语听力+10个英语单词</td>
<td>0</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/js/js-typeof.html" target="_blank" rel="noopener">JS typeof操作符</a>-JS代码规范</td>
<td>5</td>
</tr>
<tr>
<td><a href="https://cgctf.nuptsast.com/challenges#Web" target="_blank" rel="noopener">南邮ctf “这题不是web”</a></td>
<td>10</td>
</tr>
<tr>
<td>CSS盒子模型</td>
<td>9</td>
</tr>
<tr>
<td>9:30在1307考html</td>
<td>7</td>
</tr>
<tr>
<td>状态</td>
<td>5</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>JS 正则表达式（持续更新）</title>
    <url>/2020/01/04/JS-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>正则表达式是由一个字符序列形成的搜索模式。</p>
<p>当你在文本中搜索数据时，你可以用搜索模式来描述你要查询的内容。</p>
<p>正则表达式可以是一个简单的字符，或一个更复杂的模式。</p>
<p>正则表达式可用于所有文本搜索和文本替换的操作。</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;正则表达式主体&#x2F;修饰符(可选)</span><br></pre></td></tr></table></figure>

<h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><table>
<thead>
<tr>
<th>修饰符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>i</td>
<td>执行对大小写不敏感的匹配。</td>
</tr>
<tr>
<td>g</td>
<td>执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。</td>
</tr>
<tr>
<td>m</td>
<td>执行多行匹配</td>
</tr>
</tbody></table>
<h2 id="正则表达式模式"><a href="#正则表达式模式" class="headerlink" title="正则表达式模式"></a>正则表达式模式</h2><p>正则表达式是匹配模式，要么匹配字符，要么匹配位置。</p>
<h3 id="字符匹配"><a href="#字符匹配" class="headerlink" title="字符匹配"></a>字符匹配</h3><h4 id="两种模糊匹配"><a href="#两种模糊匹配" class="headerlink" title="两种模糊匹配"></a>两种模糊匹配</h4><h5 id="m-n-横向模糊匹配"><a href="#m-n-横向模糊匹配" class="headerlink" title="{m,n}横向模糊匹配"></a>{m,n}横向模糊匹配</h5><p>横向模糊指的是，一个正则可匹配的字符串的长度不是固定的，可以是多种情况的。</p>
<blockquote>
<p>譬如<code>{m,n}</code>，表示连续出现最少m次，最多n次。</p>
</blockquote>
<h5 id="abc-纵向模糊匹配"><a href="#abc-纵向模糊匹配" class="headerlink" title="[abc]纵向模糊匹配"></a>[abc]纵向模糊匹配</h5><p>纵向模糊指的是，一个正则匹配的字符串，具体到某一位字符时，它可以不是某个确定的字符，可以有多种可能。</p>
<blockquote>
<p>譬如<code>[abc]</code>，表示该字符是可以字符“a”、“b”、“c”中的任何一个。</p>
</blockquote>
<p><em>需要强调的是，虽叫字符组（字符类），但只是其中一个字符。例如<code>[abc]</code>，表示匹配一个字符，它可以是“a”、“b”、“c”之一。</em></p>
<h4 id="字符组"><a href="#字符组" class="headerlink" title="字符组"></a>字符组</h4><h5 id="a-z-范围表示"><a href="#a-z-范围表示" class="headerlink" title="[a-z]范围表示"></a>[a-z]范围表示</h5><p>比如<code>[123456abcdefGHIJKLM]</code>，可以写成<code>[1-6a-fG-M]</code>。用连字符<code>-</code>来省略和简写。</p>
<blockquote>
<p>Q:那么要匹配“a”、“-”、“z”这三者中任意一个字符，该怎么做呢？</p>
<p>A:可以写成如下的方式：<code>[-az]</code>或<code>[az-]</code>或<code>[a\-z]</code>。即要么放在开头，要么放在结尾，要么转义。</p>
</blockquote>
<h5 id="abc-排除字符组"><a href="#abc-排除字符组" class="headerlink" title="[^abc]排除字符组"></a>[^abc]排除字符组</h5><p>排除字符组（反义字符组）就是，某位字符可以是任何东西，但就不能是”a”、”b”、”c”。</p>
<h5 id="d类似的简写形式"><a href="#d类似的简写形式" class="headerlink" title="\d类似的简写形式"></a>\d类似的简写形式</h5><blockquote>
<p><strong><code>\d</code></strong>就是<code>[0-9]</code>。表示是一位数字。记忆方式：其英文是digit（数字）。</p>
<p><strong><code>\D</code></strong>就是<code>[^0-9]</code>。表示除数字外的任意字符。</p>
<p><strong><code>\w</code></strong>就是<code>[0-9a-zA-Z_]</code>。表示数字、大小写字母和下划线。记忆方式：w是word的简写，也称单词字符。</p>
<p><strong><code>\W</code></strong>是<code>[^0-9a-zA-Z_]</code>。非单词字符。</p>
<p><strong><code>\s</code></strong>是<code>[ \t\v\n\r\f]</code>。表示空白符，包括空格、水平制表符、垂直制表符、换行符、回车符、换页符。记忆方式：s是space character的首字母。</p>
<p><strong><code>\S</code></strong>是<code>[^ \t\v\n\r\f]</code>。 非空白符。</p>
<p><strong><code>.</code></strong>就是<code>[^\n\r\u2028\u2029]</code>。通配符，表示几乎任意字符。换行符、回车符、行分隔符和段分隔符除外。记忆方式：想想省略号…中的每个点，都可以理解成占位符，表示任何类似的东西。</p>
</blockquote>
<blockquote>
<p>Q:如果要匹配任意字符怎么办？</p>
<p>A:可以使用<code>[\d\D]</code>、<code>[\w\W]</code>、<code>[\s\S]</code>和<code>[^]</code>中任何的一个。</p>
</blockquote>
<h4 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h4><h5 id="m-类似的简写形式"><a href="#m-类似的简写形式" class="headerlink" title="{m,}类似的简写形式"></a>{m,}类似的简写形式</h5><blockquote>
<p><code>{m,}</code> 表示至少出现m次。</p>
<p><code>{m}</code> 等价于<code>{m,m}</code>，表示出现m次。</p>
<p>? 等价于{0,1}，表示出现或者不出现。记忆方式：问号的意思表示，有吗？</p>
<p><code>+</code>等价于<code>{1,}</code>，表示出现至少一次。记忆方式：加号是追加的意思，得先有一个，然后才考虑追加。</p>
<p><code>*</code> 等价于<code>{0,}</code>，表示出现任意次，有可能不出现。记忆方式：看看天上的星星，可能一颗没有，可能零散有几颗，可能数也数不过来。</p>
</blockquote>
<h5 id="贪婪匹配和惰性匹配"><a href="#贪婪匹配和惰性匹配" class="headerlink" title="贪婪匹配和惰性匹配"></a>贪婪匹配和惰性匹配</h5><h6 id="d-m-n-贪婪匹配"><a href="#d-m-n-贪婪匹配" class="headerlink" title="/\d{m,n}/贪婪匹配"></a>/\d{m,n}/贪婪匹配</h6><p>其中正则<code>/\d{2,5}/</code>，表示数字连续出现2到5次。会匹配2位、3位、4位、5位连续数字。</p>
<p>实例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var regex &#x3D; &#x2F;\d&#123;2,5&#125;&#x2F;g;</span><br><span class="line">var string &#x3D; &quot;123 1234 12345 123456&quot;;</span><br><span class="line">console.log( string.match(regex) ); </span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; [&quot;123&quot;, &quot;1234&quot;, &quot;12345&quot;, &quot;12345&quot;]</span><br></pre></td></tr></table></figure>



<h6 id="d-m-n-惰性匹配"><a href="#d-m-n-惰性匹配" class="headerlink" title="/\d{m,n}?/惰性匹配"></a>/\d{m,n}?/惰性匹配</h6><p>其中<code>/\d{2,5}?/</code>表示，虽然2到5次都行，当2个就够的时候，就不在往下尝试了。</p>
<p>实例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var regex &#x3D; &#x2F;\d&#123;2,5&#125;?&#x2F;g;</span><br><span class="line">var string &#x3D; &quot;123 1234 12345 123456&quot;;</span><br><span class="line">console.log( string.match(regex) ); </span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; [&quot;12&quot;, &quot;12&quot;, &quot;34&quot;, &quot;12&quot;, &quot;34&quot;, &quot;12&quot;, &quot;34&quot;, &quot;56&quot;]</span><br></pre></td></tr></table></figure>

<p>通过在量词后面加个问号就能实现惰性匹配，因此所有惰性匹配情形如下：</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;m,n&#125;?</span><br><span class="line">&#123;m,&#125;?</span><br><span class="line">??</span><br><span class="line">+?</span><br><span class="line">*?</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="a-b-多选分支"><a href="#a-b-多选分支" class="headerlink" title="/a|b/多选分支"></a>/a|b/多选分支</h4><p>具体形式如下：<code>(p1|p2|p3)</code>，其中<code>p1</code>、<code>p2</code>和<code>p3</code>是子模式，用<code>|</code>（管道符）分隔，表示其中任何之一。</p>
<p>实例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var regex &#x3D; &#x2F;good|nice&#x2F;g;</span><br><span class="line">var string &#x3D; &quot;good idea, nice try.&quot;;</span><br><span class="line">console.log( string.match(regex) ); </span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; [&quot;good&quot;, &quot;nice&quot;]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Q:/a|b/和/[ab]/有什么区别呢？</p>
<p>A: emmm不太好讲，大家自己先体会下，等我变牛了来告诉你们！</p>
</blockquote>
<p>注：但有个事实我们应该注意，比如我用<code>/good|goodbye/</code>，去匹配”goodbye”字符串时，结果是”good”：*</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var regex &#x3D; &#x2F;good|goodbye&#x2F;g;</span><br><span class="line">var string &#x3D; &quot;goodbye&quot;;</span><br><span class="line">console.log( string.match(regex) ); </span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; [&quot;good&quot;]</span><br></pre></td></tr></table></figure>

<p><em>也就是说，分支结构也是惰性的，即当前面的匹配上了，后面的就不再尝试了（前提是两者要有重复部分）。</em></p>
<h4 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h4><h5 id="匹配16进制颜色值"><a href="#匹配16进制颜色值" class="headerlink" title="匹配16进制颜色值"></a><strong>匹配16进制颜色值</strong></h5><p>Q:要求匹配</p>
<blockquote>
<p>#ffbbad</p>
<p>#Fc01DF</p>
<p>#FFF</p>
<p>#ffE</p>
</blockquote>
<p>A:</p>
<blockquote>
<p>/#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})/g</p>
</blockquote>
<h5 id="匹配时间"><a href="#匹配时间" class="headerlink" title="匹配时间"></a><strong>匹配时间</strong></h5><p>Q:要求匹配</p>
<blockquote>
<p>23:59</p>
<p>02:07</p>
</blockquote>
<p>A:</p>
<blockquote>
<p><code>/([01][0-9]|[2][0-3]):([0-5][0-9])/</code></p>
</blockquote>
<h5 id="window操作系统文件路径"><a href="#window操作系统文件路径" class="headerlink" title="window操作系统文件路径"></a><strong>window操作系统文件路径</strong></h5><p>Q:要求匹配</p>
<blockquote>
<p>F:\study\javascript\regex\regular expression.pdf</p>
<p>F:\study\javascript\regex\</p>
<p>F:\study\javascript</p>
<p>F:\</p>
</blockquote>
<p>A:</p>
<blockquote>
<p><code>/^[a-zA-Z]:\\([^\\:*&lt;&gt;|&quot;?\r\n/]+\\)*([^\\:*&lt;&gt;|&quot;?\r\n/]+)?$/</code></p>
</blockquote>
<h5 id="匹配id"><a href="#匹配id" class="headerlink" title="匹配id"></a><strong>匹配id</strong></h5><p>Q:要求从</p>
<blockquote>
<div id="container" class="main"></div>
</blockquote>
<p>提取出id=”container”</p>
<p>A:</p>
<blockquote>
<p> /id=”.*?”/</p>
</blockquote>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
  </entry>
  <entry>
    <title>JS test()/exec()函数 [字符串是否匹配]</title>
    <url>/2020/01/04/JS-test-exec-%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="test"><a href="#test" class="headerlink" title="test()"></a>test()</h2><h3 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h3><p>test() 方法用于检测一个字符串是否匹配某个模式，如果字符串中含有匹配的文本，则返回 true，否则返回 false。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">regex.test(string);</span><br></pre></td></tr></table></figure>

<p><em>即判断string中有无与regex中匹配的字符串</em></p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var str &#x3D; &#x2F;G&#x2F;;               &#x2F;&#x2F;也可以用var str&#x3D;RegEx(&quot;G&quot;);</span><br><span class="line">    document.write(str.test(&quot;Welcome to Albatross-G!&quot;));</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&lt;script&gt;中两行可以变成一行（如下）</span><br><span class="line">&#x2F;&#x2F;document.write(&#x2F;G&#x2F;.test(&quot;Welcome to Albatross-G!&quot;)</span><br></pre></td></tr></table></figure>

<p>结果为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">true</span><br></pre></td></tr></table></figure>

<h2 id="exec"><a href="#exec" class="headerlink" title="exec()"></a>exec()</h2><h2 id="定义和用法-1"><a href="#定义和用法-1" class="headerlink" title="定义和用法"></a>定义和用法</h2><p>exec() 方法用于检索字符串中的正则表达式的匹配。</p>
<p>该函数返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。</p>
<h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">regex.exec(string);</span><br></pre></td></tr></table></figure>

<p><em>与test()相比不同是，如果匹配到了会返回匹配内容而不是true。</em></p>
<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var str &#x3D; &#x2F;G&#x2F;;               &#x2F;&#x2F;也可以用var str&#x3D;RegEx(&quot;G&quot;);</span><br><span class="line">    document.write(str.exec(&quot;Welcome to Albatross-G!&quot;));</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&lt;script&gt;中两行可以变成一行（如下）</span><br><span class="line">&#x2F;&#x2F;document.write(&#x2F;G&#x2F;.exec(&quot;Welcome to Albatross-G!&quot;)</span><br></pre></td></tr></table></figure>

<p>结果为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">G</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JS 函数整理</category>
      </categories>
      <tags>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>JS search()/repalce()函数 [找/替代字符串]</title>
    <url>/2020/01/03/JS%20search()%20repalce()%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="search"><a href="#search" class="headerlink" title="search()"></a>search()</h2><h3 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h3><p>用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回子串的起始位置。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">string.search(regex(正则表达式));</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://albatross-g.github.io/2020/01/04/JS-正则表达式/" target="_blank" rel="noopener">正则表达式(regex)</a></p>
</blockquote>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var str &#x3D; &quot;Visit Runoob!&quot;; </span><br><span class="line">    var n &#x3D; str.search(&#x2F;runoob&#x2F;i);&#x2F;&#x2F;其中i表示搜索不区分大小写</span><br><span class="line">    document.write(n);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>结果为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure>



<h2 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h2><h3 id="定义和用法-1"><a href="#定义和用法-1" class="headerlink" title="定义和用法"></a>定义和用法</h3><p>用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。</p>
<h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">string.replace(regex(被替换),string(用来替换));</span><br></pre></td></tr></table></figure>

<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var str &#x3D; &quot;Visit Baidu!&quot;; </span><br><span class="line">    var n &#x3D; str.replace(&#x2F;baidu&#x2F;i,&quot;Albatross-G&quot;);</span><br><span class="line">    document.write(n);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>结果是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Visit Albatross-G!</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JS 函数整理</category>
      </categories>
      <tags>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>JS indexOf()函数 [检索字符在字符串的位置]</title>
    <url>/2020/01/03/JS%20indexOf()%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h2><h3 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h3><p>indexOf() 方法可返回某个指定的字符串值在字符串中首次出现的位置。</p>
<p>如果没有找到匹配的字符串则返回 -1。</p>
<p><strong>注意：</strong> indexOf() 方法区分大小写。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">string.indexOf(searchvalue,start)</span><br></pre></td></tr></table></figure>

<h3 id="参数值"><a href="#参数值" class="headerlink" title="参数值"></a>参数值</h3><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>searchvalue</td>
<td>必需。规定需检索的字符串值</td>
</tr>
<tr>
<td>start</td>
<td>可选的整数参数。规定在字符串中开始检索的位置。它的合法取值是 0 到 string Object.length - 1。如省略该参数，则将从字符串的首字符开始检索。</td>
</tr>
</tbody></table>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var str&#x3D;&quot;Hello world, welcome to the universe.&quot;;</span><br><span class="line">var n&#x3D;str.indexOf(&quot;e&quot;);</span><br><span class="line">document.write(n); &#x2F;&#x2F;输出变量不需要加&quot;&quot;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>结果为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure>



<h3 id="相似函数lastIndexOf"><a href="#相似函数lastIndexOf" class="headerlink" title="相似函数lastIndexOf()"></a>相似函数lastIndexOf()</h3><p><em>注意i要大写！</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var str&#x3D;&quot;Hello world, welcome to the universe.&quot;;</span><br><span class="line">var n&#x3D;str.lastIndexOf(&quot;e&quot;);</span><br><span class="line">document.write(n);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>结果为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">35</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>JS 函数整理</category>
      </categories>
      <tags>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP弱类型比较</title>
    <url>/2020/01/03/PHP%E5%BC%B1%E7%B1%BB%E5%9E%8B%E6%AF%94%E8%BE%83/</url>
    <content><![CDATA[<p>前两天在做南邮ctf“md5 collision”时，遇到了关于php弱类型比较的问题，当时搞得似懂非懂，所以今天查了有关资料然后稍微总结一下。</p>
<h2 id="php完全相等-“-”"><a href="#php完全相等-“-”" class="headerlink" title="php完全相等(“===”)"></a>php完全相等(“===”)</h2><p>“===” 在进行比较的时候，会先判断两种字符串的类型是否相等，再比较。<br>也就是说如果两边字符串类型就不同的话，就直接判断为两边不相等。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump(1&#x3D;&#x3D;&#x3D;&quot;1abc&quot;);</span><br></pre></td></tr></table></figure>
<p>结果是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bool(false)</span><br></pre></td></tr></table></figure>
<p>甚至</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump(1&#x3D;&#x3D;&#x3D;1e0);</span><br></pre></td></tr></table></figure>
<p>这种我们正常认知里数值相等的结果也是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bool(false)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>当一个字符串欸当作一个数值来取值，其结果和类型如下:如果该字符串没有包含’.’,’e’,’E’并且其数值值在整形的范围之内。</p>
</blockquote>
<p>所以1e0被认为是浮点数，类型不同自然不相等。</p>
<blockquote>
<p><strong>注意：</strong>使用var_dump函数时，在括号内如果给整型(如1)增加””变成(“1”),则”1”会被认为是字符串。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump(1&#x3D;&#x3D;&#x3D;&quot;1&quot;)</span><br></pre></td></tr></table></figure>
<p>结果是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bool(false)</span><br></pre></td></tr></table></figure>

<h2 id="php弱相等-“-”"><a href="#php弱相等-“-”" class="headerlink" title="php弱相等(“==”)"></a>php弱相等(“==”)</h2><h3 id="php弱相等比较表"><a href="#php弱相等比较表" class="headerlink" title="php弱相等比较表"></a>php弱相等比较表</h3><p>首先看一张图，一般比较就参考下图。<br><img src="https://Albatross-G.github.io/img/php%E5%BC%B1%E7%9B%B8%E7%AD%89%E6%AF%94%E8%BE%83%E8%A1%A8.png" alt=""></p>
<h3 id="php弱相等时类型的转化"><a href="#php弱相等时类型的转化" class="headerlink" title="php弱相等时类型的转化"></a>php弱相等时类型的转化</h3><p>首先一定要注意：<strong>只有当类型不同时才会转化！</strong><br>“1e1234567”会被看成浮点型，正常计算法则计算即可<br>“1e1234abc”会被看成字符串，转化规则：<br>取第一个字母之前的数字，如无数字则为0。<br>如：1a1234abc转化为1，abcd转化为0。</p>
<h3 id="一些发现"><a href="#一些发现" class="headerlink" title="一些发现"></a>一些发现</h3><p>可是笔者经过一些测试发现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump(&quot;1e2abc&quot;&#x3D;&#x3D;100);</span><br></pre></td></tr></table></figure>
<p>得到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bool(true)</span><br></pre></td></tr></table></figure>
<p>也就是说如果第一个非e/E字母前满足科学计数法形式，会先计算科学计数法数变成整型然后去掉之后字母。</p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>比较</tag>
        <tag>数据类型的转化</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-01-03日目标</title>
    <url>/2020/01/02/2020-01-03%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<p>1. 9:30在1307考html<br>2. 10min英语听力+10个英语单词<br>3. <a href="https://www.runoob.com/js/js-typeof.html" target="_blank" rel="noopener">JS typeof操作符</a>-JS代码规范<br>4. <a href="https://cgctf.nuptsast.com/challenges#Web" target="_blank" rel="noopener">南邮ctf “这题不是web”</a><br>5. CSS盒子模型</p>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>以数组作为函数参数的两种方法</title>
    <url>/2020/01/01/%E4%BB%A5%E6%95%B0%E7%BB%84%E4%BD%9C%E4%B8%BA%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>数组可以作为函数的参数使用，进行数据传送。数组作为函数参数有两种形式。<br>（1）把元素作为实参使用。<br>（2）把数组名作为函数的形参和实参使用。</p>
<h2 id="数组元素作为函数实参"><a href="#数组元素作为函数实参" class="headerlink" title="数组元素作为函数实参"></a>数组元素作为函数实参</h2><h3 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdafx.h&gt;</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">void test(int v);</span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">    int a[10]&#x3D;&#123;1,2,3,4,-1,-2,-3,-4,2,3&#125;;</span><br><span class="line">    int i;</span><br><span class="line">    for(i&#x3D;0;i&lt;&#x3D;10;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        test(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">void test(int v)</span><br><span class="line">&#123;</span><br><span class="line">    if(v&gt;0)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%d\n&quot;,v);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;0\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数组名作为函数参数"><a href="#数组名作为函数参数" class="headerlink" title="数组名作为函数参数"></a>数组名作为函数参数</h2><p>注：<br>（1）与数组元素作为函数参数不同的是，用数组名作为函数参数时，要求形参与相对应的实参都必须是类型相同的数组，否则会发生错误。<br>（2）用数组名作为函数参数时，并不是进行值的传递，即不是把实参数组的每一个元素的值都赋与形参数组的各个元素。因为实际上形参数组并不存在，编译系统并不为形参数组分配内存。<br>数据的传递：数组名就是数组的首地址。因此在数组名作为函数参数时所进行的传递只是地址的传递，也就是说把实参数组的首地址赋予形参数组名。形参数组名取得该首地址之后，也等于有了实际的数组，即实参与形参有一段共用的内存空间。</p>
<h3 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdafx.h&gt;</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">void test (int b[10]);</span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">    int a[10]&#x3D;&#123;2,4,6,8,10,12,14,16,18,20&#125;;</span><br><span class="line">    test(a);</span><br><span class="line">    putchar(&#39;\n&#39;);</span><br><span class="line">&#125;</span><br><span class="line">void test (int b[10])</span><br><span class="line">&#123;</span><br><span class="line">    int i&#x3D;0;</span><br><span class="line">    for(;i&lt;10;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%6d&quot;,b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="例3"><a href="#例3" class="headerlink" title="例3"></a>例3</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有一个一维数组score，内放10个学生成绩，求平均成绩。（写一个average函数获取平均成绩）。</span><br><span class="line"> </span><br><span class="line">#include &lt;stdafx.h&gt;</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">double average(double array[10]);&#x2F;*函数声明*&#x2F;</span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">    double score[10]&#x3D;&#123;82,100,55,80,64,78,26,65,36,85&#125;,result;</span><br><span class="line">    result&#x3D;average(score);</span><br><span class="line">    printf(&quot;%lf\n&quot;,result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">double average(double array[10])</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line">    double f&#x3D;0;</span><br><span class="line">    for(i&#x3D;0;i&lt;&#x3D;9;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        f+&#x3D;array[i];</span><br><span class="line">    &#125;</span><br><span class="line">    f &#x2F;&#x3D; 10;</span><br><span class="line">    return (f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>函数</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>初学C语言指针的一些思考</title>
    <url>/2020/01/01/%E5%88%9D%E5%AD%A6C%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<h2 id="函数求平均数-没用到指针"><a href="#函数求平均数-没用到指针" class="headerlink" title="函数求平均数(没用到指针)"></a>函数求平均数(没用到指针)</h2><p>我们先看一个用函数求平均数的例子<br>这里面没有用到指针</p>
<h3 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int Getaverage(int arr[5],int size);</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int sz[5]&#x3D;&#123;1,2,3,4,5&#125;;</span><br><span class="line">	double average;</span><br><span class="line">	average&#x3D;Getaverage(sz,5);</span><br><span class="line">	printf(&quot;%lf&quot;,average);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int Getaverage(int arr[5],int size)</span><br><span class="line">&#123;</span><br><span class="line">	int i,sum&#x3D;0;</span><br><span class="line">	double ave;</span><br><span class="line">	for(i&#x3D;0;i&lt;size;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		sum&#x3D;sum+arr[i];</span><br><span class="line">	&#125;</span><br><span class="line">	ave&#x3D;sum&#x2F;size;</span><br><span class="line">	return ave;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（在C语言中若要把数组作为函数参数，要遵循其规则，详情可见文章<a href="https://albatross-g.github.io/2020/01/01/%E4%BB%A5%E6%95%B0%E7%BB%84%E4%BD%9C%E4%B8%BA%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">以数组作为函数参数的两种方法.docx</a>）</p>
<h2 id="函数求平均数-用到指针"><a href="#函数求平均数-用到指针" class="headerlink" title="函数求平均数(用到指针)"></a>函数求平均数(用到指针)</h2><p>按文章中的规定此时 形参（arr[5]）和 实参（sz）类型必须相同，所以如果我们main中的sz数组中数字个数发生了变化，则Getaverage也要改变形参，变得非常麻烦，于是我们有了以下对指针的引用。</p>
<h3 id="普通版"><a href="#普通版" class="headerlink" title="普通版"></a>普通版</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"> </span><br><span class="line">&#x2F;* 函数声明 *&#x2F;</span><br><span class="line">double getAverage(int *arr, int size);</span><br><span class="line"> </span><br><span class="line">int main ()</span><br><span class="line">&#123;</span><br><span class="line">   &#x2F;* 带有 5 个元素的整型数组  *&#x2F;</span><br><span class="line">   int balance[5] &#x3D; &#123;1000, 2, 3, 17, 50&#125;;</span><br><span class="line">   double avg;</span><br><span class="line"> </span><br><span class="line">   &#x2F;* 传递一个指向数组的指针作为参数 *&#x2F;</span><br><span class="line">   avg &#x3D; getAverage( balance, 5 ) ;</span><br><span class="line"> </span><br><span class="line">   &#x2F;* 输出返回值  *&#x2F;</span><br><span class="line">   printf(&quot;Average value is: %f\n&quot;, avg );</span><br><span class="line">   </span><br><span class="line">   return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">double getAverage(int *arr, int size)</span><br><span class="line">&#123;</span><br><span class="line">  int    i, sum &#x3D; 0;      </span><br><span class="line">  double avg;          </span><br><span class="line"> </span><br><span class="line">  for (i &#x3D; 0; i &lt; size; ++i)</span><br><span class="line">  &#123;</span><br><span class="line">    sum +&#x3D; arr[i];</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  avg &#x3D; (double)sum &#x2F; size;</span><br><span class="line"> </span><br><span class="line">  return avg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样的话，*arr相当于把数组的首地址分配给了函数，就不必对每一次实参的改变调整形参。</p>
<h3 id="进阶版"><a href="#进阶版" class="headerlink" title="进阶版"></a>进阶版</h3><p>再更进一步，可以思考设计一个更贴近实际作用地程序，即scanf输入所需计算的数（个数不限）而得到平均值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">double getAverage(int *arr, int size);</span><br><span class="line"> </span><br><span class="line">int main ()</span><br><span class="line">&#123;</span><br><span class="line">	int i,a[999],n&#x3D;0;</span><br><span class="line">    for(i&#x3D;0;;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">        n++;       </span><br><span class="line">        if(getchar()&#x3D;&#x3D;&#39;\n&#39;)break; </span><br><span class="line">    &#125;</span><br><span class="line">    double avg;</span><br><span class="line">	avg &#x3D; getAverage(a,n) ;</span><br><span class="line"> </span><br><span class="line">    printf(&quot;Average value is: %f\n&quot;, avg );</span><br><span class="line">   </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">double getAverage(int *arr, int size)</span><br><span class="line">&#123;</span><br><span class="line">  int    i, sum &#x3D; 0;      </span><br><span class="line">  double avg;          </span><br><span class="line"> </span><br><span class="line">  for (i &#x3D; 0; i &lt; size; ++i)</span><br><span class="line">  &#123;</span><br><span class="line">    sum +&#x3D; arr[i];</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  avg &#x3D; (double)sum &#x2F; size;</span><br><span class="line"> </span><br><span class="line">  return avg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>函数</tag>
        <tag>指针</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/01/01/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>guide</category>
      </categories>
      <tags>
        <tag>guide</tag>
      </tags>
  </entry>
</search>
