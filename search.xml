<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>URI格式</title>
    <url>/2020/01/25/URI%E6%A0%BC%E5%BC%8F/</url>
    <content><![CDATA[<p><img src="/2020/01/25/URI%E6%A0%BC%E5%BC%8F/7.png" alt="7"></p>
<p>使用 http: 或 https: 等协议方案名获取访问资源时要指定协议类型。不 区分字母大小写，最后附一个冒号（:）。 也可使用 data: 或 javascript: 这类指定数据或脚本程序的方案名。</p>
<h3 id="登录信息（认证）"><a href="#登录信息（认证）" class="headerlink" title="登录信息（认证）"></a>登录信息（认证）</h3><p>指定用户名和密码作为从服务器端获取资源时必要的登录信息（身份 认证）。此项是<strong><em>可选项</em></strong>。</p>
<h3 id="服务器地址"><a href="#服务器地址" class="headerlink" title="服务器地址"></a>服务器地址</h3><p>使用绝对 URI 必须指定待访问的服务器地址。地址可以是类似 hackr.jp 这种 DNS 可解析的名称，或是 192.168.1.1 这类 IPv4 地址 名，还可以是 [0:0:0:0:0:0:0:1] 这样用方括号括起来的 IPv6 地址名。</p>
<h3 id="服务器端口号"><a href="#服务器端口号" class="headerlink" title="服务器端口号"></a>服务器端口号</h3><p>指定服务器连接的网络端口号。此项也是<strong><em>可选项</em></strong>，若用户省略则自动 使用默认端口号。</p>
<h3 id="带层次的文件路径"><a href="#带层次的文件路径" class="headerlink" title="带层次的文件路径"></a>带层次的文件路径</h3><p>指定服务器上的文件路径来定位特指的资源。这与 UNIX 系统的文件 目录结构相似。</p>
<h3 id="查询字符串"><a href="#查询字符串" class="headerlink" title="查询字符串"></a>查询字符串</h3><p>针对已指定的文件路径内的资源，可以使用查询字符串传入任意参 数。此项<strong><em>可选</em></strong>。</p>
<h3 id="片段标识符"><a href="#片段标识符" class="headerlink" title="片段标识符"></a>片段标识符</h3><p>使用片段标识符通常可标记出已获取资源中的子资源（文档内的某个 位置）。但在 RFC 中并没有明确规定其使用方法。该项也为可选 项。</p>
]]></content>
  </entry>
  <entry>
    <title>HTTP协议</title>
    <url>/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h1 id="与HTTP有关的协议"><a href="#与HTTP有关的协议" class="headerlink" title="与HTTP有关的协议"></a>与HTTP有关的协议</h1><p>先通过一张图大致了解一下http协议与相关协议之间的关系：</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/3.png" alt="3"></p>
<h2 id="DNS服务（域名解析）"><a href="#DNS服务（域名解析）" class="headerlink" title="DNS服务（域名解析）"></a>DNS服务（域名解析）</h2><p>DNS 协议提供通过域名 查找 IP 地址，或逆向从 IP 地址反查域名的服务。</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/4.png" alt="4"></p>
<h2 id="TCP协议（位于传输层）"><a href="#TCP协议（位于传输层）" class="headerlink" title="TCP协议（位于传输层）"></a>TCP协议（位于传输层）</h2><ol>
<li>为了方便传输，TCP协议将 大块数据 分割以 报文段（segment）。</li>
<li>为了确保数据能准确无误地送达，TCP协议采用三次握手策略，TCP 不会对传送后的情况置之不理，它一定会向对方确认是否成功送达。</li>
</ol>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/5.png" alt="5"></p>
<h2 id="IP协议（位于网络层）"><a href="#IP协议（位于网络层）" class="headerlink" title="IP协议（位于网络层）"></a>IP协议（位于网络层）</h2><p>IP 间的通信依赖 MAC 地址。在网络上，通信的双方在同一局域网 （LAN）内的情况是很少的，通常是经过多台计算机和网络设备中转 才能连接到对方。而在进行中转时，会利用下一站中转设备的 MAC 地址来搜索下一个中转目标。这时，会采用 ARP 协议（Address Resolution Protocol）。ARP 是一种用以解析地址的协议，根据通信方 的 IP 地址就可以反查出对应的 MAC 地址。<br>没有人能够全面掌握互联网中的传输状况<br>在到达通信目标前的中转过程中，那些计算机和路由器等网络设备只 能获悉很粗略的传输路线。<br>这种机制称为路由选择（routing），有点像快递公司的送货过程。想 要寄快递的人，只要将自己的货物送到集散中心，就可以知道快递公 司是否肯收件发货，该快递公司的集散中心检查货物的送达地址，明 确下站该送往哪个区域的集散中心。接着，那个区域的集散中心自会 判断是否能送到对方的家中。<br>我们是想通过这个比喻说明，无论哪台计算机、哪台网络设备，它们 都无法全面掌握互联网中的细节。</p>
<p><img src="/2020/01/25/HTTP%E5%8D%8F%E8%AE%AE/6.png" alt="6"></p>
]]></content>
  </entry>
  <entry>
    <title>文件压缩</title>
    <url>/2020/01/17/%E6%96%87%E4%BB%B6%E5%8E%8B%E7%BC%A9/</url>
    <content><![CDATA[<h2 id="伪加密"><a href="#伪加密" class="headerlink" title="伪加密"></a>伪加密</h2><h3 id="zip文件"><a href="#zip文件" class="headerlink" title="zip文件"></a>zip文件</h3><p>用winhex打开压缩文件，搜索十六进制”50 4B 01 02”，找到从”50”开始的第九第十个字节全部改成”00 00”。</p>
<p><em>（十六进制编译器里每两个数字称为一个字节）</em></p>
<h3 id="rar文件"><a href="#rar文件" class="headerlink" title="rar文件"></a>rar文件</h3><p>用winhex打开十六进制，找到第24个字节，其尾数为0为未加密，为4则为加密。例如将’’84”改为’’80”.</p>
<h2 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h2><h3 id="rar文件-1"><a href="#rar文件-1" class="headerlink" title="rar文件"></a>rar文件</h3><p>用ARCHPR暴力破解</p>
<p><strong>小技巧：若知道前三位为abc，则可选择攻击类型为掩码，掩码选择填”abc???”</strong></p>
<h3 id="zip文件-1"><a href="#zip文件-1" class="headerlink" title="zip文件"></a>zip文件</h3><p>用Ziperello暴力破解</p>
<h2 id="明文攻击"><a href="#明文攻击" class="headerlink" title="明文攻击"></a>明文攻击</h2><p>明文攻击是指知道加密的zip中部分文件的明文内容，利用这些内容推测出密钥并解密zip文件的攻击方法，相比于暴力破解，这种方法在破解复杂压缩包时效率较高。</p>
<p>例：假设一个加密的压缩包里有两个文件readme.txt和flag.txt，其中flag.txt的内容是答案，而我们拥有readme.txt的明文文件，使用上述两个文件可进行明文攻击。</p>
<p>步骤：</p>
<ol>
<li>将readme.txt的明文文件压缩，变成readme1.zip</li>
<li>打开archpr，攻击类型选明文，明文文件路径选readme1.zip</li>
</ol>
<p><em>注：</em></p>
<ol>
<li>有时跑完得不到指令，但能获得一个提示（加密密钥）。</li>
<li>例如将“1.rar”解压为“1.txt”和“1.png”，要将明文文件“1.txt”压缩，压缩的CRC值和压缩算法要与1.rar一致。</li>
</ol>
<h2 id="压缩包修复"><a href="#压缩包修复" class="headerlink" title="压缩包修复"></a>压缩包修复</h2><p>一个压缩包内可能含有多个文件，而文件头损坏会导致解压不出所以文件，所以</p>
<ol>
<li>找到一个文件的尾部（例如txt的尾部是txt的文本内容）</li>
<li>将下一个文件头第三个字节改为“0x74“</li>
</ol>
<p><img src="/2020/01/17/%E6%96%87%E4%BB%B6%E5%8E%8B%E7%BC%A9/1.png" alt="1"></p>
]]></content>
      <categories>
        <category>ctf技巧</category>
      </categories>
  </entry>
  <entry>
    <title>2020-01-14日目标</title>
    <url>/2020/01/14/2020-01-14%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="2020-01-14目标"><a href="#2020-01-14目标" class="headerlink" title="2020-01-14目标"></a>2020-01-14目标</h2><ol>
<li>听力10min+单词10个</li>
<li>早上9：00前起床</li>
<li>高数微分方程</li>
<li>晚上1：00前睡觉</li>
<li>ctf压缩文件</li>
</ol>
<h2 id="2020-01-13总结"><a href="#2020-01-13总结" class="headerlink" title="2020-01-13总结"></a>2020-01-13总结</h2><ol>
<li>晚上复习了高数定积分和不定积分</li>
<li>整理好了图片隐写</li>
<li>安装好了kali虚拟机</li>
</ol>
<table>
<thead>
<tr>
<th>目标</th>
<th>(Y/N)</th>
</tr>
</thead>
<tbody><tr>
<td>听力10min+单词10个</td>
<td>Y</td>
</tr>
<tr>
<td>早上9：00前起床</td>
<td>N</td>
</tr>
<tr>
<td>高数定积分&amp;&amp;不定积分</td>
<td>Y</td>
</tr>
<tr>
<td>整理图片隐写</td>
<td>Y</td>
</tr>
<tr>
<td>安装好kali虚拟机</td>
<td>Y</td>
</tr>
<tr>
<td>晚上1：00前睡觉</td>
<td>Y</td>
</tr>
<tr>
<td>状态</td>
<td>T</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>2020-01-13日目标</title>
    <url>/2020/01/13/2020-01-13%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="2020-01-13目标"><a href="#2020-01-13目标" class="headerlink" title="2020-01-13目标"></a>2020-01-13目标</h2><ol>
<li>听力10min+单词10个</li>
<li>早上9：00前起床</li>
<li>高数定积分&amp;&amp;不定积分</li>
<li>整理图片隐写</li>
<li>安装好kali虚拟机</li>
<li>晚上1：00前睡觉</li>
</ol>
<h2 id="2020-01-12总结"><a href="#2020-01-12总结" class="headerlink" title="2020-01-12总结"></a>2020-01-12总结</h2><ol>
<li>看完了正则表达式第三章</li>
<li>整理了两个JS函数</li>
<li>kali的虚拟机一直安不好。。。明天再试试</li>
<li>b站图片隐写看完，明天整理发博客</li>
</ol>
<table>
<thead>
<tr>
<th>目标</th>
<th>(Y/N)</th>
</tr>
</thead>
<tbody><tr>
<td>听力10min+单词10个</td>
<td>Y</td>
</tr>
<tr>
<td>早上9：00前起床</td>
<td>N</td>
</tr>
<tr>
<td>高数定积分&amp;&amp;不定积分</td>
<td>N</td>
</tr>
<tr>
<td>b站题型介绍看完</td>
<td>Y</td>
</tr>
<tr>
<td>正则表达式第三章</td>
<td>Y</td>
</tr>
<tr>
<td>晚上1：00前睡觉</td>
<td>Y</td>
</tr>
<tr>
<td>状态</td>
<td>Y</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>图像的隐写</title>
    <url>/2020/01/13/%E5%9B%BE%E5%83%8F%E7%9A%84%E9%9A%90%E5%86%99/</url>
    <content><![CDATA[<h2 id="查看gif每一帧"><a href="#查看gif每一帧" class="headerlink" title="查看gif每一帧"></a>查看gif每一帧</h2><ol>
<li>fireworks</li>
<li>photoshop</li>
</ol>
<h2 id="查看exif"><a href="#查看exif" class="headerlink" title="查看exif"></a>查看exif</h2><p>右键属性可查看（有些隐藏信息储存其中）</p>
<h2 id="stegsolve"><a href="#stegsolve" class="headerlink" title="stegsolve"></a>stegsolve</h2><ol>
<li><p>有两张几乎相同的图片，利用此软件进行两张图片的加，减，亦或。</p>
<p><em>进行减时两张图片的先后顺序有差别！</em></p>
</li>
<li><p>显示图片的一些颜色通道</p>
</li>
<li><p>data extract调整有关参数获取flag</p>
</li>
</ol>
<h2 id="zsteg（检测LSB隐写）"><a href="#zsteg（检测LSB隐写）" class="headerlink" title="zsteg（检测LSB隐写）"></a>zsteg（检测LSB隐写）</h2><p><em>在linux下运行</em></p>
<p><em>能检测png，jpg格式</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zsteg xxx.png</span><br></pre></td></tr></table></figure>

<h2 id="wbstego4工具"><a href="#wbstego4工具" class="headerlink" title="wbstego4工具"></a>wbstego4工具</h2><p>可检测bmp，rle，txt，asc，html，xml，pdf格式</p>
<h2 id="写python脚本跑"><a href="#写python脚本跑" class="headerlink" title="写python脚本跑"></a>写python脚本跑</h2><p>本人暂时不会</p>
<h2 id="tweakPNG"><a href="#tweakPNG" class="headerlink" title="tweakPNG"></a>tweakPNG</h2><p>可识别出png错误的CRC并给出正确值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CRC：每个png图像头部均为：图像头、长度、宽度、高度、CRC组成，CRC本身错误和高度错误都会导致CRC值的错误</span><br></pre></td></tr></table></figure>

<p><img src="/2020/01/13/%E5%9B%BE%E5%83%8F%E7%9A%84%E9%9A%90%E5%86%99/2.jpg" alt="2"></p>
<h3 id="利用tweakPNG所给值改CRC"><a href="#利用tweakPNG所给值改CRC" class="headerlink" title="利用tweakPNG所给值改CRC"></a>利用tweakPNG所给值改CRC</h3><p>可用010editor或winhex打开16进制</p>
<h3 id="跑一个python脚本求出正确高度"><a href="#跑一个python脚本求出正确高度" class="headerlink" title="跑一个python脚本求出正确高度"></a>跑一个python脚本求出正确高度</h3><p><img src="/2020/01/13/%E5%9B%BE%E5%83%8F%E7%9A%84%E9%9A%90%E5%86%99/1.jpg" alt="1"></p>
<h2 id="btftools"><a href="#btftools" class="headerlink" title="btftools"></a>btftools</h2><p><strong>使用场景：windows下的cmd，对加密过的图片进行解密</strong></p>
<p>格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">btftools.exe decode braincopter 要解密图片名称 -output 输出文件名</span><br><span class="line">btftools.exe run 上一步输出的文件</span><br></pre></td></tr></table></figure>



<h2 id="silenteye"><a href="#silenteye" class="headerlink" title="silenteye"></a>silenteye</h2><p>可以将文字或文件隐藏到图片</p>
<h2 id="jpg图像加密"><a href="#jpg图像加密" class="headerlink" title="jpg图像加密"></a>jpg图像加密</h2><h3 id="stegdetect工具检测加密方式"><a href="#stegdetect工具检测加密方式" class="headerlink" title="stegdetect工具检测加密方式"></a>stegdetect工具检测加密方式</h3><p>主要用于分析jpg文件，可以检测到通过steg，JPHide，OutGuess，invisib Secrets，F5，appendX，camouflage等隐写工具隐藏的信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">stegdetect xxx.jpg</span><br><span class="line">stegdetect -s(敏感度) xxx.jpg</span><br></pre></td></tr></table></figure>



<h3 id="JPhide（图形界面）"><a href="#JPhide（图形界面）" class="headerlink" title="JPhide（图形界面）"></a>JPhide（图形界面）</h3><p>基于最低有效位LSB的JPG图像隐写算法</p>
<h3 id="Outguess"><a href="#Outguess" class="headerlink" title="Outguess"></a>Outguess</h3><p><strong>该工具要编译使用：./configure &amp;&amp; make &amp;&amp; make install</strong></p>
<p>格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">outguess -r 要解密的文件名 输出结果文件名</span><br></pre></td></tr></table></figure>



<h3 id="F5"><a href="#F5" class="headerlink" title="F5"></a>F5</h3><p>进入F5-steganography_F5目录，将图片文件拷贝至该目录下，从cmd进入该目录</p>
<p>格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java Extact 要解密的文件名 -p 密码</span><br></pre></td></tr></table></figure>



<h2 id="二维码处理"><a href="#二维码处理" class="headerlink" title="二维码处理"></a>二维码处理</h2><ol>
<li>补全</li>
<li>取反</li>
<li>stegsolve颜色通道</li>
</ol>
]]></content>
      <categories>
        <category>ctf技巧</category>
      </categories>
  </entry>
  <entry>
    <title>JS split()方法 [将字符串分割成字符串数组]</title>
    <url>/2020/01/12/JS-split-%E6%96%B9%E6%B3%95-%E5%B0%86%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%86%E5%89%B2%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h2 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h2><h3 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h3><p>split() 方法用于把一个字符串分割成字符串数组。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">string.split(separator,limit)</span><br></pre></td></tr></table></figure>

<h3 id="参数值"><a href="#参数值" class="headerlink" title="参数值"></a>参数值</h3><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>separator</td>
<td>可选。字符串或正则表达式，从该参数指定的地方分割 string Object。</td>
</tr>
<tr>
<td>limit</td>
<td>可选。该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。</td>
</tr>
</tbody></table>
<h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><table>
<thead>
<tr>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Array</td>
<td>一个字符串数组。该数组是通过在 separator 指定的边界处将字符串 string Object 分割成子串创建的。返回的数组中的字串不包括 separator 自身。</td>
</tr>
</tbody></table>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="省略“separator”参数"><a href="#省略“separator”参数" class="headerlink" title="省略“separator”参数"></a>省略“separator”参数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var str&#x3D;&quot;How are you doing today?&quot;;</span><br><span class="line">var n&#x3D;str.split();</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">How are you doing today?</span><br></pre></td></tr></table></figure>



<h4 id="“separator”参数为””"><a href="#“separator”参数为””" class="headerlink" title="“separator”参数为””"></a>“separator”参数为””</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var str&#x3D;&quot;How are you doing today?&quot;;</span><br><span class="line">var n&#x3D;str.split(&quot;&quot;);</span><br></pre></td></tr></table></figure>

<p>结果分割每个字符，包括空格:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">H,o,w, ,a,r,e, ,y,o,u, ,d,o,i,n,g, ,t,o,d,a,y,?</span><br></pre></td></tr></table></figure>



<h4 id="使用“limit“参数"><a href="#使用“limit“参数" class="headerlink" title="使用“limit“参数"></a>使用“limit“参数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var str&#x3D;&quot;How are you doing today?&quot;;</span><br><span class="line">var n&#x3D;str.split(&quot; &quot;,3);</span><br></pre></td></tr></table></figure>

<p>结果将输出3个数组的值:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">How,are,you</span><br></pre></td></tr></table></figure>



<h4 id="使用一个字符作为分隔符"><a href="#使用一个字符作为分隔符" class="headerlink" title="使用一个字符作为分隔符:"></a>使用一个字符作为分隔符:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var str&#x3D;&quot;How are you doing today?&quot;;</span><br><span class="line">var n&#x3D;str.split(&quot;o&quot;);</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">H,w are y,u d,ing t,day?</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JS 函数整理</category>
      </categories>
      <tags>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-01-12日目标</title>
    <url>/2020/01/12/2020-01-12%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="2020-01-12目标"><a href="#2020-01-12目标" class="headerlink" title="2020-01-12目标"></a>2020-01-12目标</h2><ol>
<li>听力10min+单词10个</li>
<li>早上9：00前起床</li>
<li>高数定积分&amp;&amp;不定积分</li>
<li>b站题型介绍看完</li>
<li>正则表达式第三章</li>
<li>晚上1：00前睡觉</li>
</ol>
<h2 id="2020-01-11总结"><a href="#2020-01-11总结" class="headerlink" title="2020-01-11总结"></a>2020-01-11总结</h2><ol>
<li>更新了Ubuntu，更换了apt源</li>
<li>下午复习了高数第二三单元</li>
<li>总结了ctf文件的合并与分离</li>
<li>解决了github hexo图片无法成功上传的问题</li>
</ol>
<table>
<thead>
<tr>
<th>目标</th>
<th>(Y/N)</th>
</tr>
</thead>
<tbody><tr>
<td>听力10min+单词10个</td>
<td>N</td>
</tr>
<tr>
<td>正则表达式第三章</td>
<td>N</td>
</tr>
<tr>
<td>下午复习高数</td>
<td>Y</td>
</tr>
<tr>
<td>b站题型介绍看完</td>
<td>N</td>
</tr>
<tr>
<td>晚上1：00前睡觉</td>
<td>Y</td>
</tr>
<tr>
<td>状态</td>
<td>N</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>文件的合并与分离</title>
    <url>/2020/01/11/%E6%96%87%E4%BB%B6%E7%9A%84%E5%90%88%E5%B9%B6%E4%B8%8E%E5%88%86%E7%A6%BB/</url>
    <content><![CDATA[<h2 id="文件的类型"><a href="#文件的类型" class="headerlink" title="文件的类型"></a>文件的类型</h2><h3 id="file命令"><a href="#file命令" class="headerlink" title="file命令"></a>file命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">file filename</span><br></pre></td></tr></table></figure>

<p><strong><em>注：若使用file命令显示类型为data，则可能出现了文件头缺失，可自行打开“010editor”修改文件头。</em></strong></p>
<h3 id="不同文件有不同文件头"><a href="#不同文件有不同文件头" class="headerlink" title="不同文件有不同文件头"></a>不同文件有不同文件头</h3><p><img src="/2020/01/11/%E6%96%87%E4%BB%B6%E7%9A%84%E5%90%88%E5%B9%B6%E4%B8%8E%E5%88%86%E7%A6%BB/fileHead.png" alt></p>
<h2 id="文件的分离"><a href="#文件的分离" class="headerlink" title="文件的分离"></a>文件的分离</h2><h3 id="binwalk工具-自动"><a href="#binwalk工具-自动" class="headerlink" title="binwalk工具(自动)"></a>binwalk工具(自动)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">分析文件：binwalk filename</span><br><span class="line">分离文件：binwalk -e filename</span><br></pre></td></tr></table></figure>



<h3 id="foremost-自动"><a href="#foremost-自动" class="headerlink" title="foremost(自动)"></a>foremost(自动)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">foremost filename -o outputFilename</span><br></pre></td></tr></table></figure>



<h3 id="dd-半自动半手动分离"><a href="#dd-半自动半手动分离" class="headerlink" title="dd(半自动半手动分离)"></a>dd(半自动半手动分离)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dd if&#x3D;输入的文件名 of&#x3D;输出的文件名 bs&#x3D;设置读写块的大小 copy&#x3D;一共读取几个读写快 slip&#x3D;跳过几个读写快开始读取</span><br></pre></td></tr></table></figure>



<p>比如对”1.txt”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1234567890abcde</span><br></pre></td></tr></table></figure>

<p>实施命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dd if&#x3D;1.txt of &#x3D;2.txt bs&#x3D;5 count&#x3D;3 skip&#x3D;1</span><br></pre></td></tr></table></figure>

<p>会得到”2.txt”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">67890abcde</span><br></pre></td></tr></table></figure>



<h3 id="010editor-半自动半手动"><a href="#010editor-半自动半手动" class="headerlink" title="010editor(半自动半手动)"></a>010editor(半自动半手动)</h3><p>找出想分离的部分，右键并点击”save selection”.</p>
<h2 id="文件合并"><a href="#文件合并" class="headerlink" title="文件合并"></a>文件合并</h2><h3 id="linux下的文件合并"><a href="#linux下的文件合并" class="headerlink" title="linux下的文件合并"></a>linux下的文件合并</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat file1 file2 file3 &gt; outputFilename</span><br></pre></td></tr></table></figure>

<p>完整性检测</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">md5sum filename</span><br></pre></td></tr></table></figure>



<h3 id="windows下的文件合并"><a href="#windows下的文件合并" class="headerlink" title="windows下的文件合并"></a>windows下的文件合并</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy &#x2F;B file1+file2+file3 outputFilename</span><br></pre></td></tr></table></figure>

<p>完整性检测</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">certutil -hashfile filename md5</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ctf技巧</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-01-11日目标</title>
    <url>/2020/01/10/2020-01-11%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="2020-01-11日目标"><a href="#2020-01-11日目标" class="headerlink" title="2020-01-11日目标"></a>2020-01-11日目标</h2><ol>
<li>听力10min+单词10个</li>
<li>正则表达式第三章</li>
<li>下午复习高数</li>
<li>b站题型介绍看完</li>
<li>晚上1：00前睡觉</li>
</ol>
<h2 id="2020-01-10总结"><a href="#2020-01-10总结" class="headerlink" title="2020-01-10总结"></a>2020-01-10总结</h2><ol>
<li>安装好了VMware Workstation</li>
<li>忙完了正则表达式第二章</li>
<li>JS函数部分看完</li>
</ol>
<table>
<thead>
<tr>
<th>目标</th>
<th>(Y/N)</th>
</tr>
</thead>
<tbody><tr>
<td>听力10min+单词10个</td>
<td>N</td>
</tr>
<tr>
<td>正则表达式第二章</td>
<td>Y</td>
</tr>
<tr>
<td>下午复习高数</td>
<td>N</td>
</tr>
<tr>
<td>JS函数部分看完</td>
<td>Y</td>
</tr>
<tr>
<td>b站题型介绍看完</td>
<td>N</td>
</tr>
<tr>
<td>晚上1：00前睡觉</td>
<td>N</td>
</tr>
<tr>
<td>状态</td>
<td>N</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>2020-01-10日目标</title>
    <url>/2020/01/10/2020-01-10%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="2020-01-10日目标"><a href="#2020-01-10日目标" class="headerlink" title="2020-01-10日目标"></a>2020-01-10日目标</h2><ol>
<li>听力10min+单词10个</li>
<li>正则表达式第二章</li>
<li>下午复习高数</li>
<li>JS函数部分看完</li>
<li>b站题型介绍看完</li>
<li>晚上1：00前睡觉</li>
</ol>
<h2 id="2020-01-09总结"><a href="#2020-01-09总结" class="headerlink" title="2020-01-09总结"></a>2020-01-09总结</h2><ol>
<li>安装好了python</li>
<li>大致浏览了JS函数有关内容，但是还要继续巩固</li>
<li>看了一会b站ctf</li>
<li>打了排球</li>
</ol>
<table>
<thead>
<tr>
<th>目标</th>
<th>(Y/N)</th>
</tr>
</thead>
<tbody><tr>
<td>听力10min+单词10个</td>
<td>N</td>
</tr>
<tr>
<td>南邮ctf 深入研究 文件包含</td>
<td>N</td>
</tr>
<tr>
<td>Js函数部分</td>
<td>N</td>
</tr>
<tr>
<td>看b站ctf概览建立一个框架</td>
<td>N</td>
</tr>
<tr>
<td>安装好python环境</td>
<td>Y</td>
</tr>
<tr>
<td>晚上1：00前睡觉</td>
<td>N</td>
</tr>
<tr>
<td>状态</td>
<td>N</td>
</tr>
</tbody></table>
<p><strong><u>不想通过打分让自己觉得虽然没有完成但至少做了一点，从这次开始总结只有Y/N。哪怕只差一点也是没有完成。</u></strong></p>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>2020-01-09日目标</title>
    <url>/2020/01/09/2020-01-09%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="2020-01-09日目标"><a href="#2020-01-09日目标" class="headerlink" title="2020-01-09日目标"></a>2020-01-09日目标</h2><ol>
<li>听力10min+单词10个</li>
<li>南邮ctf 深入研究 文件包含</li>
<li>Js函数部分</li>
<li>看b站ctf概览建立一个框架</li>
<li>安装好python环境</li>
<li>晚上1：00前睡觉</li>
</ol>
<h2 id="2020-01-08总结"><a href="#2020-01-08总结" class="headerlink" title="2020-01-08总结"></a>2020-01-08总结</h2><ol>
<li>买了前年的高数卷子，复习了高数第二单元</li>
<li>完成了南邮ctf 文件包含</li>
<li>在做文件包含时发现自己学的知识有些杂有些乱，所以想找一些ctf概览的视频明确一下方向</li>
<li>安装了几个有用工具和java环境</li>
</ol>
<table>
<thead>
<tr>
<th>目标</th>
<th>(0/10)</th>
</tr>
</thead>
<tbody><tr>
<td>听力10min+单词10个</td>
<td>5</td>
</tr>
<tr>
<td>南邮ctf 文件包含</td>
<td>8</td>
</tr>
<tr>
<td>复习高数第二单元</td>
<td>10</td>
</tr>
<tr>
<td>Js函数部分</td>
<td>0</td>
</tr>
<tr>
<td>晚上1：00前睡觉</td>
<td>10</td>
</tr>
<tr>
<td>状态</td>
<td>7</td>
</tr>
</tbody></table>
<p>ps: 2020-01-07考完英语完全放松了一天，所以那一天的计划是空白。</p>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>2020-01-07日目标</title>
    <url>/2020/01/06/2020-01-07%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="2020-01-07日目标"><a href="#2020-01-07日目标" class="headerlink" title="2020-01-07日目标"></a>2020-01-07日目标</h2><ol>
<li>听力10min+单词10个</li>
<li>9:30在2206考大英1</li>
<li>南邮ctf 文件包含</li>
<li>复习高数第二单元</li>
<li>Js函数部分</li>
<li>晚上1：00前睡觉</li>
</ol>
<h2 id="2020-01-06总结"><a href="#2020-01-06总结" class="headerlink" title="2020-01-06总结"></a>2020-01-06总结</h2><ol>
<li>把英语段落翻译看了，做了几篇新闻</li>
<li>复习了第一单元高数，还要多见见极限的题型</li>
<li>看完了JS基础部分</li>
<li>南邮ctf 单身二十年 &amp;&amp; decode</li>
</ol>
<table>
<thead>
<tr>
<th>目标</th>
<th>(0/10)</th>
</tr>
</thead>
<tbody><tr>
<td>听力10min+单词10个</td>
<td>5</td>
</tr>
<tr>
<td>继续学习完善正则表达式</td>
<td>0</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/js/js-conventions.html" target="_blank" rel="noopener">学习至JS代码规范</a></td>
<td>10</td>
</tr>
<tr>
<td>花一点时间备考大英1</td>
<td>9</td>
</tr>
<tr>
<td>南邮ctf  <a href="https://cgctf.nuptsast.com/challenges#Web" target="_blank" rel="noopener">单身二十年</a></td>
<td>10</td>
</tr>
<tr>
<td>晚上1:00前睡觉</td>
<td>10</td>
</tr>
<tr>
<td>状态</td>
<td>8</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>php eval()函数 [把字符串作为PHP代码执行]</title>
    <url>/2020/01/06/php-eval-%E5%87%BD%E6%95%B0-%E6%8A%8A%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BD%9C%E4%B8%BAPHP%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<h2 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h2><h2 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h2><p>把字符串作为PHP代码执行</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eval(phpcode)</span><br></pre></td></tr></table></figure>

<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$string &#x3D; &#39;cup&#39;;</span><br><span class="line">$name &#x3D; &#39;coffee&#39;;</span><br><span class="line">$str &#x3D; &#39;This is a $string with my $name in it.&#39;;</span><br><span class="line">echo $str. &quot;\n&quot;;</span><br><span class="line">eval(&quot;\$str &#x3D; \&quot;$str\&quot;;&quot;);</span><br><span class="line">echo $str. &quot;\n&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>结果为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">This is a $string with my $name in it.</span><br><span class="line">This is a cup with my coffee in it.</span><br></pre></td></tr></table></figure>

<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol>
<li>eval函数的参数的字符串末尾一定要有分号，在最后还要另加一个分号（这个分号是php限制）。</li>
<li>注意单引号，双引号和反斜杠的运用。如果参数中带有变量时,并且变量有赋值操作的话，变量前的$符号钱一定要有\来转义。如果没有赋值操作可以不需要。</li>
<li>注意在命令式字符串（包括分号）两边必须要有双引号或者根据需要用单引号。否则报错。 命令式字符串是指：字符串中包括echo、print之类的命令的时候。 如果参数只有一个变量则可以不用。</li>
</ol>
<p>如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;test eval function&quot;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>php 函数整理</category>
      </categories>
      <tags>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>JS push()/unshift()函数 [在数组末尾/起始加新元素并返回新长度]</title>
    <url>/2020/01/06/JS-push-%E5%87%BD%E6%95%B0-%E5%9C%A8%E6%95%B0%E7%BB%84%E6%9C%AB%E5%B0%BE%E5%8A%A0%E6%96%B0%E5%85%83%E7%B4%A0%E5%B9%B6%E8%BF%94%E5%9B%9E%E6%96%B0%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h2 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h2><h3 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h3><p>push() 方法可向数组的末尾添加一个或多个元素，并返回新的长度</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array.push(item1,item2,...,itemX)</span><br></pre></td></tr></table></figure>

<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var fruits &#x3D; [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];</span><br><span class="line">y&#x3D;fruits.push(&quot;Kiwi&quot;,&quot;Lemon&quot;,&quot;Pineapple&quot;)</span><br><span class="line">alert(y);</span><br></pre></td></tr></table></figure>

<p>结果为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Banana,Orange,Apple,Mango,Kiwi,Lemon,Pineapple</span><br><span class="line">有一个弹窗显示&quot;7&quot;</span><br></pre></td></tr></table></figure>



<h2 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h2><p><em>与push()基本相同，只不过是把新元素添到数组开头并返回数组长度。</em></p>
]]></content>
      <categories>
        <category>JS 函数整理</category>
      </categories>
      <tags>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>JS call()/apply()/bind()函数 [强制重新定义this对象]</title>
    <url>/2020/01/06/JS-call-apply-bind-%E5%87%BD%E6%95%B0-%E5%BC%BA%E5%88%B6%E9%87%8D%E6%96%B0%E5%AE%9A%E4%B9%89this%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>这个哥们讲得超棒，就引用哈 <a href="https://www.runoob.com/w3cnote/js-call-apply-bind.html" target="_blank" rel="noopener">他的文章</a>！</p>
]]></content>
      <categories>
        <category>JS 函数整理</category>
      </categories>
      <tags>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>一些学习中遇到可学却还没来得及学的东西</title>
    <url>/2020/01/06/%E4%B8%80%E4%BA%9B%E5%AD%A6%E4%B9%A0%E4%B8%AD%E9%81%87%E5%88%B0%E5%8F%AF%E5%AD%A6%E5%8D%B4%E8%BF%98%E6%B2%A1%E6%9D%A5%E5%BE%97%E5%8F%8A%E5%AD%A6%E7%9A%84%E4%B8%9C%E8%A5%BF/</url>
    <content><![CDATA[<ol>
<li><p><a href="https://www.runoob.com/html/html5-form-attributes.html" target="_blank" rel="noopener">HTML表单属性</a></p>
</li>
<li><p><a href="https://www.runoob.com/css/css-pseudo-classes.html" target="_blank" rel="noopener">CSS伪类</a></p>
</li>
<li><pre><code>&lt;?php
function CLsI($ZzvSWE) {

    $ZzvSWE = gzinflate(base64_decode($ZzvSWE));

    for ($i = 0; $i &lt; strlen($ZzvSWE); $i++) {

        $ZzvSWE[$i] = chr(ord($ZzvSWE[$i]) - 1);

    }

    return $ZzvSWE;

}
eval(CLsI(&quot;+7DnQGFmYVZ+eoGmlg0fd3puUoZ1fkppek1GdVZhQnJSSZq5aUImGNQBAA==&quot;));
?&gt;</code></pre></li>
<li><p>抓包技术</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>杂七杂八</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-01-06日目标</title>
    <url>/2020/01/06/2020-01-06%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="2020-01-06日目标"><a href="#2020-01-06日目标" class="headerlink" title="2020-01-06日目标"></a>2020-01-06日目标</h2><ol>
<li>听力10min+单词10个</li>
<li>继续学习完善正则表达式</li>
<li><a href="https://www.runoob.com/js/js-conventions.html" target="_blank" rel="noopener">学习至JS代码规范</a></li>
<li>花一点时间备考大英1</li>
<li>南邮ctf  <a href="https://cgctf.nuptsast.com/challenges#Web" target="_blank" rel="noopener">单身二十年</a></li>
<li>晚上1:00前睡觉</li>
</ol>
<h2 id="2020-01-05总结"><a href="#2020-01-05总结" class="headerlink" title="2020-01-05总结"></a>2020-01-05总结</h2><p>总的来说今天算是给自己放了个假，睡觉睡到中午，打了一个下午排球，到晚上七点左右才开始学习，也算是给这些天有点低迷的心情缓和一下吧！</p>
<ol>
<li>总算把域名调试好了，不然deploy一次就给我发一封邮件我受不住（GNAME文件中多打了www）</li>
<li>JS 表单- JS验证API</li>
<li>南邮ctf <a href="https://cgctf.nuptsast.com/challenges#Web" target="_blank" rel="noopener">AAencode</a></li>
<li>复习了一会会英语</li>
</ol>
<table>
<thead>
<tr>
<th>目标</th>
<th>(0/10)</th>
</tr>
</thead>
<tbody><tr>
<td>听力10min+单词10个</td>
<td>10</td>
</tr>
<tr>
<td>继续学习完善正则表达式</td>
<td>0</td>
</tr>
<tr>
<td>南邮ctf <a href="https://cgctf.nuptsast.com/challenges#Web" target="_blank" rel="noopener">AAencode</a></td>
<td>10</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/js/js-conventions.html" target="_blank" rel="noopener">学习至JS代码规范</a></td>
<td>6</td>
</tr>
<tr>
<td>花一点时间备考大英1</td>
<td>5</td>
</tr>
<tr>
<td>状态</td>
<td>6</td>
</tr>
</tbody></table>
<h2 id="对于南邮-AAencode那一题："><a href="#对于南邮-AAencode那一题：" class="headerlink" title="对于南邮 AAencode那一题："></a>对于南邮 AAencode那一题：</h2><ol>
<li>以后看到中文乱码可以下载本地有utf-8换一下</li>
<li>AAencode是一种把JS代码转化成颜文字的加密，直接在console里运行即可解码</li>
</ol>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>JS isFinite函数 [检测是否为无穷大]</title>
    <url>/2020/01/06/JS-isFinite%E5%87%BD%E6%95%B0-%E6%A3%80%E6%B5%8B%E6%98%AF%E5%90%A6%E4%B8%BA%E6%97%A0%E7%A9%B7%E5%A4%A7/</url>
    <content><![CDATA[<h2 id="isFinite"><a href="#isFinite" class="headerlink" title="isFinite()"></a>isFinite()</h2><h3 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h3><p>如果 number 是 NaN（非数字），或者是正、负无穷大的数，则返回 false。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">isFinite(value)</span><br></pre></td></tr></table></figure>

<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">document.write(isFinite(123)+ &quot;&lt;br&gt;&quot;);</span><br><span class="line">document.write(isFinite(-1.23)+ &quot;&lt;br&gt;&quot;);</span><br><span class="line">document.write(isFinite(5-2)+ &quot;&lt;br&gt;&quot;);</span><br><span class="line">document.write(isFinite(0)+ &quot;&lt;br&gt;&quot;);</span><br><span class="line">document.write(isFinite(&quot;Hello&quot;)+ &quot;&lt;br&gt;&quot;);</span><br><span class="line">document.write(isFinite(&quot;2005&#x2F;12&#x2F;12&quot;)+ &quot;&lt;br&gt;&quot;);</span><br></pre></td></tr></table></figure>

<p>结果为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">true</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">false</span><br><span class="line">false</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JS 函数整理</category>
      </categories>
      <tags>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>Js parseFloat()函数 [去除数字后的非数字字符]</title>
    <url>/2020/01/05/Js-parseFloat-%E5%87%BD%E6%95%B0-%E5%8E%BB%E9%99%A4%E6%95%B0%E5%AD%97%E5%90%8E%E7%9A%84%E9%9D%9E%E6%95%B0%E5%AD%97%E5%AD%97%E7%AC%A6/</url>
    <content><![CDATA[<h2 id="parseFloat"><a href="#parseFloat" class="headerlink" title="parseFloat()"></a>parseFloat()</h2><h3 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h3><p>该函数指定字符串中的首个字符是否是数字。如果是，则对字符串进行解析，直到到达数字的末端为止，然后以数字返回该数字，而不是作为字符串。</p>
<p><em>其实就是要有一段字符串然后以数字开头，然后开始检索，遇到第一个不是数字的（空格也算）就把后头（包括这个）全砍掉。</em></p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">parseFloat(string)</span><br></pre></td></tr></table></figure>

<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">document.write(parseFloat(&quot;10&quot;) + &quot;&lt;br&gt;&quot;);</span><br><span class="line">document.write(parseFloat(&quot;10.00&quot;) + &quot;&lt;br&gt;&quot;);</span><br><span class="line">document.write(parseFloat(&quot;10.33&quot;) + &quot;&lt;br&gt;&quot;);</span><br><span class="line">document.write(parseFloat(&quot;34 45 66&quot;) + &quot;&lt;br&gt;&quot;);</span><br><span class="line">document.write(parseFloat(&quot;   60   &quot;) + &quot;&lt;br&gt;&quot;);</span><br><span class="line">document.write(parseFloat(&quot;40 years&quot;) + &quot;&lt;br&gt;&quot;);</span><br><span class="line">document.write(parseFloat(&quot;He was 40&quot;) + &quot;&lt;br&gt;&quot;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>结果为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">10</span><br><span class="line">10.33</span><br><span class="line">34</span><br><span class="line">60</span><br><span class="line">40</span><br><span class="line">NaN</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JS 函数整理</category>
      </categories>
      <tags>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-01-05日目标</title>
    <url>/2020/01/05/2020-01-05%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="2020-01-05日目标"><a href="#2020-01-05日目标" class="headerlink" title="2020-01-05日目标"></a>2020-01-05日目标</h2><ol>
<li>听力10min+单词10个</li>
<li>继续学习完善正则表达式</li>
<li>南邮ctf <a href="https://cgctf.nuptsast.com/challenges#Web" target="_blank" rel="noopener">AAencode</a></li>
<li><a href="https://www.runoob.com/js/js-conventions.html" target="_blank" rel="noopener">学习至JS代码规范</a></li>
<li>花一点时间备考大英1</li>
</ol>
<h2 id="2020-01-04总结"><a href="#2020-01-04总结" class="headerlink" title="2020-01-04总结"></a>2020-01-04总结</h2><ol>
<li><a href="https://blog.csdn.net/h610443955/article/details/81079439" target="_blank" rel="noopener">发现了一篇有关正则表达式不错的文章</a>并学习整理了第一章节</li>
<li>在阿里云买了域名并绑定了博客，以后可以直接访问 <a href="www.albatross-g.site">我的新域名</a></li>
<li>复习了高数的渐近线和间断点</li>
<li>Js正则表达式-JS使用误区</li>
<li>完成了bugku前三道简单题（和南邮前三题几乎一样）</li>
</ol>
<table>
<thead>
<tr>
<th>目标</th>
<th>(0/10)</th>
</tr>
</thead>
<tbody><tr>
<td>完善今日对 JS正则表达式 的整理</td>
<td>8</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/js/js-conventions.html" target="_blank" rel="noopener">学习至JS代码规范</a></td>
<td>6</td>
</tr>
<tr>
<td>南邮ctf <a href="https://cgctf.nuptsast.com/challenges#Web" target="_blank" rel="noopener">AAencode</a></td>
<td>0</td>
</tr>
<tr>
<td>听力10min+单词10个</td>
<td>5</td>
</tr>
<tr>
<td>9:00去图书馆</td>
<td>9</td>
</tr>
<tr>
<td>状态</td>
<td>6</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>JS prototype属性</title>
    <url>/2020/01/04/JS-prototype%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<h2 id="prototype属性"><a href="#prototype属性" class="headerlink" title="prototype属性"></a>prototype属性</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>prototype 属性允许您向对象添加属性和方法</p>
<p><strong>*注意：</strong> Prototype 是全局属性，适用于所有的 Javascript 对象。*</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">object.prototype.name&#x3D;value;</span><br></pre></td></tr></table></figure>

<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">function employee(name,jobtitle,born)&#123;</span><br><span class="line">	this.name&#x3D;name;</span><br><span class="line">	this.jobtitle&#x3D;jobtitle;</span><br><span class="line">	this.born&#x3D;born;</span><br><span class="line">&#125;</span><br><span class="line">var fred&#x3D;new employee(&quot;Fred Flintstone&quot;,&quot;Caveman&quot;,1970);</span><br><span class="line">employee.prototype.salary&#x3D;null;</span><br><span class="line">fred.salary&#x3D;20000;</span><br><span class="line">document.write(fred.salary);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，prototype函数将salary属性的值清空，便于接下来的赋值。</p>
]]></content>
      <categories>
        <category>JS 属性整理</category>
      </categories>
      <tags>
        <tag>属性</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-01-04日目标</title>
    <url>/2020/01/04/2020-01-04%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="2020-01-04日目标"><a href="#2020-01-04日目标" class="headerlink" title="2020-01-04日目标"></a>2020-01-04日目标</h2><ol>
<li>完善今日对 JS正则表达式 的整理</li>
<li><a href="https://www.runoob.com/js/js-conventions.html" target="_blank" rel="noopener">学习至JS代码规范</a></li>
<li>南邮ctf <a href="https://cgctf.nuptsast.com/challenges#Web" target="_blank" rel="noopener">AAencode</a></li>
<li>听力10min+单词10个</li>
<li>9:00去图书馆</li>
</ol>
<h2 id="2020-01-03总结"><a href="#2020-01-03总结" class="headerlink" title="2020-01-03总结"></a>2020-01-03总结</h2><ol>
<li>初步入门了 CSS盒子模型</li>
<li>完成了南邮ctf “这题不是web”和“层层递进”   （两题纯脑洞基本不含技术）</li>
<li>共整理了JS 五个函数</li>
<li>对JS 正则表达式有了初步了解</li>
</ol>
<table>
<thead>
<tr>
<th>目标</th>
<th>(0/10)</th>
</tr>
</thead>
<tbody><tr>
<td>10min英语听力+10个英语单词</td>
<td>0</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/js/js-typeof.html" target="_blank" rel="noopener">JS typeof操作符</a>-JS代码规范</td>
<td>5</td>
</tr>
<tr>
<td><a href="https://cgctf.nuptsast.com/challenges#Web" target="_blank" rel="noopener">南邮ctf “这题不是web”</a></td>
<td>10</td>
</tr>
<tr>
<td>CSS盒子模型</td>
<td>9</td>
</tr>
<tr>
<td>9:30在1307考html</td>
<td>7</td>
</tr>
<tr>
<td>状态</td>
<td>5</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>JS 正则表达式（持续更新）</title>
    <url>/2020/01/04/JS-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>正则表达式是由一个字符序列形成的搜索模式。</p>
<p>当你在文本中搜索数据时，你可以用搜索模式来描述你要查询的内容。</p>
<p>正则表达式可以是一个简单的字符，或一个更复杂的模式。</p>
<p>正则表达式可用于所有文本搜索和文本替换的操作。</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;正则表达式主体&#x2F;修饰符(可选)</span><br></pre></td></tr></table></figure>

<h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><table>
<thead>
<tr>
<th>修饰符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>i</td>
<td>执行对大小写不敏感的匹配。</td>
</tr>
<tr>
<td>g</td>
<td>执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。</td>
</tr>
<tr>
<td>m</td>
<td>执行多行匹配</td>
</tr>
</tbody></table>
<h2 id="正则表达式模式"><a href="#正则表达式模式" class="headerlink" title="正则表达式模式"></a>正则表达式模式</h2><p>正则表达式是匹配模式，要么匹配字符，要么匹配位置。</p>
<h3 id="字符匹配"><a href="#字符匹配" class="headerlink" title="字符匹配"></a>字符匹配</h3><h4 id="两种模糊匹配"><a href="#两种模糊匹配" class="headerlink" title="两种模糊匹配"></a>两种模糊匹配</h4><h5 id="m-n-横向模糊匹配"><a href="#m-n-横向模糊匹配" class="headerlink" title="{m,n}横向模糊匹配"></a>{m,n}横向模糊匹配</h5><p>横向模糊指的是，一个正则可匹配的字符串的长度不是固定的，可以是多种情况的。</p>
<blockquote>
<p>譬如<code>{m,n}</code>，表示连续出现最少m次，最多n次。</p>
</blockquote>
<h5 id="abc-纵向模糊匹配"><a href="#abc-纵向模糊匹配" class="headerlink" title="[abc]纵向模糊匹配"></a>[abc]纵向模糊匹配</h5><p>纵向模糊指的是，一个正则匹配的字符串，具体到某一位字符时，它可以不是某个确定的字符，可以有多种可能。</p>
<blockquote>
<p>譬如<code>[abc]</code>，表示该字符是可以字符“a”、“b”、“c”中的任何一个。</p>
</blockquote>
<p><em>需要强调的是，虽叫字符组（字符类），但只是其中一个字符。例如<code>[abc]</code>，表示匹配一个字符，它可以是“a”、“b”、“c”之一。</em></p>
<h4 id="字符组"><a href="#字符组" class="headerlink" title="字符组"></a>字符组</h4><h5 id="a-z-范围表示"><a href="#a-z-范围表示" class="headerlink" title="[a-z]范围表示"></a>[a-z]范围表示</h5><p>比如<code>[123456abcdefGHIJKLM]</code>，可以写成<code>[1-6a-fG-M]</code>。用连字符<code>-</code>来省略和简写。</p>
<blockquote>
<p>Q:那么要匹配“a”、“-”、“z”这三者中任意一个字符，该怎么做呢？</p>
<p>A:可以写成如下的方式：<code>[-az]</code>或<code>[az-]</code>或<code>[a\-z]</code>。即要么放在开头，要么放在结尾，要么转义。</p>
</blockquote>
<h5 id="abc-排除字符组"><a href="#abc-排除字符组" class="headerlink" title="[^abc]排除字符组"></a>[^abc]排除字符组</h5><p>排除字符组（反义字符组）就是，某位字符可以是任何东西，但就不能是”a”、”b”、”c”。</p>
<h5 id="d类似的简写形式"><a href="#d类似的简写形式" class="headerlink" title="\d类似的简写形式"></a>\d类似的简写形式</h5><blockquote>
<p><strong><code>\d</code></strong>就是<code>[0-9]</code>。表示是一位数字。记忆方式：其英文是digit（数字）。</p>
<p><strong><code>\D</code></strong>就是<code>[^0-9]</code>。表示除数字外的任意字符。</p>
<p><strong><code>\w</code></strong>就是<code>[0-9a-zA-Z_]</code>。表示数字、大小写字母和下划线。记忆方式：w是word的简写，也称单词字符。</p>
<p><strong><code>\W</code></strong>是<code>[^0-9a-zA-Z_]</code>。非单词字符。</p>
<p><strong><code>\s</code></strong>是<code>[ \t\v\n\r\f]</code>。表示空白符，包括空格、水平制表符、垂直制表符、换行符、回车符、换页符。记忆方式：s是space character的首字母。</p>
<p><strong><code>\S</code></strong>是<code>[^ \t\v\n\r\f]</code>。 非空白符。</p>
<p><strong><code>.</code></strong>就是<code>[^\n\r\u2028\u2029]</code>。通配符，表示几乎任意字符。换行符、回车符、行分隔符和段分隔符除外。记忆方式：想想省略号…中的每个点，都可以理解成占位符，表示任何类似的东西。</p>
</blockquote>
<blockquote>
<p>Q:如果要匹配任意字符怎么办？</p>
<p>A:可以使用<code>[\d\D]</code>、<code>[\w\W]</code>、<code>[\s\S]</code>和<code>[^]</code>中任何的一个。</p>
</blockquote>
<h4 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h4><h5 id="m-类似的简写形式"><a href="#m-类似的简写形式" class="headerlink" title="{m,}类似的简写形式"></a>{m,}类似的简写形式</h5><blockquote>
<p><code>{m,}</code> 表示至少出现m次。</p>
<p><code>{m}</code> 等价于<code>{m,m}</code>，表示出现m次。</p>
<p>? 等价于{0,1}，表示出现或者不出现。记忆方式：问号的意思表示，有吗？</p>
<p><code>+</code>等价于<code>{1,}</code>，表示出现至少一次。记忆方式：加号是追加的意思，得先有一个，然后才考虑追加。</p>
<p><code>*</code> 等价于<code>{0,}</code>，表示出现任意次，有可能不出现。记忆方式：看看天上的星星，可能一颗没有，可能零散有几颗，可能数也数不过来。</p>
</blockquote>
<h5 id="贪婪匹配和惰性匹配"><a href="#贪婪匹配和惰性匹配" class="headerlink" title="贪婪匹配和惰性匹配"></a>贪婪匹配和惰性匹配</h5><h6 id="d-m-n-贪婪匹配"><a href="#d-m-n-贪婪匹配" class="headerlink" title="/\d{m,n}/贪婪匹配"></a>/\d{m,n}/贪婪匹配</h6><p>其中正则<code>/\d{2,5}/</code>，表示数字连续出现2到5次。会匹配2位、3位、4位、5位连续数字。</p>
<p>实例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var regex &#x3D; &#x2F;\d&#123;2,5&#125;&#x2F;g;</span><br><span class="line">var string &#x3D; &quot;123 1234 12345 123456&quot;;</span><br><span class="line">console.log( string.match(regex) ); </span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; [&quot;123&quot;, &quot;1234&quot;, &quot;12345&quot;, &quot;12345&quot;]</span><br></pre></td></tr></table></figure>



<h6 id="d-m-n-惰性匹配"><a href="#d-m-n-惰性匹配" class="headerlink" title="/\d{m,n}?/惰性匹配"></a>/\d{m,n}?/惰性匹配</h6><p>其中<code>/\d{2,5}?/</code>表示，虽然2到5次都行，当2个就够的时候，就不在往下尝试了。</p>
<p>实例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var regex &#x3D; &#x2F;\d&#123;2,5&#125;?&#x2F;g;</span><br><span class="line">var string &#x3D; &quot;123 1234 12345 123456&quot;;</span><br><span class="line">console.log( string.match(regex) ); </span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; [&quot;12&quot;, &quot;12&quot;, &quot;34&quot;, &quot;12&quot;, &quot;34&quot;, &quot;12&quot;, &quot;34&quot;, &quot;56&quot;]</span><br></pre></td></tr></table></figure>

<p>通过在量词后面加个问号就能实现惰性匹配，因此所有惰性匹配情形如下：</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;m,n&#125;?</span><br><span class="line">&#123;m,&#125;?</span><br><span class="line">??</span><br><span class="line">+?</span><br><span class="line">*?</span><br></pre></td></tr></table></figure>
</blockquote>
<p><em>惰性匹配指的是在现有情况下去匹配最优（少）解，比如”??”代表1or0，如果匹配不到1则匹配0.</em></p>
<h4 id="a-b-多选分支"><a href="#a-b-多选分支" class="headerlink" title="/a|b/多选分支"></a>/a|b/多选分支</h4><p>具体形式如下：<code>(p1|p2|p3)</code>，其中<code>p1</code>、<code>p2</code>和<code>p3</code>是子模式，用<code>|</code>（管道符）分隔，表示其中任何之一。</p>
<p>实例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var regex &#x3D; &#x2F;good|nice&#x2F;g;</span><br><span class="line">var string &#x3D; &quot;good idea, nice try.&quot;;</span><br><span class="line">console.log( string.match(regex) ); </span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; [&quot;good&quot;, &quot;nice&quot;]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Q:/a|b/和/[ab]/有什么区别呢？</p>
<p>A: emmm不太好讲，大家自己先体会下，等我变牛了来告诉你们！</p>
</blockquote>
<p>注：但有个事实我们应该注意，比如我用<code>/good|goodbye/</code>，去匹配”goodbye”字符串时，结果是”good”：*</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var regex &#x3D; &#x2F;good|goodbye&#x2F;g;</span><br><span class="line">var string &#x3D; &quot;goodbye&quot;;</span><br><span class="line">console.log( string.match(regex) ); </span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; [&quot;good&quot;]</span><br></pre></td></tr></table></figure>

<p><em>也就是说，分支结构也是惰性的，即当前面的匹配上了，后面的就不再尝试了（前提是两者要有重复部分）。</em></p>
<h4 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h4><h5 id="匹配16进制颜色值"><a href="#匹配16进制颜色值" class="headerlink" title="匹配16进制颜色值"></a><strong>匹配16进制颜色值</strong></h5><p>Q:要求匹配</p>
<blockquote>
<p>#ffbbad</p>
<p>#Fc01DF</p>
<p>#FFF</p>
<p>#ffE</p>
</blockquote>
<p>A:</p>
<blockquote>
<p>/#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})/g</p>
</blockquote>
<h5 id="匹配时间"><a href="#匹配时间" class="headerlink" title="匹配时间"></a><strong>匹配时间</strong></h5><p>Q:要求匹配</p>
<blockquote>
<p>23:59</p>
<p>02:07</p>
</blockquote>
<p>A:</p>
<blockquote>
<p><code>/([01][0-9]|[2][0-3]):([0-5][0-9])/</code></p>
</blockquote>
<h5 id="window操作系统文件路径"><a href="#window操作系统文件路径" class="headerlink" title="window操作系统文件路径"></a><strong>window操作系统文件路径</strong></h5><p>Q:要求匹配</p>
<blockquote>
<p>F:\study\javascript\regex\regular expression.pdf</p>
<p>F:\study\javascript\regex\</p>
<p>F:\study\javascript</p>
<p>F:\</p>
</blockquote>
<p>A:</p>
<blockquote>
<p><code>/^[a-zA-Z]:\\([^\\:*&lt;&gt;|&quot;?\r\n/]+\\)*([^\\:*&lt;&gt;|&quot;?\r\n/]+)?$/</code></p>
</blockquote>
<h3 id="位置匹配"><a href="#位置匹配" class="headerlink" title="位置匹配"></a>位置匹配</h3><h4 id="6个锚字符"><a href="#6个锚字符" class="headerlink" title="6个锚字符"></a>6个锚字符</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^ </span><br><span class="line">$ </span><br><span class="line">\b </span><br><span class="line">\B </span><br><span class="line">(?&#x3D;p) </span><br><span class="line">(?!p)</span><br></pre></td></tr></table></figure>



<h5 id="和"><a href="#和" class="headerlink" title="^和$"></a>^和$</h5><p><code>^</code>（脱字符）匹配开头，在多行匹配中匹配行开头。</p>
<p><code>$</code>（美元符号）匹配结尾，在多行匹配中匹配行结尾。</p>
<p><em>多行匹配模式时，二者是<strong>行</strong>的概念，这个需要我们的注意：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var result &#x3D; &quot;I\nlove\njavascript&quot;.replace(&#x2F;^|$&#x2F;gm, &#39;#&#39;);</span><br><span class="line"></span><br><span class="line">console.log(result);</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"></span><br><span class="line">#I#</span><br><span class="line"></span><br><span class="line">#love#</span><br><span class="line"></span><br><span class="line">#javascript#</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>



<h5 id="b和-B"><a href="#b和-B" class="headerlink" title="\b和\B"></a><strong>\b和\B</strong></h5><p><code>\b</code>是单词边界，具体就是<code>\w</code>和<code>\W</code>之间的位置，也包括<code>\w</code>和<code>^</code>之间的位置，也包括<code>\w</code>和<code>$</code>之间的位置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var result &#x3D; &quot;[JS] Lesson_01.mp4&quot;.replace(&#x2F;\b&#x2F;g, &#39;#&#39;);</span><br><span class="line"></span><br><span class="line">console.log(result);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; &quot;[#JS#] #Lesson_01#.#mp4#&quot;</span><br></pre></td></tr></table></figure>

<p><code>\B</code>就是<code>\b</code>的反面的意思，非单词边界。例如在字符串中所有位置中，扣掉<code>\b</code>，剩下的都是<code>\B</code>的。</p>
<p>具体说来就是<code>\w</code>与<code>\w</code>、<code>\W</code>与<code>\W</code>、<code>^</code>与<code>\W</code>，<code>\W</code>与<code>$</code>之间的位置。</p>
<p>比如上面的例子，把所有<code>\B</code>替换成”#”：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var result &#x3D; &quot;[JS] Lesson_01.mp4&quot;.replace(&#x2F;\B&#x2F;g, &#39;#&#39;);</span><br><span class="line"></span><br><span class="line">console.log(result);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; &quot;#[J#S]# L#e#s#s#o#n#_#0#1.m#p#4&quot;</span><br></pre></td></tr></table></figure>



<h5 id="p-和-p"><a href="#p-和-p" class="headerlink" title="(?=p)和(?!p)"></a><strong>(?=p)和(?!p)</strong></h5><p><code>(?=p)</code>，其中 <code>p</code> 是一个子模式，即 <code>p</code> 前面的位置，或者说，该位置后面的字符要匹配 <code>p</code>。比如<code>(?=l)</code>，表示 <code>l</code> 字符前面的位置，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let result &#x3D; &#39;lemon&#39;.replace(&#x2F;(?&#x3D;l)&#x2F;g, &#39;#&#39;);</span><br><span class="line">console.log(result);</span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; #lemon</span><br></pre></td></tr></table></figure>

<p>而 <code>(?!p)</code> 就是<code>(?=p)</code> 的反面意思，比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let result &#x3D; &#39;lemon&#39;.replace(&#x2F;(?!l)&#x2F;g, &#39;#&#39;);</span><br><span class="line">console.log(result);</span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; l#e#m#o#n#</span><br></pre></td></tr></table></figure>

<p>二者的学名分别是positive lookahead 和 negative lookahead。中文意思分别为正向先行断言和负向先行断言。ES5之后的版本，会支持positive lookbehind 和 negative lookbehind。意思是正向后行断言和负向后行断言。具体是<code>(?&lt;=p)</code> 和 (?&lt;!p)。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let result &#x3D; &#39;lemon&#39;.replace(&#x2F;(?&lt;&#x3D;l)&#x2F;g, &#39;#&#39;);</span><br><span class="line">console.log(result);</span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; l#emon</span><br></pre></td></tr></table></figure>

<p>表示该位置之前的字符要匹配 <code>l</code> 表达式。而 (?&lt;!p) 为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let result &#x3D; &#39;lemon&#39;.replace(&#x2F;(?&lt;&#x3D;l)&#x2F;g, &#39;#&#39;);</span><br><span class="line">console.log(result);</span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; #le#m#o#n#</span><br></pre></td></tr></table></figure>

<p>表示该位置之前的字符不能匹配 <code>l</code>。</p>
<h4 id="相关案例"><a href="#相关案例" class="headerlink" title="相关案例"></a>相关案例</h4><h5 id="不匹配任何东西的正则"><a href="#不匹配任何东西的正则" class="headerlink" title="不匹配任何东西的正则"></a><strong>不匹配任何东西的正则</strong></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;.^&#x2F;</span><br></pre></td></tr></table></figure>



<h5 id="数字的千位分隔符表示法"><a href="#数字的千位分隔符表示法" class="headerlink" title="数字的千位分隔符表示法"></a><strong>数字的千位分隔符表示法</strong></h5><h6 id="弄出最后一个逗号"><a href="#弄出最后一个逗号" class="headerlink" title="弄出最后一个逗号"></a><strong>弄出最后一个逗号</strong></h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var result &#x3D; &quot;12345678&quot;.replace(&#x2F;(?&#x3D;\d&#123;3&#125;$)&#x2F;g, &#39;,&#39;)</span><br><span class="line"></span><br><span class="line">console.log(result);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; &quot;12345,678&quot;</span><br></pre></td></tr></table></figure>

<h6 id="弄出所有的逗号"><a href="#弄出所有的逗号" class="headerlink" title="弄出所有的逗号"></a><strong>弄出所有的逗号</strong></h6><p>因为逗号出现的位置，要求后面3个数字一组，也就是<code>\d{3}</code>至少出现一次。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var result &#x3D; &quot;12345678&quot;.replace(&#x2F;(?&#x3D;(\d&#123;3&#125;)+$)&#x2F;g, &#39;,&#39;)</span><br><span class="line"></span><br><span class="line">console.log(result);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; &quot;12,345,678&quot;</span><br></pre></td></tr></table></figure>

<h6 id="匹配其余案例"><a href="#匹配其余案例" class="headerlink" title="匹配其余案例"></a><strong>匹配其余案例</strong></h6><p>我们要求匹配的到这个位置不能是开头。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var string1 &#x3D; &quot;12345678&quot;,</span><br><span class="line"></span><br><span class="line">string2 &#x3D; &quot;123456789&quot;;</span><br><span class="line"></span><br><span class="line">reg &#x3D; &#x2F;(?!^)(?&#x3D;(\d&#123;3&#125;)+$)&#x2F;g;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">var result &#x3D; string1.replace(reg, &#39;,&#39;)</span><br><span class="line"></span><br><span class="line">console.log(result);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; &quot;12,345,678&quot;</span><br></pre></td></tr></table></figure>

<p><strong><em>(?!^)代表我们将匹配的字符串其后面一位不能是^,即开头</em></strong></p>
<h5 id="支持其他形式"><a href="#支持其他形式" class="headerlink" title="支持其他形式"></a><strong>支持其他形式</strong></h5><p>如果要把”12345678 123456789”替换成”12,345,678 123,456,789”。</p>
<p>此时我们需要修改正则，把里面的开头<code>^</code>和结尾<code>$</code>，替换成<code>\b</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var string &#x3D; &quot;12345678 123456789&quot;,</span><br><span class="line"></span><br><span class="line">reg &#x3D; &#x2F;(?!\b)(?&#x3D;(\d&#123;3&#125;)+\b)&#x2F;g;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">var result &#x3D; string.replace(reg, &#39;,&#39;)</span><br><span class="line"></span><br><span class="line">console.log(result);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; &quot;12,345,678 123,456,789&quot;</span><br></pre></td></tr></table></figure>

<p>其中<code>(?!\b)</code>怎么理解呢？</p>
<p>要求当前是一个位置，但不是<code>\b</code>前面的位置，其实<code>(?!\b)</code>说的就是<code>\B</code>。</p>
<p>因此最终正则变成了：<code>/\B(?=(\d{3})+\b)/g</code>。</p>
<h4 id="验证密码问题"><a href="#验证密码问题" class="headerlink" title="验证密码问题"></a><strong>验证密码问题</strong></h4><p>密码长度6-12位，由数字、小写字符和大写字母组成，但必须至少包括2种字符。</p>
<h5 id="简化"><a href="#简化" class="headerlink" title="简化"></a>简化</h5><p>不考虑“但必须至少包括2种字符”这一条件。我们可以容易写出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var reg &#x3D; &#x2F;^[0-9A-Za-z]&#123;6,12&#125;$&#x2F;;</span><br></pre></td></tr></table></figure>

<h5 id="判断是否包含有某一种字符"><a href="#判断是否包含有某一种字符" class="headerlink" title="判断是否包含有某一种字符"></a><strong>判断是否包含有某一种字符</strong></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var reg &#x3D; &#x2F;(?&#x3D;.*[0-9])^[0-9A-Za-z]&#123;6,12&#125;$&#x2F;;</span><br></pre></td></tr></table></figure>

<p><strong><em>(?=.[0-9])代表我们将匹配的字符串其后应该是：任意个任意字符后加一个数字，即存在数字。</em></strong></p>
<h5 id="最终答案"><a href="#最终答案" class="headerlink" title="最终答案"></a>最终答案</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var reg &#x3D; &#x2F;((?&#x3D;.*[0-9])(?&#x3D;.*[a-z])|(?&#x3D;.*[0-9])(?&#x3D;.*[A-Z])|(?&#x3D;.*[a-z])(?&#x3D;.*[A-Z]))^[0-9A-Za-z]&#123;6,12&#125;$&#x2F;;</span><br></pre></td></tr></table></figure>



<h5 id="另一种解法"><a href="#另一种解法" class="headerlink" title="另一种解法"></a>另一种解法</h5><p>“至少包含两种字符”的意思就是说，不能全部都是数字，也不能全部都是小写字母，也不能全部都是大写字母。</p>
<p>那么要求“不能全部都是数字”，怎么做呢？<code>(?!p)</code>出马！</p>
<p>对应的正则是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var reg &#x3D; &#x2F;(?!^[0-9]&#123;6,12&#125;$)^[0-9A-Za-z]&#123;6,12&#125;$&#x2F;;</span><br></pre></td></tr></table></figure>

<p><strong><em>(?!^[0-9]{6,12}$)代表我们将匹配的字符串，该位置后不能满足^[0-9]{6,12}$，即全是数字。</em></strong></p>
<h6 id="另一种解法的最终答案"><a href="#另一种解法的最终答案" class="headerlink" title="另一种解法的最终答案"></a>另一种解法的最终答案</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var reg &#x3D; &#x2F;(?!^[0-9]&#123;6,12&#125;$)(?!^[a-z]&#123;6,12&#125;$)(?!^[A-Z]&#123;6,12&#125;$)^[0-9A-Za-z]&#123;6,12&#125;$&#x2F;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JS</category>
      </categories>
  </entry>
  <entry>
    <title>JS test()/exec()函数 [字符串是否匹配]</title>
    <url>/2020/01/04/JS-test-exec-%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="test"><a href="#test" class="headerlink" title="test()"></a>test()</h2><h3 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h3><p>test() 方法用于检测一个字符串是否匹配某个模式，如果字符串中含有匹配的文本，则返回 true，否则返回 false。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">regex.test(string);</span><br></pre></td></tr></table></figure>

<p><em>即判断string中有无与regex中匹配的字符串</em></p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var str &#x3D; &#x2F;G&#x2F;;               &#x2F;&#x2F;也可以用var str&#x3D;RegEx(&quot;G&quot;);</span><br><span class="line">    document.write(str.test(&quot;Welcome to Albatross-G!&quot;));</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&lt;script&gt;中两行可以变成一行（如下）</span><br><span class="line">&#x2F;&#x2F;document.write(&#x2F;G&#x2F;.test(&quot;Welcome to Albatross-G!&quot;)</span><br></pre></td></tr></table></figure>

<p>结果为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">true</span><br></pre></td></tr></table></figure>

<h2 id="exec"><a href="#exec" class="headerlink" title="exec()"></a>exec()</h2><h2 id="定义和用法-1"><a href="#定义和用法-1" class="headerlink" title="定义和用法"></a>定义和用法</h2><p>exec() 方法用于检索字符串中的正则表达式的匹配。</p>
<p>该函数返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。</p>
<h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">regex.exec(string);</span><br></pre></td></tr></table></figure>

<p><em>与test()相比不同是，如果匹配到了会返回匹配内容而不是true。</em></p>
<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var str &#x3D; &#x2F;G&#x2F;;               &#x2F;&#x2F;也可以用var str&#x3D;RegEx(&quot;G&quot;);</span><br><span class="line">    document.write(str.exec(&quot;Welcome to Albatross-G!&quot;));</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&lt;script&gt;中两行可以变成一行（如下）</span><br><span class="line">&#x2F;&#x2F;document.write(&#x2F;G&#x2F;.exec(&quot;Welcome to Albatross-G!&quot;)</span><br></pre></td></tr></table></figure>

<p>结果为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">G</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JS 函数整理</category>
      </categories>
      <tags>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>JS search()/repalce()函数 [找/替代字符串]</title>
    <url>/2020/01/03/JS%20search()%20repalce()%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="search"><a href="#search" class="headerlink" title="search()"></a>search()</h2><h3 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h3><p>用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回子串的起始位置。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">string.search(regex(正则表达式));</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://albatross-g.github.io/2020/01/04/JS-正则表达式/" target="_blank" rel="noopener">正则表达式(regex)</a></p>
</blockquote>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var str &#x3D; &quot;Visit Runoob!&quot;; </span><br><span class="line">    var n &#x3D; str.search(&#x2F;runoob&#x2F;i);&#x2F;&#x2F;其中i表示搜索不区分大小写</span><br><span class="line">    document.write(n);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>结果为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure>



<h2 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h2><h3 id="定义和用法-1"><a href="#定义和用法-1" class="headerlink" title="定义和用法"></a>定义和用法</h3><p>用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。</p>
<h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">string.replace(regex(被替换),string(用来替换));</span><br></pre></td></tr></table></figure>

<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var str &#x3D; &quot;Visit Baidu!&quot;; </span><br><span class="line">    var n &#x3D; str.replace(&#x2F;baidu&#x2F;i,&quot;Albatross-G&quot;);</span><br><span class="line">    document.write(n);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>结果是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Visit Albatross-G!</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JS 函数整理</category>
      </categories>
      <tags>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>JS indexOf()函数 [检索字符在字符串的位置]</title>
    <url>/2020/01/03/JS%20indexOf()%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h2><h3 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h3><p>indexOf() 方法可返回某个指定的字符串值在字符串中首次出现的位置。</p>
<p>如果没有找到匹配的字符串则返回 -1。</p>
<p><strong>注意：</strong> indexOf() 方法区分大小写。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">string.indexOf(searchvalue,start)</span><br></pre></td></tr></table></figure>

<h3 id="参数值"><a href="#参数值" class="headerlink" title="参数值"></a>参数值</h3><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>searchvalue</td>
<td>必需。规定需检索的字符串值</td>
</tr>
<tr>
<td>start</td>
<td>可选的整数参数。规定在字符串中开始检索的位置。它的合法取值是 0 到 string Object.length - 1。如省略该参数，则将从字符串的首字符开始检索。</td>
</tr>
</tbody></table>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var str&#x3D;&quot;Hello world, welcome to the universe.&quot;;</span><br><span class="line">var n&#x3D;str.indexOf(&quot;e&quot;);</span><br><span class="line">document.write(n); &#x2F;&#x2F;输出变量不需要加&quot;&quot;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>结果为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure>



<h3 id="相似函数lastIndexOf"><a href="#相似函数lastIndexOf" class="headerlink" title="相似函数lastIndexOf()"></a>相似函数lastIndexOf()</h3><p><em>注意i要大写！</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var str&#x3D;&quot;Hello world, welcome to the universe.&quot;;</span><br><span class="line">var n&#x3D;str.lastIndexOf(&quot;e&quot;);</span><br><span class="line">document.write(n);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>结果为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">35</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>JS 函数整理</category>
      </categories>
      <tags>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP弱类型比较</title>
    <url>/2020/01/03/PHP%E5%BC%B1%E7%B1%BB%E5%9E%8B%E6%AF%94%E8%BE%83/</url>
    <content><![CDATA[<p>前两天在做南邮ctf“md5 collision”时，遇到了关于php弱类型比较的问题，当时搞得似懂非懂，所以今天查了有关资料然后稍微总结一下。</p>
<h2 id="php完全相等-“-”"><a href="#php完全相等-“-”" class="headerlink" title="php完全相等(“===”)"></a>php完全相等(“===”)</h2><p>“===” 在进行比较的时候，会先判断两种字符串的类型是否相等，再比较。<br>也就是说如果两边字符串类型就不同的话，就直接判断为两边不相等。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump(1&#x3D;&#x3D;&#x3D;&quot;1abc&quot;);</span><br></pre></td></tr></table></figure>
<p>结果是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bool(false)</span><br></pre></td></tr></table></figure>
<p>甚至</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump(1&#x3D;&#x3D;&#x3D;1e0);</span><br></pre></td></tr></table></figure>
<p>这种我们正常认知里数值相等的结果也是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bool(false)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>当一个字符串欸当作一个数值来取值，其结果和类型如下:如果该字符串没有包含’.’,’e’,’E’并且其数值值在整形的范围之内。</p>
</blockquote>
<p>所以1e0被认为是浮点数，类型不同自然不相等。</p>
<blockquote>
<p><strong>注意：</strong>使用var_dump函数时，在括号内如果给整型(如1)增加””变成(“1”),则”1”会被认为是字符串。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump(1&#x3D;&#x3D;&#x3D;&quot;1&quot;)</span><br></pre></td></tr></table></figure>
<p>结果是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bool(false)</span><br></pre></td></tr></table></figure>

<h2 id="php弱相等-“-”"><a href="#php弱相等-“-”" class="headerlink" title="php弱相等(“==”)"></a>php弱相等(“==”)</h2><h3 id="php弱相等比较表"><a href="#php弱相等比较表" class="headerlink" title="php弱相等比较表"></a>php弱相等比较表</h3><p>首先看一张图，一般比较就参考下图。<br><img src="https://Albatross-G.github.io/img/php%E5%BC%B1%E7%9B%B8%E7%AD%89%E6%AF%94%E8%BE%83%E8%A1%A8.png" alt></p>
<h3 id="php弱相等时类型的转化"><a href="#php弱相等时类型的转化" class="headerlink" title="php弱相等时类型的转化"></a>php弱相等时类型的转化</h3><p>首先一定要注意：<strong>只有当类型不同时才会转化！</strong><br>“1e1234567”会被看成浮点型，正常计算法则计算即可<br>“1e1234abc”会被看成字符串，转化规则：<br>取第一个字母之前的数字，如无数字则为0。<br>如：1a1234abc转化为1，abcd转化为0。</p>
<h3 id="一些发现"><a href="#一些发现" class="headerlink" title="一些发现"></a>一些发现</h3><p>可是笔者经过一些测试发现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump(&quot;1e2abc&quot;&#x3D;&#x3D;100);</span><br></pre></td></tr></table></figure>
<p>得到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bool(true)</span><br></pre></td></tr></table></figure>
<p>也就是说如果第一个非e/E字母前满足科学计数法形式，会先计算科学计数法数变成整型然后去掉之后字母。</p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>比较</tag>
        <tag>数据类型的转化</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-01-03日目标</title>
    <url>/2020/01/02/2020-01-03%E6%97%A5%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<p>1. 9:30在1307考html<br>2. 10min英语听力+10个英语单词<br>3. <a href="https://www.runoob.com/js/js-typeof.html" target="_blank" rel="noopener">JS typeof操作符</a>-JS代码规范<br>4. <a href="https://cgctf.nuptsast.com/challenges#Web" target="_blank" rel="noopener">南邮ctf “这题不是web”</a><br>5. CSS盒子模型</p>
]]></content>
      <categories>
        <category>日目标</category>
      </categories>
  </entry>
  <entry>
    <title>以数组作为函数参数的两种方法</title>
    <url>/2020/01/01/%E4%BB%A5%E6%95%B0%E7%BB%84%E4%BD%9C%E4%B8%BA%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>数组可以作为函数的参数使用，进行数据传送。数组作为函数参数有两种形式。<br>（1）把元素作为实参使用。<br>（2）把数组名作为函数的形参和实参使用。</p>
<h2 id="数组元素作为函数实参"><a href="#数组元素作为函数实参" class="headerlink" title="数组元素作为函数实参"></a>数组元素作为函数实参</h2><h3 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdafx.h&gt;</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">void test(int v);</span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">    int a[10]&#x3D;&#123;1,2,3,4,-1,-2,-3,-4,2,3&#125;;</span><br><span class="line">    int i;</span><br><span class="line">    for(i&#x3D;0;i&lt;&#x3D;10;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        test(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">void test(int v)</span><br><span class="line">&#123;</span><br><span class="line">    if(v&gt;0)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%d\n&quot;,v);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;0\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数组名作为函数参数"><a href="#数组名作为函数参数" class="headerlink" title="数组名作为函数参数"></a>数组名作为函数参数</h2><p>注：<br>（1）与数组元素作为函数参数不同的是，用数组名作为函数参数时，要求形参与相对应的实参都必须是类型相同的数组，否则会发生错误。<br>（2）用数组名作为函数参数时，并不是进行值的传递，即不是把实参数组的每一个元素的值都赋与形参数组的各个元素。因为实际上形参数组并不存在，编译系统并不为形参数组分配内存。<br>数据的传递：数组名就是数组的首地址。因此在数组名作为函数参数时所进行的传递只是地址的传递，也就是说把实参数组的首地址赋予形参数组名。形参数组名取得该首地址之后，也等于有了实际的数组，即实参与形参有一段共用的内存空间。</p>
<h3 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdafx.h&gt;</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">void test (int b[10]);</span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">    int a[10]&#x3D;&#123;2,4,6,8,10,12,14,16,18,20&#125;;</span><br><span class="line">    test(a);</span><br><span class="line">    putchar(&#39;\n&#39;);</span><br><span class="line">&#125;</span><br><span class="line">void test (int b[10])</span><br><span class="line">&#123;</span><br><span class="line">    int i&#x3D;0;</span><br><span class="line">    for(;i&lt;10;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%6d&quot;,b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="例3"><a href="#例3" class="headerlink" title="例3"></a>例3</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有一个一维数组score，内放10个学生成绩，求平均成绩。（写一个average函数获取平均成绩）。</span><br><span class="line"> </span><br><span class="line">#include &lt;stdafx.h&gt;</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">double average(double array[10]);&#x2F;*函数声明*&#x2F;</span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">    double score[10]&#x3D;&#123;82,100,55,80,64,78,26,65,36,85&#125;,result;</span><br><span class="line">    result&#x3D;average(score);</span><br><span class="line">    printf(&quot;%lf\n&quot;,result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">double average(double array[10])</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line">    double f&#x3D;0;</span><br><span class="line">    for(i&#x3D;0;i&lt;&#x3D;9;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        f+&#x3D;array[i];</span><br><span class="line">    &#125;</span><br><span class="line">    f &#x2F;&#x3D; 10;</span><br><span class="line">    return (f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>函数</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>初学C语言指针的一些思考</title>
    <url>/2020/01/01/%E5%88%9D%E5%AD%A6C%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<h2 id="函数求平均数-没用到指针"><a href="#函数求平均数-没用到指针" class="headerlink" title="函数求平均数(没用到指针)"></a>函数求平均数(没用到指针)</h2><p>我们先看一个用函数求平均数的例子<br>这里面没有用到指针</p>
<h3 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int Getaverage(int arr[5],int size);</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int sz[5]&#x3D;&#123;1,2,3,4,5&#125;;</span><br><span class="line">	double average;</span><br><span class="line">	average&#x3D;Getaverage(sz,5);</span><br><span class="line">	printf(&quot;%lf&quot;,average);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int Getaverage(int arr[5],int size)</span><br><span class="line">&#123;</span><br><span class="line">	int i,sum&#x3D;0;</span><br><span class="line">	double ave;</span><br><span class="line">	for(i&#x3D;0;i&lt;size;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		sum&#x3D;sum+arr[i];</span><br><span class="line">	&#125;</span><br><span class="line">	ave&#x3D;sum&#x2F;size;</span><br><span class="line">	return ave;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（在C语言中若要把数组作为函数参数，要遵循其规则，详情可见文章<a href="https://albatross-g.github.io/2020/01/01/%E4%BB%A5%E6%95%B0%E7%BB%84%E4%BD%9C%E4%B8%BA%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">以数组作为函数参数的两种方法.docx</a>）</p>
<h2 id="函数求平均数-用到指针"><a href="#函数求平均数-用到指针" class="headerlink" title="函数求平均数(用到指针)"></a>函数求平均数(用到指针)</h2><p>按文章中的规定此时 形参（arr[5]）和 实参（sz）类型必须相同，所以如果我们main中的sz数组中数字个数发生了变化，则Getaverage也要改变形参，变得非常麻烦，于是我们有了以下对指针的引用。</p>
<h3 id="普通版"><a href="#普通版" class="headerlink" title="普通版"></a>普通版</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"> </span><br><span class="line">&#x2F;* 函数声明 *&#x2F;</span><br><span class="line">double getAverage(int *arr, int size);</span><br><span class="line"> </span><br><span class="line">int main ()</span><br><span class="line">&#123;</span><br><span class="line">   &#x2F;* 带有 5 个元素的整型数组  *&#x2F;</span><br><span class="line">   int balance[5] &#x3D; &#123;1000, 2, 3, 17, 50&#125;;</span><br><span class="line">   double avg;</span><br><span class="line"> </span><br><span class="line">   &#x2F;* 传递一个指向数组的指针作为参数 *&#x2F;</span><br><span class="line">   avg &#x3D; getAverage( balance, 5 ) ;</span><br><span class="line"> </span><br><span class="line">   &#x2F;* 输出返回值  *&#x2F;</span><br><span class="line">   printf(&quot;Average value is: %f\n&quot;, avg );</span><br><span class="line">   </span><br><span class="line">   return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">double getAverage(int *arr, int size)</span><br><span class="line">&#123;</span><br><span class="line">  int    i, sum &#x3D; 0;      </span><br><span class="line">  double avg;          </span><br><span class="line"> </span><br><span class="line">  for (i &#x3D; 0; i &lt; size; ++i)</span><br><span class="line">  &#123;</span><br><span class="line">    sum +&#x3D; arr[i];</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  avg &#x3D; (double)sum &#x2F; size;</span><br><span class="line"> </span><br><span class="line">  return avg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样的话，*arr相当于把数组的首地址分配给了函数，就不必对每一次实参的改变调整形参。</p>
<h3 id="进阶版"><a href="#进阶版" class="headerlink" title="进阶版"></a>进阶版</h3><p>再更进一步，可以思考设计一个更贴近实际作用地程序，即scanf输入所需计算的数（个数不限）而得到平均值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">double getAverage(int *arr, int size);</span><br><span class="line"> </span><br><span class="line">int main ()</span><br><span class="line">&#123;</span><br><span class="line">	int i,a[999],n&#x3D;0;</span><br><span class="line">    for(i&#x3D;0;;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">        n++;       </span><br><span class="line">        if(getchar()&#x3D;&#x3D;&#39;\n&#39;)break; </span><br><span class="line">    &#125;</span><br><span class="line">    double avg;</span><br><span class="line">	avg &#x3D; getAverage(a,n) ;</span><br><span class="line"> </span><br><span class="line">    printf(&quot;Average value is: %f\n&quot;, avg );</span><br><span class="line">   </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">double getAverage(int *arr, int size)</span><br><span class="line">&#123;</span><br><span class="line">  int    i, sum &#x3D; 0;      </span><br><span class="line">  double avg;          </span><br><span class="line"> </span><br><span class="line">  for (i &#x3D; 0; i &lt; size; ++i)</span><br><span class="line">  &#123;</span><br><span class="line">    sum +&#x3D; arr[i];</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  avg &#x3D; (double)sum &#x2F; size;</span><br><span class="line"> </span><br><span class="line">  return avg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>函数</tag>
        <tag>指针</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/01/01/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>guide</category>
      </categories>
      <tags>
        <tag>guide</tag>
      </tags>
  </entry>
</search>
